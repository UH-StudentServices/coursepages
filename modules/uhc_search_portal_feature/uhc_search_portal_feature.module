<?php
/**
 * @file
 * Code for the Portal feature.
 *
 * @license GPL, or GNU General Public License, version 3
 * @license http://opensource.org/licenses/GPL-3.0
 * @see README.md how to contribute to this project
 */

include_once 'uhc_search_portal_feature.features.inc';

/**
 * Implements hook_views_data_alter().
 */
function uhc_search_portal_feature_views_data_alter(&$data) {
  if (isset($data['search_api_index_uhc_portal']['academic_year'])) {
    $data['search_api_index_uhc_portal']['academic_year']['filter']['handler'] = 'ViewsHandlerFilterAcademicYear';
  }
}

/**
 * Implements hook_form_alter().
 */
function uhc_search_portal_feature_form_alter(&$form, &$form_state, $form_id) {
  // When building form with CSS class "course-search" should have these
  // alterations. However, for performance reasons we just use form IDs here.
  switch ($form['#id']) {
    case 'views-exposed-form-uhc-search-desktop':
    case 'views-exposed-form-uhc-search-open-university-desktop':
    case 'views-exposed-form-uhc-search-biosciences-desktop':
    case 'views-exposed-form-uhc-portal-search-front-page--desktop':

      // Shhh... lets steal the view exposed filters from the view header and
      // print them under the search field. See how header gets hided in
      // uhc_search_portal_feature_views_pre_view() function.
      $view = views_get_view($form_state['view']->name);
      $view->set_display('desktop');
      $view->init_style();

      // Show subject filter only for finnish
      global $language;
      $lang = $language->language;
      if ($lang == 'en' || $lang == 'sv') {
        $header_items = $view->display_handler->get_option('header');
        foreach ($header_items as $header_item) {
          if (isset($header_item['block_to_insert'])) {
            if ($header_item['block_to_insert'] == 'facetapi:hJ4IV71A4mz2cwcDDKqg90v7Q1luMlbX') {
              $view->set_item($view->current_display, 'header', $header_item['id'], NULL);
            }
          }
        }
      }

      // add placeholder for search input
      $form['search']['#attributes']['placeholder'] = t('For example name of the course or topic.');

      // Render header and prefix it with filter help text
      $header = $view->display_handler->render_header();
      $filter_help = '<div class="filter-help">' . t('Limit search results') . ' <div class="description">' . t('Please define your search criteria. The number in brackets shows the amount of courses that match your search.') . '</div></div>';
      if (!empty($header)) {
        $form['search']['#suffix'] = $filter_help . $header;
      }

      $form['#submit'][] = 'uhc_search_portal_feature_back_to_view_on_reset';

      // Supply the correct base path to the search usability tweak JS
      $lang_prefix = ($lang == 'fi' || $lang == 'sv') ? $lang . '/' : '';
      $base_path = array(
        'views-exposed-form-uhc-search-desktop' => $lang_prefix . 'genetics/search',
        'views-exposed-form-uhc-search-open-university-desktop' => $lang_prefix . 'open-university/search',
        'views-exposed-form-uhc-search-biosciences-desktop' => $lang_prefix . 'molecular-biosciences/search',
        'views-exposed-form-uhc-portal-search-front-page--desktop' => $lang_prefix . 'search/results',
      );

      // Add some frontend alterations to related to filtering
      $form['#attached']['js'][] = drupal_get_path('module', 'uhc_search_portal_feature') . '/js/filters.js';
      $form['#attached']['js'][] = array(
        'data' => array(
          'search_base_path' => $base_path[$form['#id']],
        ),
        'type' => 'setting'
      );

      // Custom field prefix for genetics search box (not for open university).
      if ($form['#id'] == 'views-exposed-form-uhc-search-desktop') {
        $form['search']['#field_prefix'] = t('you may also search without keyword');
      }

      // Open university: Checkbox for searching ongoing courses, too.
      if ($form['#id'] == 'views-exposed-form-uhc-search-open-university-desktop') {
        if (isset($form_state['input']['include_ongoing_courses']) && $form_state['input']['include_ongoing_courses'] == '0') {
          unset($form_state['input']['include_ongoing_courses']);
        }

        $form['include_ongoing_courses'] = array(
          '#type' => 'checkbox',
          '#title' => t('Also show ongoing teaching'),
          '#description' => t('Select this if you want to see also the courses that have already begun.'),
        );
        $form['#info']['include_ongoing_courses'] = array(
          'value' => 'include_ongoing_courses',
        );
      }

      // Wider search box
      $form['search']['#size'] = 75;
      // Grid container
      $form['#attributes']['class'] = array('gridder-container-4');

      // When we are not performing an search, then take out the "reset" button.
      if (!_uhc_search_portal_feature_form_without_search_perform($form, $form_state)) {
        $form['reset']['#access'] = FALSE;
      }

    break;
  }
}

/**
 * Determines whether the form has performed an search.
 *
 * @param $form
 * @param $form_state
 * @return bool
 *   Returnes TRUE when it thinks that search has been performed. FALSE if it
 *   does not.
 */
function _uhc_search_portal_feature_form_without_search_perform($form, $form_state) {
  // If we have "search" query parameter set, we're performing an search with
  // keyword.
  return isset($_GET['search']);
}

/**
 * Implements hook_views_pre_view().
 */
function uhc_search_portal_feature_views_pre_view(&$view, &$display_id, &$args) {
  // Lets hide the header blocks, as we're printing them inside the exposed form
  // in uhc_search_portal_feature_form_alter().
  $header_items = $view->display_handler->get_option('header');
  foreach ($header_items as $header_item) {
    // Hide all header elements which are rendering blocks by facetapi
    $block_to_insert = 'facetapi';
    if (isset($header_item['block_to_insert']) && substr($header_item['block_to_insert'], 0, strlen($block_to_insert)) == $block_to_insert) {
      $view->set_item($display_id, 'header', $header_item['id'], NULL);
    }
  }
}

/**
 * Implements hook_views_post_execute().
 *
 * Adds a noindex metatag when on a search results page.
 */
function uhc_search_portal_feature_views_post_execute(&$view) {
  if (uhc_search_portal_feature_is_search_results_page($view)) {
    uhc_search_portal_feature_add_noindex_meta_tag();
  }
}

/**
 * Determines if we are in search results page having results.
 *
 * Due to couple hacks done around search form and functionality, there is no
 * clear streamlined way of detecting this other than checking if we're dealing
 * with one of search views and checking if we have search query parameter set.
 *
 * @param $view
 * @return bool
 */
function uhc_search_portal_feature_is_search_results_page(view $view) {
  $search_views = array(
    'uhc_search_open_university',
    'uhc_portal_search_front_page_',
    'uhc_search',
    'uhc_search_biosciences'
  );

  return in_array($view->name, $search_views) && array_key_exists('search', drupal_get_query_parameters());
}

/**
 * Adds noindex tag to page meta headers disallowing robots to index the page.
 */
function uhc_search_portal_feature_add_noindex_meta_tag() {
  $noindex_meta_tag = array(
    '#tag' => 'meta',
    '#attributes' => array(
      'name' => 'robots',
      'content' => 'noindex',
    )
  );

  drupal_add_html_head($noindex_meta_tag, 'robots');
}

/**
 * Form submission callback for redirecting back to view's landing page if
 * "reset" button has been triggered.
 */
function uhc_search_portal_feature_back_to_view_on_reset(&$form, &$form_state) {
  if ($form_state['triggering_element']['#id'] == 'edit-reset') {
    // Redirect to view's path
    $path = $form_state['view']->display_handler->get_option('path');
    if (!empty($path)) {
      $form_state['redirect'] = $path;
    }
  }
}

/**
 * Implements hook_default_search_api_server().
 */
function uhc_search_portal_feature_default_search_api_server_alter(array &$defaults) {

  // Override feature server settings for the SOLR server with variables from
  // settings.php
  $host = variable_get('uhc_search_portal_feature_host', 'localhost');
  $port = variable_get('uhc_search_portal_feature_port', '8983');
  $path = variable_get('uhc_search_portal_feature_path', '\\/solr');

  $defaults['solr'] = entity_import('search_api_server', '{
    "name" : "SOLR",
    "machine_name" : "solr",
    "description" : "Please use the settings.php for configuring this server. Variables are uhc_search_portal_feature_host, uhc_search_portal_feature_port and uhc_search_portal_feature_path.",
    "class" : "search_api_solr_service",
    "options" : {
      "clean_ids" : true,
      "site_hash" : true,
      "scheme" : "http",
      "host" : "' . $host . '",
      "port" : "' . $port . '",
      "path" : "' . $path . '",
      "http_user" : "",
      "http_pass" : "",
      "excerpt" : 0,
      "retrieve_data" : 0,
      "highlight_data" : 0,
      "skip_schema_check" : 0,
      "solr_version" : "",
      "http_method" : "AUTO",
      "autocorrect_spell" : 0,
      "autocorrect_suggest_words" : 0
    },
    "enabled" : "1",
    "rdf_mapping" : []
  }');

}

/**
 * Implements hook_block_view_alter().
 */
function uhc_search_portal_feature_block_view_alter(&$data, $block) {

  // We need this for supporting multilingual facet labels
  _uhc_search_portal_feature_translate_facet_block_title($data, $block);

  // These two tasks needed for exposed filter block rendering
  _uhc_search_portal_feature_append_view_css_class_to_exposed_block($data, $block);
  if ($block->module == 'views') {
    $views_exposed_titles = array(
      '-exp-uhc_search-desktop' => t('Search for courses'),
      '6e81312883288ad7f0d23af96a88ead6' => t('Course Search'),
      '0580398bf6a2f9d60b32760e9900b13c' => t('Course Search'),
      'ddc12e0f6574edc3850aacc947821543' => t('Search for courses'),
    );
    _uhc_search_portal_feature_set_block_titles($block, $views_exposed_titles);
  }
}

/**
 * Translates facet filter block titles.
 */
function _uhc_search_portal_feature_translate_facet_block_title(&$data, $block) {
  if ($block->module == 'facetapi') {
    // FacetAPI tends to export blocks with fancy unique hash. All blocks are
    // translated here and they get looped over below and processed through t()
    $translate_block_titles = array(
      'eahZtWygrbd0mW39GxTTrKpmT6NtmJd3' => t('Theme'),
      'ebLMT1Egl05afck7AKCq6EMM2B4VuGer' => t('Type of teaching'),
      'do4BdKvyCgpZP4td6B6GmQ8iCUJ40HBx' => t('Method of study'),
      'cEQesYoZJTu7ITT2OD5RXHP0T0bqniOh' => t('Start month'),
      'u1d1Lx0rPaqN5rZzf9O8SX4IxIGxkUQG' => t('Location'),
      'R1BRVcBSjxhf1KDt3dthdTfNu1qhp5en' => t('Faculty'),
      'as918Au1kK03VaWu2iPYsRfNZ1iJWE7X' => t('Teaching language'),
      'hJ4IV71A4mz2cwcDDKqg90v7Q1luMlbX' => t('Subject'),
      'UHyOu2m5IufOONBzgYtqiXaxReuk8K7e' => t('Unit'),
    );
    _uhc_search_portal_feature_set_block_titles($block, $translate_block_titles);
  }
}

/**
 * Helper function for setting title for block programmatically. This is helpful
 * for cases where we have poor i18n support or no tools for setting block title
 * from source module (like views' exposed filter block).
 *
 * @param $data
 * @param $block
 * @param $title
 *   Array list of block ID and its title to be set.
 */
function _uhc_search_portal_feature_set_block_titles($block, $titles) {
  // Loop over titles and if we have delta match, then set the title and break
  foreach ($titles as $delta => $title) {
    if ($block->delta == $delta) {
      $block->title = $title;
      break;
    }
  }
}

/**
 * Helper function for adding CSS class from view configuration to exposed
 * filter block. See: http://drupal.stackexchange.com/questions/100255/how-to-add-custom-css-classes-to-views-exposed-filters
 *
 * @param $data
 * @param $block
 */
function _uhc_search_portal_feature_append_view_css_class_to_exposed_block(&$data, $block) {

  // When we have corresponding view available with an display id
  $view_name = isset($data['content']['#views_contextual_links_info']['views_ui']['view_name']) ? $data['content']['#views_contextual_links_info']['views_ui']['view_name'] : NULL;
  $view_display_id = isset($data['content']['#views_contextual_links_info']['views_ui']['view_display_id']) ? $data['content']['#views_contextual_links_info']['views_ui']['view_display_id'] : NULL;
  if (!is_null($view_name) && !is_null($view_display_id)) {
    // Instantiate the view with display handler, so that we can call for
    // potential CSS class options.
    $view = views_get_view($view_name);
    if (!$view) {
      // Bail out if coldn't instantiate the view
      return;
    }
    $view->set_display($view_display_id);
    $css_class = $view->display_handler->get_option('css_class');

    // If we found and CSS class, then append that CSS class to the list for
    // block rendering.
    if (!empty($css_class)) {
      $block->css_class .= $css_class;
    }
  }

}

/**
 * Implements hook_search_api_views_query_alter().
 *
 * Remove begin date filter from course search query when querying for ongoing
 * courses.
 */
function uhc_search_portal_feature_search_api_views_query_alter(view &$view, SearchApiViewsQuery &$query) {

  // Ongoing courses option (Open University). Note that this should overwrite
  // the semester selection, since it does not make sense to limit the results
  // based on the selected semester, since that would be confusing for the user.
  if ($view->name == 'uhc_search_open_university') {
    $include_ongoing_courses = isset($view->exposed_raw_input['include_ongoing_courses'])
      && $view->exposed_raw_input['include_ongoing_courses'] == 1;

    if ($include_ongoing_courses) {
      foreach ($query->where as &$where) {
        foreach ($where['conditions'] as $key => $condition) {
          if ($condition[0] == 'field_imp_begin_date') {
            unset($where['conditions'][$key]);
            break;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_facet_items_alter().
 *
 * Perform a search when facets are selected to avoid having to press submit again.
 */
function uhc_search_portal_feature_facet_items_alter(&$build, &$settings) {
  // remove first and second level from organisation facet
  if ($settings->facet == 'field_imp_organisation') {
    if (!empty($build)) {
      $build = array_shift($build)['#item_children'];
      if (!empty($build)) {
        $new_build = array();
        foreach ($build as $key => $value) {
          $new_build = array_merge($new_build, $build[$key]['#item_children']);
        }
        $build = $new_build;
      }
    }
  }

  if (!isset($settings->export_module) || $settings->export_module != 'uhc_search_portal_feature') {
    return;
  }

  if (!empty($build)) {
    foreach ($build as &$facet) {
      if (empty($facet['#query'])) {
        $facet['#query']['search'] = '';
      }
    }
  }
}

/**
 * Implements hook_search_api_query_alter().
 */
function uhc_search_portal_feature_search_api_query_alter(SearchApiQueryInterface $query) {
  // Alter search autocomplete to take filters defined in the view into account
  if ($query->getOption('search id') == 'search_api_autocomplete:search_api_views_uhc_search_open_university') {
    $view = views_get_view('uhc_search_open_university');
    $view->build();
    foreach ($view->filter as $id => $filter) {
      // Get all other filters used in the search view besides the search word
      if (strpos($id, 'search_api_aggregation') === 0) {
        continue;
      }
      if ($id == 'field_imp_begin_date' || $id == 'field_imp_end_date') {
        $query->condition($id, strtotime($filter->value), $filter->operator);
      }
      else {
        $query->condition($filter->real_field, $filter->value, $filter->operator);
      }
    }
  }
  // Alter facets to take the search word in the exposed filter into account
  elseif ($query->getOption('search id') == 'search_api_views:uhc_search_open_university:search_api_views_facets_block_1') {
    if (isset($_GET['search'])) {
      $query->condition('search_api_aggregation_1', check_plain($_GET['search']), '=');
    }
  }
  return $query;
}

/**
 * Implements hook_ds_fields_info().
 */
function uhc_search_portal_feature_ds_fields_info($entity_type) {
  $fields = array();
  $fields['section_search_form'] = array(
      'title' => t('Section search form'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => 'uhc_search_portal_feature_section_search_form'
  );
  return array('node' => $fields);
}

/**
 * DS field render function for printing section search form
 */
function uhc_search_portal_feature_section_search_form($field) {
  $node = $field['entity'];

  if (isset($node->field_show_search_box[LANGUAGE_NONE][0]) && $node->field_show_search_box[LANGUAGE_NONE][0]['value'] == 1) {

    $show_filters = isset($node->field_show_search_filters[LANGUAGE_NONE][0])
      && $node->field_show_search_filters[LANGUAGE_NONE][0]['value'];

    // load correct search block and facet block according to section.
    if (!empty($node->field_liftup_section)) {
      $section = $node->field_liftup_section[LANGUAGE_NONE][0]['value'];

      if ($section == 'genetics') {
        $exposed_form = block_load('views', '-exp-uhc_search-desktop');
        $facet_block = $show_filters ? block_load('views', '5dfb76ba1ce9809077d9d525bbf50f2c') : NULL;
      }
      if ($section == 'openuniversity') {
        $exposed_form = block_load('views', '6e81312883288ad7f0d23af96a88ead6');
        $facet_block = $show_filters ? block_load('views', 'c2214b19d79a77c1c1558fab6eb67c87') : NULL;
      }
      if ($section == 'biosciences') {
        $exposed_form = block_load('views', 'ddc12e0f6574edc3850aacc947821543');
        $facet_block = $show_filters ? block_load('views', '1f9eeaa6dc7b5053fb2ed2e1936d239c') : NULL;
      }
    }
    else {
      // If no section is set, show front page search.
      $facet_block = $show_filters ? block_load('views', '8e1bcc9ace0a8e252a5c6a87e71ad978') : NULL;
      $exposed_form = block_load('views', '0580398bf6a2f9d60b32760e9900b13c');
    }

    // This needs to be called, to make facets visible (attached in
    // uhc_search_portal_feature_form_alter() function). Don't ask why, it just
    // took too much time to dig and try to understand, so we let you to find it
    // out maybe some day :)
    // @see uhc_search_portal_feature_form_alter()
    if ($facet_block) {
      _block_get_renderable_array(_block_render_blocks(array($facet_block)));
    }

    $exposed_form_render_array = _block_get_renderable_array(_block_render_blocks(array($exposed_form)));
    // If Image and description are empty, hide searchbox title
    $description = field_get_items('node', $node, 'field_portal_page_description');
    $image = field_get_items('node', $node, 'field_portal_page_image');
    if (!$image && !$description) {
      foreach($exposed_form_render_array as $block) {
        if ($block['#block']) {
          $block['#block']->subject = '';
        }
      }
    }

    // NOTE: we don't have to render the facet block, but we need to load it
    // in order to get it rendered in uhc_search_portal_feature_form_alter().
    // why? Black magic.
    $output = render($exposed_form_render_array);

    if (empty($node->field_liftup_section)) {
      $student_url = variable_get('uhc_student_home_url', 'https://student.helsinki.fi/opintoni');
      $teacher_url = variable_get('uhc_teacher_home_url', 'https://teacher.helsinki.fi/opetukseni');
      $output .= '<div class="messages info"><p>' . t('Students are advised to access their active courses via My Studies') . '<a href="'.$student_url.'"></a></br>' . t('Teachers are advised to access their active courses via My Teaching') . '<a href="'.$teacher_url.'"></a></p></div>';
    }
    return $output;
  }
}

/**
 * Implements hook_entity_presave(). When saving a course, mark all its
 * implementations for reindexing in Search API.
 */
function uhc_search_portal_feature_entity_presave($entity, $type) {
  if ($type != 'node' || $entity->type != 'course') {
    return;
  }
  $query = db_query(
    'SELECT entity_id
    FROM {field_data_field_imp_reference_to_courses}
    WHERE field_imp_reference_to_courses_target_id = :nid',
    array(':nid' => $entity->nid)
  );
  // Make array of entity IDs to mark for reindexing
  $results = array_filter(array_map(function($elem) {
    return !empty($elem->entity_id) ? $elem->entity_id : NULL;
  }, $query->fetchAllAssoc('entity_id')));
  if ($results) {
    search_api_track_item_change('search_api_et_node', $results);
  }
}

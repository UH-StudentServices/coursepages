<?php
/**
 * @file Takes care of installation/update/uninstallation operations.
 *
 * @license GPL, or GNU General Public License, version 3
 * @license http://opensource.org/licenses/GPL-3.0
 * @see README.md how to contribute to this project
 */ 

/**
 * Remove field_subject_study_modules field collection, add field_study_module
 * field collection directly to subject node
 */
function uhc_subject_update_7001(&$sandbox) {

  // revert features so we have our new instance of field_study_modules
  features_revert_module('uhc_subject');

  // fetch all study module field collections and order them, join them with
  // field_subject_study_modules so we know which subject nodes they belong to
  $query = db_select('field_data_field_study_module', 't');
  $query->join('field_data_field_subject_study_modules', 'n', 'n.field_subject_study_modules_value = t.entity_id');

  $result = $query
    ->fields('t', array('field_study_module_value', 'field_study_module_revision_id', 'delta'))
    ->fields('n', array('entity_id', 'revision_id'))
    ->orderBy('entity_id')
    ->orderBy('delta')
    ->execute()
    ->fetchAll();

  db_truncate('field_revision_field_study_module')->execute();
  db_truncate('field_data_field_study_module')->execute();

  // Setup insert queries and start looping select query results
  $insert_data_query = db_insert('field_data_field_study_module');
  $insert_revision_query = db_insert('field_revision_field_study_module');

  $delta = 0;
  foreach ($result as $row) {
    // we increase delta and reset to 0 when entity_id changes.
    if ($previous_entity_id != $row->entity_id) {
      $delta = 0;
    }

    // Setup fields and values for insert queries
    $values = array(
      'entity_type' => 'node',
      'bundle' => 'subject',
      'deleted' => 0,
      'entity_id' =>  $row->entity_id,
      'revision_id' => $row->revision_id,
      'language' => LANGUAGE_NONE,
      'delta' => $delta,
      'field_study_module_value' => $row->field_study_module_value,
      'field_study_module_revision_id' => $row->field_study_module_revision_id,
    );

    // Now append the fields/values for both insert queries
    $insert_data_query->fields(array_keys($values));
    $insert_data_query->values(array_values($values));
    $insert_revision_query->fields(array_keys($values));
    $insert_revision_query->values(array_values($values));

    $delta++;
    $previous_entity_id = $row->entity_id;
  }

  // Now execute the queries and clear field caches.
  $insert_data_query->execute();
  $insert_revision_query->execute();

  // remove old field collection that we dont need anymore
  $instance = field_info_instance('node', 'field_subject_study_modules', 'subject');
  field_delete_instance($instance);
  field_cache_clear();
}

/**
 * Set course page visibility for existing content wanted to appear there based
 * on the title in their field collections
 */
function uhc_subject_update_7002(&$sandbox) {
  // We need the new field to be created through Features first
  features_revert_module('uhc_subject');

  $query = db_select('field_data_field_related_content_section', 'sub_to_fc');
  $query->join('field_data_field_related_content_title', 'fc_to_title',
    'sub_to_fc.field_related_content_section_value = fc_to_title.entity_id');
  $query->fields('fc_to_title', array('entity_id'));
  $or = db_or();
  $or->condition('fc_to_title.field_related_content_title_value', 'Sinua voisi kiinnostaa myös', '=');
  $or->condition('fc_to_title.field_related_content_title_value', 'Du kanske också är intresserad av', '=');
  $or->condition('fc_to_title.field_related_content_title_value', 'You might also be interested in', '=');
  $query->condition($or);
  $query = $query->execute();
  $results = $query->fetchAll();
  foreach ($results as $result) {
    $fc = entity_load('field_collection_item', array($result->entity_id));
    $fc = reset($fc);
    if (is_object($fc)) {
      $fc->field_related_content_visibility = array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => 1,
          ),
        ),
      );
      try {
        $fc->save();
      }
      catch (Exception $e) {
        print $e->getMessage();
        // The field collection item is missing its hostEntity information. Save it standalone.
        $fc->save(TRUE);
      }
    }
  }
}

/**
 * Remove "You might also be interested in" titles from field collections without
 * actual content.
 */
function uhc_subject_update_7003(&$sandbox) {

  // UHC DS brings some new field and generates some issues while in entity
  // load/save, so lets revert the module to let it generate proper tables prior
  // to using Entity API.
  if (module_exists('uhc_ds')) {
    features_revert_module('uhc_ds');
  }

  // Get all field collection entities that does not have links
  $query = db_select('field_data_field_related_content_title', 'rct');
  $query->leftJoin('field_data_field_related_content', 'rc',
    'rc.entity_id = rct.entity_id');
  $query->leftJoin('field_data_field_related_content_section', 'rcs',
    'rcs.field_related_content_section_value = rct.entity_id');
  $query->leftJoin('field_data_field_content_collection', 'cc',
    'cc.field_content_collection_value = rct.entity_id');
  $query->fields('rct', array('entity_id', 'field_related_content_title_value'));
  $query->fields('rc', array('field_related_content_title'));
  $query->fields('rcs', array('entity_id'));
  $query->fields('cc', array('entity_id'));
  $query->isNull('rc.field_related_content_title');
  $query = $query->execute();

  // Clear title of collection items that does not have links
  $results = $query->fetchAll();
  foreach ($results as $result) {
    $entity = entity_load('field_collection_item', array($result->entity_id));
    $entity = reset($entity);
    if (is_object($entity)) {
      $entity->field_related_content_title = array();
      $entity->save();
      watchdog('uhc_subject', 'Removed orphan string from field collection in node @id', array('@id' => $result->rcs_entity_id ?: $result->cc_entity_id), WATCHDOG_INFO);
    }
  }
}

<?php
/**
 * @file
 * Code for the UHC Course feature.
 *
 * @license GPL, or GNU General Public License, version 3
 * @license http://opensource.org/licenses/GPL-3.0
 * @see README.md how to contribute to this project
 */

include_once 'uhc_course.features.inc';

/*
 * Implements template_preprocess_node().
 */
function uhc_course_preprocess_node(&$variables) {
  // Attach "Show past" / "Hide past" JS functionality
  if ($variables['type'] == 'course') {
    drupal_add_js(drupal_get_path('module', 'uhc_course') . '/js/show_past_imps.js', array('scope' => 'footer'));

    // These are added, because for mysterious reason Drupal.t() does not appear
    // to work in unknown conditions. We have tested different scenarios and
    // validated whether issue #2182265 is the case, but so far we think its not
    // related to that. Ticket description has tested scenarios described in the
    // comments. See: https://jira.it.helsinki.fi/browse/DOO-1405
    drupal_add_js(
      array(
        'show_past_imps' => array(
          'show_past_text' => t('Show past'),
          'hide_past_text' => t('Hide past'),
        ),
      ),
      array('type' => 'setting')
    );
  }
}

/**
 * Implements hook_node_update().
 */
function uhc_course_node_update($node) {
  // Process only if we're dealing with type "course" nodes
  if ($node->type != 'course') {
    return NULL;
  }

  $queue = new UHOodiPrioritisedQueue();

  $course_imp_nodes = _uhc_course_node_get_referencing_course_imp_nodes($node);
  foreach ($course_imp_nodes as $course_imp_node) {
    $id = _uhc_sources_resolve_course_imp($course_imp_node->nid);
    if ($id !== FALSE && _uhc_course_node_get_is_in_past_academic_year($course_imp_node) === FALSE) {
      $item = new UHOodiQueueItem(array(
        'action' => 'update',
        'entityType' => 'courseunitrealisation',
        'entityId' => $id,
      ), UHOodiQueue::PRIORITY_MEDIUM);
      $queue->createItem($item->exportToQueueItem());
    }
  }
}

/**
 * Fetches list of course implementation nodes that are referencing to given
 * $node.
 *
 * @param $node
 * @return array
 */
function _uhc_course_node_get_referencing_course_imp_nodes($node) {
  $query = db_select('field_data_field_imp_reference_to_courses', 'irtc')
    ->condition('entity_type', 'node')
    ->condition('bundle', 'course_implementation')
    ->condition('field_imp_reference_to_courses_target_id', $node->nid)
    ->fields('irtc', array('entity_id'))
    ->execute();
  $nids = array();
  while ($value = $query->fetchField()) {
    $nids[] = $value;
  }
  return node_load_multiple($nids);
}

/**
 * Implements hook_ds_fields_info().
 *
 * Introduce fields for bringing course fields to course implementation.
 */
function uhc_course_ds_fields_info($entity_type) {
  if ($entity_type == 'node') {

    $ds_fields['uhc_course_oodi_target_group'] = array(
      'title' => 'Target group',
      'properties' => array(
        'description' => 'target_group',
      ),
    );
    $ds_fields['uhc_course_oodi_previous_studies'] = array(
      'title' => 'Prerequisites',
      'properties' => array(
        'description' => 'previous_studies',
      ),
    );
    $ds_fields['uhc_course_oodi_objective'] = array(
      'title' => 'Learning outcomes',
      'properties' => array(
        'description' => 'objective',
      ),
    );
    $ds_fields['uhc_course_oodi_timing'] = array(
      'title' => 'Timing',
      'properties' => array(
        'description' => 'timing',
      ),
    );
    $ds_fields['uhc_course_oodi_contents'] = array(
      'title' => 'Contents',
      'properties' => array(
        'description' => 'contents',
      ),
    );
    $ds_fields['uhc_course_oodi_completion'] = array(
      'title' => 'Completion',
      'properties' => array(
        'description' => 'completion',
      ),
    );
    $ds_fields['uhc_course_oodi_learning_support'] = array(
      'title' => 'Activities and teaching methods in support of learning',
      'properties' => array(
        'description' => 'learning_support',
      ),
    );
    $ds_fields['uhc_course_oodi_study_materials'] = array(
      'title' => 'Study materials',
      'properties' => array(
        'description' => 'study_materials',
      ),
    );
    $ds_fields['uhc_course_oodi_evaluation'] = array(
      'title' => 'Assessment practices and criteria',
      'properties' => array(
        'description' => 'evaluation',
      ),
    );
    $ds_fields['uhc_course_oodi_optional_studies'] = array(
      'title' => 'Recommended optional studies',
      'properties' => array(
        'description' => 'optional_studies',
      ),
    );
    $ds_fields['uhc_course_oodi_rel_to_study_units'] = array(
      'title' => 'Relation to other study units',
      'properties' => array(
        'description' => 'relations_to_other_study_units',
      ),
    );
    $ds_fields['uhc_course_oodi_other_information'] = array(
      'title' => 'Additional information',
      'properties' => array(
        'description' => 'other_information',
      ),
    );
    $ds_fields['uhc_course_oodi_realisation_and_working_methods'] = array(
      'title' => 'Completion methods',
      'properties' => array(
        'description' => 'realisation_and_working_methods',
      ),
    );

    // All fields has same field_type and ui_limit
    foreach ($ds_fields as $key => $value) {
      $ds_fields[$key]['field_type'] = DS_FIELD_TYPE_FUNCTION;
      $ds_fields[$key]['ui_limit'] = array('course|*');
      $ds_fields[$key]['function'] = 'uhc_course_field_from_oodi';
    }

    return array('node' => $ds_fields);
  }
}

/**
 * DS Field callback for returning given field value from $node`s corresponding
 * Oodi learning opportunity object.
 */
function uhc_course_field_from_oodi($field) {
  // This callback works only with descriptions for now..
  if (empty($field['properties']['description'])) {
    return NULL;
  }

  $field_name = 'field_course_course_number';
  $node = $field['entity'];
  $description_name = $field['properties']['description'];
  $langcode = locale_language_from_interface();

  // In order to request learning opportunity, we need to resolve course number.
  if ($field_value = field_get_items('node', $node, $field_name)) {
    $course_number = !empty($field_value[0]['value']) ? $field_value[0]['value'] : '';

    // Return NULL if no course number found
    if (empty($course_number)) {
      return NULL;
    }

    try {

      // Create connection and setup learning opportunity
      $connection = new UHCOodiConnection(variable_get('uhc_sources_base_url', NULL), array('timeout' => 5));
      $learningopportunity = new UHCOodiLearningOpportunity($connection, new UHCOodiCache());
      $learningopportunity->setConfigDescription(variable_get('uhc_course_source_predefined_description_names', array()));

      // Load learning opportunity by course number and get its multilingual
      // value.
      $translations = $learningopportunity->loadById($course_number)->getDescription($description_name);
      $multilingual_value = new UHCOodiMultilingualValue($translations);

      // Return value of interface language.
      return theme('oodi_field', array('title' => $field['title'], 'value' => $multilingual_value->language($langcode)->getValue()));

    } catch (\Exception $e) {
      watchdog('uhc_course','Failed to fetch field value "@field" for "@id" because "@message"', array('@field' => $description_name, '@id' => $course_number, '@message' => $e->getMessage()), WATCHDOG_ERROR);
    }
  }
  return NULL;
}

/**
 * Implements hook_theme().
 */
function uhc_course_theme($existing, $type, $theme, $path) {
  return array(
    'oodi_field' => array(
      'variables' => array('title' => NULL, 'value' => NULL),
    ),
  );
}

/**
 * Preprocessor callback for oodi field.
 *
 * @param $variables
 */
function template_preprocess_oodi_field(&$variables) {

  // Translate and sanitize title
  if (!empty($variables['title'])) {
    $variables['title'] = check_plain(t($variables['title']));
  }

  // Format value
  $variables['value'] = check_markup($variables['value'], 'filtered_html');

}

/**
 * Default theme callback for oodi fields.
 *
 * @param $variables
 *
 * @return string
 */
function theme_oodi_field($variables) {
  if (empty($variables['value'])) {
    return NULL;
  }
  return '<div class="tube"><h3>' . $variables['title'] . '</h3><div class="oodi-field textarea">' . $variables['value'] . '</div></div>';
}

/**
 * Helper function for determining if given $node is a course implementation
 * that is held in past academic years.
 *
 * @param $node
 * @return null|bool
 *   TRUE if can be determined and is held in past academic year. FALSE if can
 *   be determined and is held in current or future academic years. NULL if
 *   can't be determined from given $node.
 */
function _uhc_course_node_get_is_in_past_academic_year($node) {
  // Get academic year end date
  $date = _uhc_course_implementation_get_academic_year_end_date($node);
  if (is_null($date)) {
    return NULL;
  }
  return $date < new DateTime();
}

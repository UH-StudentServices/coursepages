<?php
/**
 * @file Takes care of installation/update/uninstallation operations.
 *
 * @license GPL, or GNU General Public License, version 3
 * @license http://opensource.org/licenses/GPL-3.0
 * @see README.md how to contribute to this project
 */

/**
 * Helper function for creating default images.
 *
 * @return mixed
 *   Returns the managed file object or NULL if failed.
 */
function _uhc_course_implementation_create_default_image($config) {
  // Set the image source path.
  $source_path = drupal_get_path('module', 'uhc_course_implementation') . '/default_image/';
  // Set the image destination path and prepare it.
  $destination_path = 'public://images/default_images/';
  file_prepare_directory($destination_path, FILE_CREATE_DIRECTORY);

  $filename = $config['filename'];
  $file_source = $source_path . $filename;

  $f = (object) array(
    'uri' => $file_source,
    'filemime' => file_get_mimetype($file_source),
    'status' => FILE_STATUS_PERMANENT,
    'title' => $config['title'],
  );
  $managed_file = file_copy($f, $destination_path . $filename, FILE_EXISTS_RENAME);
  if ($managed_file) {
    // Add lock on file.
    if (module_exists('file_lock') && function_exists('file_lock_act_on')) {
      file_lock_act_on($managed_file, 'all');
    }
    variable_set($config['variable'], $managed_file->fid);

    // Mark this file to be used, so it wont get deleted
    file_usage_add($managed_file, 'uhc_course_implementation', 'module', 1);

    return $managed_file;
  }

  return NULL;
}

/**
 * Add default values to course feedback text fields
 */
function uhc_course_implementation_update_7001(&$sandbox) {
  // Revert our feature, just to make sure we have our field
  features_revert_module('uhc_course_implementation');
  features_revert_module('uhc_field_base');

  // Query all nids of type 'course implementation' from node table.
  $query = db_select('node', 'n')
      ->fields('n', array('nid', 'type'))
      ->condition('n.type', 'course_implementation')
      ->execute();

  // Setup insert queries and start looping select query results
  $insert_data_query = db_insert('field_data_field_feedback_text');
  $insert_revision_query = db_insert('field_revision_field_feedback_text');
  while ($nid = $query->fetchField()) {

    // Setup fields and values for insert queries
    $values = array(
      'entity_type' => 'node',
      'bundle' => 'course_implementation',
      'deleted' => 0,
      'entity_id' => $nid,
      'revision_id' => $nid,
      'language' => LANGUAGE_NONE,
      'delta' => 0,
      'field_feedback_text_value' => 'By giving feedback you will help improving the quality of teaching',
      'field_feedback_text_format' => NULL,
    );

    // Now append the fields/values for both insert queries
    $insert_data_query->fields(array_keys($values));
    $insert_data_query->values(array_values($values));
    $insert_revision_query->fields(array_keys($values));
    $insert_revision_query->values(array_values($values));

  }

  // Now execute the queries.
  $insert_data_query->execute();
  $insert_revision_query->execute();

}

/**
 * Migrate field_imp_organisation_codes values to field_imp_organisation values.
 */
function uhc_course_implementation_update_7002(&$sandbox) {

  // Ensure that we have fields in place by reverting field base feature
  features_revert_module('uhc_field_base');
  features_revert(array('uhc_course_implementation' => array('field_instance')));

  // Process import, so that we ensure having organisations for field  values
  // we're about to mirate below
  $migration =  Migration::getInstance('OrganisationsUniversityHelsinkiTaxonomy');
  $migration->processImport();

  // Ensure that we have completely empty field data table in case of previous
  // run interruptions or something.
  db_truncate('field_data_field_imp_organisation')->execute();
  db_truncate('field_revision_field_imp_organisation')->execute();
  field_cache_clear();

  // Find out the taxonomy term IDs of existing organisation unit values and
  // assign them as key of $organisation_field_migrate
  $query = db_select('field_data_field_imp_organisation_codes', 'oc');
  $query->condition('entity_type', 'node')
    ->condition('bundle', 'course_implementation');
  $deprecated_organisation = $query->fields('oc', array('entity_id', 'field_imp_organisation_codes_value'))->execute();
  $organisation_codes_by_nid = array();
  while($organisation_code = $deprecated_organisation->fetchAssoc()) {
    $organisation_codes_by_nid[$organisation_code['entity_id']][] = $organisation_code['field_imp_organisation_codes_value'];
  }

  // Insert values manually, as Entity API consumes too much memory here
  foreach ($organisation_codes_by_nid as $nid => $organisation_codes) {

    // Now prepare query inserts
    $fields = array(
      'entity_type' => 'node',
      'bundle' => 'course_implementation',
      'deleted' => 0,
      'entity_id' => $nid,
      'revision_id' => $nid,
      'language' => LANGUAGE_NONE,
      'delta' => 0,
      'field_imp_organisation_tid' => 0,
    );
    $insert_data_query = db_insert('field_data_field_imp_organisation');
    $insert_revision_query = db_insert('field_revision_field_imp_organisation');
    $insert_data_query->fields(array_keys($fields));
    $insert_revision_query->fields(array_keys($fields));

    // Each organisation code has corresponding taxonomy term. Let's resolve it
    // and then insert to query.
    foreach ($organisation_codes as $delta => $organisation_code) {
      // Now find the new vocabulary's terms by the organisation code and resolve
      // its term ID.
      $efq_query = new EntityFieldQuery();
      $efq_query->entityCondition('entity_type', 'taxonomy_term')
        ->entityCondition('bundle', 'organisations_of_university_of_helsinki');
      $efq_query->fieldCondition('field_ouh_code', 'value', $organisation_code);
      $organisation = $efq_query->execute();
      if (!isset($organisation['taxonomy_term'])) {
        watchdog('uhc_course_implementation', 'Could not resolve taxonomy term for code "@code"', array('@code' => $organisation_code), WATCHDOG_WARNING);
        continue;
      }

      // Set values and insert & execute
      $fields['delta'] = $delta;
      $fields['field_imp_organisation_tid'] = reset(array_keys($organisation['taxonomy_term']));
      $insert_data_query->values(array_values($fields))->execute();
      $insert_revision_query->values(array_values($fields))->execute();

    }
  }
  field_cache_clear();

  // Remove deprecated field
  field_delete_field('field_imp_organisation_codes');
}

/**
 * Remove feedback_text field
 */
function uhc_course_implementation_update_7003(&$sandbox) {
  $instance = field_info_instance('node', 'field_feedback_text', 'course_implementation');
  field_delete_instance($instance);
}

/**
 * Remove promotion header default images and default attribution text.
 */
function uhc_course_implementation_update_7004() {

  // Load default image and mark is as deleted
  $vars = array('uhc_course_implementation_default_image', 'uhc_course_implementation_default_image_open_uni');
  foreach ($vars as $variable) {
    // If variable contains and file ID
    if ($fid = variable_get($variable, 0)) {
      // Remove file
      $file = file_load($fid);
      file_delete($file);
    }
    // Remove whole variable
    variable_del($variable);
  }

  // Remove default attribution texts
  $value = 'Social Network Analysis Visualization by MartinGrandjean CC BY-SA 3.0';
  db_delete('field_data_field_imp_header_image_caption')->condition('field_imp_header_image_caption_value', $value)->execute();
  db_delete('field_revision_field_imp_header_image_caption')->condition('field_imp_header_image_caption_value', $value)->execute();
}

/**
 * Migrate field_imp_status => field_cancelled
 */
function uhc_course_implementation_update_7005() {

  // Revert these features to ensure that we have destination fields set up
  features_revert(array('uhc_field_base' => array('field_base')));
  features_revert(array('uhc_course_implementation' => array('field_instance')));

  // Prepare insert queries
  $fields = array(
    'entity_type' => 'node',
    'bundle' => 'course_implementation',
    'deleted' => 0,
    'entity_id' => 0,
    'revision_id' => 0,
    'language' => LANGUAGE_NONE,
    'delta' => 0,
    'field_cancelled_value' => 0,
  );
  $insert_data_query = db_insert('field_data_field_cancelled')->fields(array_keys($fields));
  $insert_revision_query = db_insert('field_revision_field_cancelled')->fields(array_keys($fields));

  // Fetch statuses and set cancelled values
  $query = db_select('field_data_field_imp_status', 's')
    ->fields('s', array('entity_id', 'field_imp_status_value'))
    ->condition('entity_type', $fields['entity_type'])
    ->condition('bundle', $fields['bundle'])
    ->execute();
  while ($item = $query->fetchAssoc()) {

    // Specify entity_id
    $fields['entity_id'] = $item['entity_id'];
    $fields['revision_id'] = $item['entity_id'];

    // Specify cancelled. When status was "3", it was cancelled
    $fields['field_cancelled_value'] = 0;
    if ($item['field_imp_status_value'] == 3) {
      $fields['field_cancelled_value'] = 1;
    }

    // Add values to inert queries
    $insert_data_query->values(array_values($fields));
    $insert_revision_query->values(array_values($fields));
  }

  $counts = array('@data_count' => 0, '@revision_count' => 0);
  $counts['@data_count'] = $insert_data_query->execute();
  $counts['@revision_count'] = $insert_revision_query->execute();
  if ($counts['@data_count'] != $counts['@revision_count']) {
    // We expect to have same count. Create log entry if they were not!
    watchdog('uhc_course_implementation', 'Count mismatch on cancelled migration (@data_count vs @revision_count).', $counts, WATCHDOG_WARNING);
  }
  else {
    watchdog('uhc_course_implementation', 'Migrated @data_count values.', $counts, WATCHDOG_INFO);
  }

  // Delete field_imp_status
  field_delete_field('field_imp_status');
}

/**
 * Unpublish course implementation nodes that are defined as studygroupsets in
 * Oodi (using a predefined list of IDs).
 */
function uhc_course_implementation_update_7006() {
  $course_implementation_ids = array(
    '107524085', '107637889', '107646678', '107648203', '110501208',
    '110575664', '108310925', '108287301', '110091589', '110575738',
    '108620672', '109325810', '108609659', '108166184', '108614245',
    '108609145', '108903829', '110588312', '110797033', '110797268',
    '108603902', '108603911', '110803991', '110590931', '110590991',
    '110805427', '110805328', '110805460', '108010227', '108075145',
    '111415456', '111727138', '111728585', '108076108', '108076091',
    '108076120', '108076157', '111412664', '111416606', '111440016',
    '111430913', '111687283', '108587261', '108289732', '111936029',
    '108165875', '108581550', '107554110', '107556095', '111000863',
    '108121277', '108374760', '108712586', '108792476', '108604183',
    '108599828', '112204600', '108580824', '108146322', '108581413'
  );

  $query = db_select('field_data_field_imp_id', 'i');
  $query->fields('i', array('entity_id'));
  $query->join('node', 'n', 'i.entity_id = n.nid');
  $query->condition('n.type', 'course_implementation');
  $query->condition('n.status', 1);
  $query->condition('i.field_imp_id_value', $course_implementation_ids, 'IN');
  $results = $query->execute();

  $node_ids = array();

  while ($result = $results->fetchAssoc()) {
    $node_ids[] = $result['entity_id'];
  }

  $nodes = array();

  if (!empty($node_ids)) {
    $nodes = node_load_multiple($node_ids);
  }

  foreach ($nodes as $node) {
    $node->status = 0;
    node_save($node);
    watchdog('uhc_course_implementation', "Unpublished node $node->nid.");
  }
}

/**
 * Truncate field_data_field_imp_locality and field_revision_field_imp_locality.
 */
function uhc_course_implementation_update_7007() {
  db_truncate('field_data_field_imp_locality')->execute();
  db_truncate('field_revision_field_imp_locality')->execute();
  field_cache_clear();
}

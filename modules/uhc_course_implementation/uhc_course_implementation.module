<?php
/**
 * @file
 * Code for the UHC Course implementation feature.
 *
 * @license GPL, or GNU General Public License, version 3
 * @license http://opensource.org/licenses/GPL-3.0
 * @see README.md how to contribute to this project
 */

include_once 'uhc_course_implementation.features.inc';

/**
 * Implements hook_field_widget_form_alter().
 * Change labels of inline entity form when dealing with materials.
 */
function uhc_course_implementation_field_widget_form_alter(&$element, &$form_state, $context) {
  // Change field widget to "Add material" or "Add task"
  if (isset($element['#field_name'])) {
    if ($element['#field_name'] == 'field_event_ref_to_material' ||
        $element['#field_name'] == 'field_section_material') {
      if (isset($element['actions']['ief_add']['#value'])) {
        $element['actions']['ief_add']['#value'] = $label = t('Add material');
      }
    }
    elseif ($element['#field_name'] == 'field_reference_to_course_tasks') {
      if (isset($element['actions']['ief_add']['#value'])) {
        $element['actions']['ief_add']['#value'] = $label = t('Add task');
      }
    }
    if ($element['#field_name'] == 'field_imp_reference_to_events') {
      // We want actions & ief forms before the event list
      $element['actions']['#weight'] = 0;
      if (isset($element['form'])) {
        $element['form']['#weight'] = 0;
      }
    }
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 * Change labels of inline entity form when dealing with materials.
 */
function uhc_course_implementation_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ($entity_form['#bundle'] == 'course_material') {
    $label = t('Add material');
    $entity_form['#title'] = $label;
    $entity_form['actions']['ief_add_save']['#value'] = $label;
  }
  elseif ($entity_form['#bundle'] == 'course_task') {
    $label = t('Add task');
    $entity_form['#title'] = $label;
    $entity_form['actions']['ief_add_save']['#value'] = $label;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * DOO-1530: Organisation default header image and caption must be both provided
 * together.
 */
function uhc_course_implementation_form_taxonomy_form_term_alter(&$form, &$form_state) {
  // Add additional validation callback when rendering taxonomy form term on
  // organisations.
  if (isset($form['#bundle']) && $form['#bundle'] == 'organisations_of_university_of_helsinki') {
    $form['#validate'][] = 'uhc_course_implementation_default_header_validate';
  }
}

/**
 * DOO-1530: Validation callback for ensuring that default header image and
 * caption must are both provided together.
 */
function uhc_course_implementation_default_header_validate(&$form, &$form_state) {
  if (isset($form_state['values']['field_default_header_image'][LANGUAGE_NONE][0]['fid']) &&
    isset($form_state['values']['field_default_header_image_capti'][LANGUAGE_NONE][0]['value'])) {
    $image = $form_state['values']['field_default_header_image'][LANGUAGE_NONE][0]['fid'];
    $caption = $form_state['values']['field_default_header_image_capti'][LANGUAGE_NONE][0]['value'];
    if ($image && !$caption) {
      form_set_error('field_default_header_image_capti', t('If you provide an default header image, you need to provide an caption for it too.'));
    }
    if (!$image && $caption) {
      form_set_error('field_default_header_image_capti', t('If you provide an default header image caption, you need to provide an image for it too.'));
    }
  }
}

function uhc_course_implementation_get_teacher_numbers($node) {
  $teacher_numbers = array();

  if ($node->type == 'course_implementation' && !empty($node->field_imp_teacher_number[LANGUAGE_NONE][0]['value'])) {
    $teacher_numbers = explode(',', $node->field_imp_teacher_number[LANGUAGE_NONE][0]['value']);

    foreach ($teacher_numbers as $key => $teacher_number) {
      $teacher_numbers[$key] = trim($teacher_number);
    }
  }

  return $teacher_numbers;
}

function uhc_course_implementation_get_course_administrator_numbers($node) {
  $course_administrator_numbers = array();

  if ($node->type == 'course_implementation' && !empty($node->field_imp_administrator_number[LANGUAGE_NONE][0]['value'])) {
    $course_administrator_numbers = explode(',', $node->field_imp_administrator_number[LANGUAGE_NONE][0]['value']);

    foreach ($course_administrator_numbers as $key => $course_administrator_number) {
      $course_administrator_numbers[$key] = trim($course_administrator_number);
    }
  }

  return $course_administrator_numbers;
}

/**
 * Implements hook_field_group_build_pre_render_alter().
 *
 * Lets add some help texts to our accordion items
 */
function uhc_course_implementation_field_group_build_pre_render_alter(&$element) {
  if (isset($element['group_timetable']['#prefix'])) {
    $element['group_timetable']['#prefix'] .= '<p class="bar bar--small">' . t('Here is the courseâ€™s teaching schedule. Check the course overview for possible other schedules.') . '</p>';
  }
  if (isset($element['group_course_task_material']['#prefix'])) {
    $element['group_course_task_material']['#prefix'] .= '<p class="bar bar--small">' . t('In this section you can find the course tasks.') . '</p>';
  }
}

/**
 * Implements hook_entity_load().
 *
 * Problem:
 *   Default image of course implementation header depends on organisation it
 *   belongs to.
 *
 * Solution(tm) by Mario Vercelotti:
 *   When loading course implementations which does not have header image set at
 *   all, first try to fetch an image and caption from related organisation
 *   term recursively.
 *
 * @see uhc_course_implementation_entity_presave().
 */
function uhc_course_implementation_entity_load($entities, $type) {
  // Loop each loadable entity if it is an node
  if ($type == 'node') {
    foreach ($entities as $entity) {
      // When node is type of "course_implementation"
      if ($entity->type == 'course_implementation') {

        // When given entity has no header image but has reference to an
        // organisation term reference.
        $field_imp_header_image = field_get_items('node', $entity, 'field_imp_header_image');
        if (empty($field_imp_header_image) && !empty($entity->field_imp_organisation[LANGUAGE_NONE][0]['tid'])) {

          // Load organisation term and caption
          $term_image_and_caption = uhc_course_implementation_get_default_header_image($entity->field_imp_organisation[LANGUAGE_NONE][0]['tid']);
          if(!empty($term_image_and_caption['fid'])) {

            // If image and caption has been found, then load the file entity
            // and use that object to set it has header image.
            // TODO: What if we have fid but no caption?
            $entity->field_imp_header_image_caption = $term_image_and_caption['caption'];
            $file = file_load($term_image_and_caption['fid']);
            $entity->field_imp_header_image = array(
              LANGUAGE_NONE => array(array('fid' => $term_image_and_caption['fid']) + (array) $file),
            );

            // See uhc_course_implementation_entity_presave(), this is for
            // telling to form editing process that it should not save this
            // file.
            $entity->has_default_image = TRUE;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function uhc_course_implementation_entity_presave($entity, $type) {
  // If we've set a default image, remove it before saving, so we don't
  // accidentally save the default image as actual image of the field.
  if ($type == 'node' && isset($entity->has_default_image) && isset($entity->field_imp_header_image)) {

    // Get entity's image fid and default organisation image
    $image_fid = empty($entity->field_imp_header_image[LANGUAGE_NONE][0]['fid']) ? NULL : $entity->field_imp_header_image[LANGUAGE_NONE][0]['fid'];
    $term_image_and_caption = uhc_course_implementation_get_default_header_image($entity->field_imp_organisation[LANGUAGE_NONE][0]['tid']);

    // Clear header image field adn caption, when it has been removed or it's
    // the same as organisation default image.
    if($image_fid == NULL || (!empty($term_image_and_caption['fid']) && $image_fid == $term_image_and_caption['fid'])) {
      $entity->field_imp_header_image = array();
      $entity->field_imp_header_image_caption = array();
    }
  }
}

/**
 * Helper function for fetching default course image by organisation term. If
 * organisation term does not have an image, it will check from the parent
 * recursively till the root term.
 *
 * When default image has been found, it will return its fid and caption as an
 * array. If no default course image can't be found, then function will return
 * an empty array.
 *
 * @param $tid
 * @return array
 */
function uhc_course_implementation_get_default_header_image($tid) {
  $return = &drupal_static(__FUNCTION__ . $tid, array());

  // Loop until we can't load the term or we're not in root
  while (empty($return)) {

    // Ensure that we can load the term
    $term = taxonomy_term_load($tid);
    if (!$term) {
      // Break the loop if given term couldn't be loaded.
      break;
    }

    // Look out for default header image and caption
    $field_default_header_image = field_get_items('taxonomy_term', $term, 'field_default_header_image');
    $field_default_header_image_caption = field_get_items('taxonomy_term', $term, 'field_default_header_image_capti');
    if (!empty($field_default_header_image[0]['fid']) && !empty($field_default_header_image_caption[0]['value'])) {
      $return = array('fid' => $field_default_header_image[0]['fid'], 'caption' => array(LANGUAGE_NONE => $field_default_header_image_caption));
      break;
    }

    // Look if this term has parents and set new tid for next round.
    $parents = taxonomy_get_parents($tid);
    $parent = reset($parents);
    if (empty($parent)) {
      // Break the loop if we can't find parents anymore.
      break;
    }
    $tid = $parent->tid;
  }


  return $return;
}

/**
 * Determines whether given $node has private content associated.
 *
 * @param $node object
 *   Course implementation node.
 * @return bool
 *   TRUE if the course has private content, otherwise FALSE.
 *
 * @see uhc_course_implementation_node_view()
 * @see uhc_course_implementation_has_private_messages()
 */
function uhc_course_implementation_has_private_content($node) {
  $moodle_key = uhc_teacher_tools_get_moodle_key($node);

  return !empty($moodle_key)
    || uhc_course_implementation_has_private_messages($node)
    || uhc_course_implementation_has_private_material($node);
}

/**
 * Determines whether given $node has private messages.
 *
 * @param $node object
 *   Course implementation node.
 * @return bool
 *   TRUE if the course has private messages, otherwise FALSE.
 *
 * @see uhc_course_implementation_has_private_content()
 */
function uhc_course_implementation_has_private_messages($node) {
  $has_private_messages = FALSE;

  if ($node->type == 'course_implementation') {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'comment');
    $query->propertyCondition('nid', $node->nid);
    $query->fieldCondition('field_private', 'value', 1);
    $result = $query->execute();

    $has_private_messages = !empty($result['comment']);
  }

  return $has_private_messages;
}

/**
 * Determines whether given $node has private material.
 *
 * @param $node object
 *   Course implementation node.
 * @return bool
 *   TRUE if the course has private material, otherwise FALSE.
 *
 * @see uhc_course_implementation_has_private_content() and uhc_course_collaboration_private_is_private_course_material().
 */
function uhc_course_implementation_has_private_material($node) {
  $has_private_material = FALSE;

  if ($node->type == 'course_implementation' && !empty($node->field_section_material[LANGUAGE_NONE])) {
    foreach ($node->field_section_material[LANGUAGE_NONE] as $material) {
      // Load node to ensure it exists before checking whether its private
      // material or not.
      $material_node = node_load($material['target_id']);
      if ($material_node && uhc_course_collaboration_private_is_private_course_material($material_node)) {
        $has_private_material = TRUE;
        break;
      }
    }
  }

  return $has_private_material;
}

/**
 * Determines whether given $node has material.
 *
 * @param $node object
 *   Course implementation node.
 * @return bool
 *   TRUE if the course has material, otherwise FALSE.
 */
function uhc_course_implementation_has_material($node) {
  return $node->type == 'course_implementation' && !empty($node->field_section_material[LANGUAGE_NONE]);
}

/**
 * Implements hook_node_view().
 */
function uhc_course_implementation_node_view($node) {
  if (arg(0) == 'node' &&
      arg(1) == $node->nid &&
    $node->type == 'course_implementation') {
    uhc_course_implementation_display_private_content_message($node);
    uhc_course_implementation_display_view_in_teaching_language_message($node);
    uhc_course_implementation_display_course_implementation_status_message($node);
  }
}

/**
 * Implements hook_preprocess_node().
 */
function uhc_course_implementation_preprocess_node(&$vars) {
  $node = $vars['node'];

  if ($node->type == 'course_implementation') {
    uhc_course_implementation_process_sign_up_button_url($vars, $node);

    // add class so we can theme exams
    if (in_array($node->field_imp_method_of_study[LANGUAGE_NONE][0]['tid'], variable_get('uhc_migrate_methods_of_study_marked_as_exam'))) {
      $vars['classes_array'][] = 'exam';
    }
  }
}

/**
 * Display a message if the current language is not one of the teaching
 * languages.
 *
 * @param $node object Course implementation node.
 */
function uhc_course_implementation_display_view_in_teaching_language_message($node) {
  global $language;
  $teaching_languages = field_get_items('node', $node, 'field_imp_teaching_language');

  if (!empty($teaching_languages)) {
    $teaching_language_codes = array();

    foreach ($teaching_languages as $teaching_language) {
      $teaching_language_codes[] = $teaching_language['value'];
    }

    if (!in_array($language->language, $teaching_language_codes)) {
      uh_coursepages_set_message(t('Please read this page in teaching language'), 'status', FALSE);
    }
  }
}

/**
 * Display private content message when the course has private content and the
 * current user is not signed up for the course.
 *
 * @see uhc_course_implementation_has_private_content()
 * @param $node object Node object.
 */
function uhc_course_implementation_display_private_content_message($node) {
  $display_private_content_message = $node->type == 'course_implementation'
    && arg(0) == 'node'
    && arg(1) == $node->nid
    && !uhc_course_collaboration_is_current_user_course_student()
    && !uhc_course_collaboration_is_current_user_course_teacher()
    && !uhc_course_collaboration_is_current_user_course_administrator()
    && uhc_course_implementation_has_private_content($node);

  $private_content_message = t('You need to log in and sign up for the course to view some of the content on this page.');

  if ($display_private_content_message) {
    uh_coursepages_set_message($private_content_message, 'warning');
  }
  else {
    drupal_add_js(
      array(
        'uhc_course_implementation' => array(
          'private_content_message' => $private_content_message,
        ),
      ),
      'setting'
    );
    drupal_add_js(drupal_get_path("module", "uhc_course_implementation") . "/js/uhc_course_implementation_hide_private_message.js");
  }
}

/**
 * Display a message if the course implementation has been canceled.
 *
 * @param $node object Course implementation node.
 */
function uhc_course_implementation_display_course_implementation_status_message($node) {
  $course_implementation_status = field_get_items('node', $node, 'field_imp_status');
  $canceled_status = 3;
  $canceled = !empty($course_implementation_status[0]['value']) && $course_implementation_status[0]['value'] == $canceled_status;

  if ($canceled) {
    uh_coursepages_set_message(t('Cancelled'), 'error', FALSE);
  }
}

/**
 * Helper function for hiding button url from node template from preprocessing
 * variables.
 *
 * @param $vars array Variables.
 * @param $node object Course implementation node.
 */
function uhc_course_implementation_process_sign_up_button_url(&$vars, $node) {
  if ($node->type == 'course_implementation') {
    $hide_sign_up_button = uhc_course_collaboration_is_current_user_course_student()
                        || uhc_course_collaboration_is_current_user_course_teacher()
                        || uhc_course_collaboration_is_current_user_course_administrator()
                        || (uhc_sources_is_from_organisation($node, 'H930') === TRUE
                           && !uhc_course_implementation_is_organised_by_open_uni($node))
                        || uhc_course_implementation_signup_hidden($node);

    if ($hide_sign_up_button) {
      if (isset($vars['content']['field_imp_canonical_url']['#access'])) {
        $vars['content']['field_imp_canonical_url']['#access'] = FALSE;

      }
    }
    elseif (uhc_sources_is_from_organisation($node, 'H930') === TRUE) {
      $id = field_get_items('node', $node, 'field_imp_id')[0]['value'];
      $url = 'https://www.avoin.helsinki.fi/palvelut/esittely.aspx?o=' . $id;
      global $language;
      if ($language->language != 'fi') {
        $url .= '&lang=' . $language->language;
      }
      $vars['content']['field_imp_canonical_url'][0]['#element']['url'] = $url;
    }
  }
}

function uhc_course_implementation_is_organised_by_open_uni($node) {
  $org = field_get_items('node', $node, 'field_imp_course_organiser')[0]['value'];
  return $org == 'Open university' || $org == 'Avoin yliopisto' || $org == 'Ã–ppna universitet';
}

function uhc_course_implementation_signup_hidden($node) {
  return field_get_items('node', $node, 'field_imp_hide_sign_up_button')[0]['value'];
}

/**
 * Loads a course implementation node by course implementation ID.
 *
 * @param $course_implementation_id int Course implementation ID.
 * @return bool|mixed|null Course implementation node (if found), NULL (if not
 * found) or FALSE (if node loading fails).
 */
function uhc_course_implementation_load_by_id($course_implementation_id) {
  $course_implementation_node = NULL;

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'course_implementation')
    ->fieldCondition('field_imp_id', 'value', $course_implementation_id);

  $result = $query->execute();

  if (!empty($result['node'])) {
    $node = array_pop($result['node']);
    $course_implementation_node = node_load($node->nid);
  }

  return $course_implementation_node;
}

/**
 * Implements hook_field_access(). Limits Moodle key visibility.
 */
function uhc_course_implementation_field_access($op, $field, $entity_type, $entity, $account) {
  if ($field['field_name'] == 'field_moodle_key') {
    return uhc_course_collaboration_private_current_user_has_access_to_private_content();
  }
}

/**
 * Implements hook_field_formatter_info().
 *
 * Field formatter for course implementation status.
 */
function uhc_course_implementation_field_formatter_info() {
  return array(
    'course_implementation_status' => array(
      'label' => t('Course implementation status'),
      'field types' => array('number_integer'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * Formats course implementation status value (integer) as translated status
 * text.
 */
function uhc_course_implementation_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if ($display['type'] == 'course_implementation_status') {
    $labels = array(1 => 'Planned', 2 => 'Confirmed', 3 => 'Cancelled', 4 => 'Completed');

    foreach ($items as $delta => $item) {
      $value = $item['value'];
      $value = in_array($value, array_keys($labels)) ? t($labels[$value]) : $value;
      $element[$delta] = array('#markup' => $value);
    }
  }

  return $element;
}

<?php
/**
 * @file
 * Code for the UHC Course implementation feature.
 *
 * @license GPL, or GNU General Public License, version 3
 * @license http://opensource.org/licenses/GPL-3.0
 * @see README.md how to contribute to this project
 */

include_once 'uhc_course_implementation.features.inc';

/**
 * Implements hook_field_widget_form_alter().
 * Change labels of inline entity form when dealing with materials.
 */
function uhc_course_implementation_field_widget_form_alter(&$element, &$form_state, $context) {
  // Change field widget to "Add material" or "Add task"
  if (isset($element['#field_name'])) {
    if ($element['#field_name'] == 'field_event_ref_to_material' ||
        $element['#field_name'] == 'field_section_material') {
      if (isset($element['actions']['ief_add']['#value'])) {
        $element['actions']['ief_add']['#value'] = $label = t('Add material');
      }
    }
    elseif ($element['#field_name'] == 'field_reference_to_course_tasks') {
      if (isset($element['actions']['ief_add']['#value'])) {
        $element['actions']['ief_add']['#value'] = $label = t('Add task');
      }
    }
    if ($element['#field_name'] == 'field_imp_reference_to_events') {
      // We want actions & ief forms before the event list
      $element['actions']['#weight'] = 0;
      if (isset($element['form'])) {
        $element['form']['#weight'] = 0;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 * Gets rid of the unwanted "The link title is limited to X characters maximum" text.
 */
function uhc_course_implementation_preprocess_link_field(&$link) {
  if (!empty($link['element']['#field_name']) &&
  $link['element']['#field_name'] == 'field_imp_interaction_link') {
    $link['element']['title']['#title'] = t('Name');
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 * Change labels of inline entity form when dealing with materials.
 */
function uhc_course_implementation_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ($entity_form['#bundle'] == 'course_material') {
    $label = t('Add material');
    $entity_form['#title'] = $label;
    $entity_form['actions']['ief_add_save']['#value'] = $label;
    $entity_form['actions']['ief_edit_save']['#value'] = isset($entity_form['actions']['ief_edit_save']) ? t('Save') : NULL;
  }
  elseif ($entity_form['#bundle'] == 'course_task') {
    $label = t('Add task');
    $entity_form['#title'] = $label;
    $entity_form['actions']['ief_add_save']['#value'] = $label;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * DOO-1530: Organisation default header image and caption must be both provided
 * together.
 */
function uhc_course_implementation_form_taxonomy_form_term_alter(&$form, &$form_state) {
  // Add additional validation callback when rendering taxonomy form term on
  // organisations.
  if (isset($form['#bundle']) && $form['#bundle'] == 'organisations_of_university_of_helsinki') {
    $form['#validate'][] = 'uhc_course_implementation_default_header_validate';
  }
}

/**
 * DOO-1530: Validation callback for ensuring that default header image and
 * caption must are both provided together.
 */
function uhc_course_implementation_default_header_validate(&$form, &$form_state) {
  if (isset($form_state['values']['field_default_header_image'][LANGUAGE_NONE][0]['fid']) &&
    isset($form_state['values']['field_default_header_image_capti'][LANGUAGE_NONE][0]['value'])) {
    $image = $form_state['values']['field_default_header_image'][LANGUAGE_NONE][0]['fid'];
    $caption = $form_state['values']['field_default_header_image_capti'][LANGUAGE_NONE][0]['value'];
    if ($image && !$caption) {
      form_set_error('field_default_header_image_capti', t('If you provide an default header image, you need to provide an caption for it too.'));
    }
    if (!$image && $caption) {
      form_set_error('field_default_header_image_capti', t('If you provide an default header image caption, you need to provide an image for it too.'));
    }
  }
}

function uhc_course_implementation_get_teacher_numbers($node) {
  $teacher_numbers = array();

  if ($node->type == 'course_implementation' && !empty($node->field_imp_teacher_number[LANGUAGE_NONE][0]['value'])) {
    $teacher_numbers = explode(',', $node->field_imp_teacher_number[LANGUAGE_NONE][0]['value']);

    foreach ($teacher_numbers as $key => $teacher_number) {
      $teacher_numbers[$key] = trim($teacher_number);
    }
  }

  return $teacher_numbers;
}

function uhc_course_implementation_get_course_administrator_numbers($node) {
  $course_administrator_numbers = array();

  if ($node->type == 'course_implementation' && !empty($node->field_imp_administrator_number[LANGUAGE_NONE][0]['value'])) {
    $course_administrator_numbers = explode(',', $node->field_imp_administrator_number[LANGUAGE_NONE][0]['value']);

    foreach ($course_administrator_numbers as $key => $course_administrator_number) {
      $course_administrator_numbers[$key] = trim($course_administrator_number);
    }
  }

  return $course_administrator_numbers;
}

/**
 * Implements hook_field_group_build_pre_render_alter().
 *
 * Lets add some help texts to our accordion items.
 *
 * @see uhc_course_implementation_is_group_empty()
 */
function uhc_course_implementation_field_group_build_pre_render_alter(&$element) {

  // When rendering description objectives...
  $node_view = arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == NULL;
  $node = node_load(arg(1));
  if (isset($element['group_description_objectives']['#prefix']) && $node_view && node_access('update', $node)) {
    _uhc_course_implementation_handle_objectives_accordion_processing($element);
  }

}

/**
 * Helper function that adapts some logic parts from flowchart, see URL.
 * @see https://wiki.helsinki.fi/pages/viewpage.action?pageId=202022322
 * @param $element
 */
function _uhc_course_implementation_handle_timetable_accordion_processing(&$element) {
  if (_uhc_course_implementation_viewing_electronic_exam_room()) {
    _uhc_course_implementation_hide_timetable_accordion_from_oodi($element);
  }
}

/**
 * Helper function for determining is user viewing electornic exam roomÂ´ course
 * implementation $node.
 *
 * @return bool
 */
function _uhc_course_implementation_viewing_electronic_exam_room() {
  $uhc_course_implementation_eletronic_exam_room_tid = variable_get('uhc_course_implementation_eletronic_exam_room_tid', 0);
  return _uhc_course_implementation_has_method_of_study(array($uhc_course_implementation_eletronic_exam_room_tid));
}

/**
 * Heper function for determining whether given $node has given one (or more)
 * method of studies linked.
 * @param array $tids
 *   List of term IDs that will be compared against method of study reference
 *   field.
 * @param null $node
 *   Optional. Active node page will be used if ommitted.
 * @return bool
 */
function _uhc_course_implementation_has_method_of_study(array $tids, $node = NULL) {
  $node_view = arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == NULL;
  if (is_null($node) && $node_view) {
    $node = node_load(arg(1));
  }
  if ($node && $node_view) {
    $field_imp_method_of_study = field_get_items('node', $node, 'field_imp_method_of_study');
    if (!empty($field_imp_method_of_study)) {
      foreach ($field_imp_method_of_study as $value) {
        if (in_array($value['tid'], $tids)) {
          return TRUE;
        }
      }
    }
  }
  return FALSE;
}

/**
 * Helper function for hiding timetable from Oodi.
 * @param $element
 */
function _uhc_course_implementation_hide_timetable_accordion_from_oodi(&$element) {
  $element['group_timetable']['uhc_event_teaching_schedule'] = NULL;
}

/**
 * Helper function that renders help texts and legends for fields.
 * @param $element
 */
function _uhc_course_implementation_handle_objectives_accordion_processing(&$element) {
  $messages = array(
    'attributes' => array(
      'class' => 'messages status alternative accordion-content-item',
    ),
    'items' => array(
      t('Course overview information comes from Oodi.'),
    ),
  );

  $source_legend = array(
    'attributes' => array(
      'class' => 'course-overview-source-legend tube',
    ),
    'items' => array(
      1 => array(
        'data' => t("Degree requirements information"),
        'class' => 'study-object',
      ),
      2 => array(
        'data' => t("Teaching information"),
        'class' => 'course',
      ),
    ),
  );

  $element['group_description_objectives']['#prefix'] .= theme('item_list', $messages);
  $element['group_description_objectives']['#prefix'] .= theme('item_list', $source_legend);
}

/**
 * Implements hook_field_group_pre_render_alter().
 */
function uhc_course_implementation_field_group_pre_render_alter(&$element, $group, &$form) {
  // Use custom section labels as custom section accordion titles
  if ($group->group_name == 'group_manual_content') {
    // We need to reconstruct the whole prefix in order to change the label
    $element['#prefix'] = '<h3 class="field-group-format-toggler ' . $group->format_type . ($group->collapsed ? '' : ' field-group-accordion-active') . '"><a href="#">' . render($element['field_imp_teachersection_label']) . '</a></h3><div class="field-group-format-wrapper ' . $group->classes . '">';
  }
}

/**
 * Implements hook_entity_load().
 *
 * Problem:
 *   Default image of course implementation header depends on organisation it
 *   belongs to.
 *
 * Solution(tm) by Mario Vercelotti:
 *   When loading course implementations which does not have header image set at
 *   all, first try to fetch an image and caption from related organisation
 *   term recursively.
 *
 * @see uhc_course_implementation_entity_presave().
 */
function uhc_course_implementation_entity_load($entities, $type) {
  // Loop each loadable entity if it is an node
  if ($type == 'node') {
    foreach ($entities as $entity) {
      // When node is type of "course_implementation"
      if ($entity->type == 'course_implementation') {

        // When given entity has no header image but has reference to an
        // organisation term reference.
        $field_imp_header_image = field_get_items('node', $entity, 'field_imp_header_image');
        if (empty($field_imp_header_image) && !empty($entity->field_imp_organisation[LANGUAGE_NONE][0]['tid'])) {

          // Load organisation term and caption
          $term_image_and_caption = uhc_course_implementation_get_default_header_image($entity->field_imp_organisation[LANGUAGE_NONE][0]['tid']);
          if(!empty($term_image_and_caption['fid'])) {

            // If image and caption has been found, then load the file entity
            // and use that object to set it has header image.
            // TODO: What if we have fid but no caption?
            $entity->field_imp_header_image_caption = $term_image_and_caption['caption'];
            $file = file_load($term_image_and_caption['fid']);
            $entity->field_imp_header_image = array(
              LANGUAGE_NONE => array(array('fid' => $term_image_and_caption['fid']) + (array) $file),
            );

            // See uhc_course_implementation_entity_presave(), this is for
            // telling to form editing process that it should not save this
            // file.
            $entity->has_default_image = TRUE;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_property_info().
 */
function uhc_course_implementation_entity_property_info() {
  $info = array();
  $properties = &$info['node']['bundles']['course_implementation']['properties'];
  $properties['enrollment_url'] = array(
    'label' => t('Enrollment URL'),
    'type' => 'uri',
    'getter callback' => 'uhc_course_implementation_get_enrollment_url',
    'computed' => TRUE,
    'entity views field' => TRUE,
    'translatable' => TRUE,
  );
  $properties['academic_year'] = array(
    'label' => t('Academic year'),
    'type' => 'text',
    'getter callback' => 'uhc_course_implementation_get_academic_year',
    'computed' => TRUE,
    'entity views field' => TRUE,
    'translatable' => FALSE,
  );
  return $info;
}

/**
 * Callback function for getting enrollment URL for given course implementation.
 */
function uhc_course_implementation_get_enrollment_url($node, array $options, $name, $type, $info) {
  // This callback should only cover enrollment_url field in node
  if ($name != 'enrollment_url' || $type != 'node') {
    return NULL;
  }

  // Specify URL attributes
  $language = !empty($options['language']->language) ? $options['language']->language : 'fi';
  $lang_nums = array(
    'fi' => '1',
    'sv' => '2',
    'en' => '6',
  );
  $lang_num = $lang_nums[$language];
  $nid = $node->nid;
  if (function_exists('uhc_course_hierarchy_get_course_hierarchy')) {
    // For dependency reasons check if course hiearchy is available before
    // calling it.
    $root_node = uhc_course_hierarchy_get_course_hierarchy_root($node);
    if ($root_node) {
      $nid = $root_node->nid;
    }
  }
  $id = _uhc_sources_resolve_course_imp($nid);

  // Define URL pattern depending on organisation
  if (uhc_sources_is_from_organisation($node, 'H930')) {
    $url = 'https://www.avoin.helsinki.fi/palvelut/esittely.aspx?o=:id';
    if ($language != 'fi') {
      // When language is not 'fi', then append also language parameter
      $url .= '&lang=:language';
    }
  }
  else {
    // Standard URL
    $url = 'https://weboodi.helsinki.fi/hy/alkusivu.jsp?Kieli=:langnum&avattavaSivu=opettaptied&OpetTap=:id';
  }

  // Construct absolute URL with attributes
  $url = preg_replace(array_fill(0, count($language), '/:language/'), $language, $url, 1);
  $url = preg_replace(array_fill(0, count($lang_num), '/:langnum/'), $lang_num, $url, 1);
  $url = preg_replace(array_fill(0, count($id), '/:id/'), $id, $url, 1);

  // Force absolute
  $options['absolute'] = TRUE;

  return url($url, $options);
}

/**
 * Callback function for deducing the academic year depending on the begin year.
 */
function uhc_course_implementation_get_academic_year($node, array $options, $name, $type, $info) {
  // This callback should only cover enrollment_url field in node
  if ($name != 'academic_year' || $type != 'node') {
    return NULL;
  }

  if ($end_date = _uhc_course_implementation_get_academic_year_end_date($node)) {
    $ending_year = (int) $end_date->format('Y');
    $starting_year = $ending_year - 1;
    return sprintf('%d - %d', $starting_year, $ending_year);
  }

  return NULL;
}

/**
 * Helper function for determining the academic yearsÂ´ end date for given $node
 * that has begin date set.
 *
 * @param $node
 * @return DateTime|null
 * @see UHCSearchPortalFeatureViewsHandlerFilterSemester::getCurrentSemester()
 */
function _uhc_course_implementation_get_academic_year_end_date($node) {
  $date = _uhc_course_implementation_get_begin_date($node);
  if ($date) {

    // Specify two testable values
    $date->modify('last day of this month');
    $academic_years_last_day = '31.07.';

    // Add one day and modify it to last day of that month, until it matches the
    // last academic yearsÂ´ day
    while ($date->format('d.m.') != $academic_years_last_day) {
      $date->add(new DateInterval('P1D'));
      $date->modify('last day of this month');
    }

    // Convert timezone to Etc/Zulu if it's not already
    if ($date->getTimezone()->getName() != 'Etc/Zulu') {
      $date->setTimezone(new DateTimeZone('Etc/Zulu'));
    }

    return $date;
  }
  return NULL;
}

/**
 * Gets start date as DateTime object if given $node has one set.
 * @param $node
 * @return DateTime|NULL
 */
function _uhc_course_implementation_get_begin_date($node) {
  $field_values = field_get_items('node', $node, 'field_imp_begin_date');
  if (!empty($field_values)) {
    return new DateTime($field_values[0]['value'], new DateTimeZone($field_values[0]['timezone']));
  }
  return NULL;
}

/**
 * Implements hook_ds_fields_info().
 */
function uhc_course_implementation_ds_fields_info($entity_type) {
  $ds_fields = array();
  if ($entity_type == 'node') {
    $ds_fields['node']['uhc_course_implementation_enrollment_button'] = array(
      'function' => 'uhc_course_implementation_enrollment_button',
      'title' => 'Enrollment link/button',
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'ui_limit' => array('course_implementation|*'),
    );
    $ds_fields['node']['uhc_course_implementation_timetable_help_texts'] = array(
      'function' => 'uhc_course_implementation_timetable_help_texts',
      'title' => 'Timetable help texts',
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'ui_limit' => array('course_implementation|*'),
    );
  }
  return $ds_fields;
}

/**
 * Callback for DS field that renders enrollment button.
 * @see https://wiki.helsinki.fi/pages/viewpage.action?pageId=202029321
 */
function uhc_course_implementation_enrollment_button($field) {
  $node = $field['entity'];
  if ($node->type != 'course_implementation') {
    return NULL;
  }

  // If we should hide the button completely, return nothing
  if (uhc_course_implementation_should_hide_sign_up($node)) {
    return NULL;
  }

  // If we should remove the link, but still have the label, just return label
  // itself.
  $label = t('Enrol');
  if (!uhc_sources_is_from_organisation($node, 'H930') && !uhc_course_implementation_enrollment_period_active($node)) {
    return $label;
  }

  // Otherwise, return it as a link
  $wrapper = entity_metadata_wrapper('node', $node);
  $options = array(
    'absolute' => TRUE,
    'external' => TRUE,
    'attributes' => array('class' => 'button--action icon--arrow-right button__inline'),
    'html' => TRUE,
  );
  global $language;
  return theme('link', array('text' => $label, 'path' => $wrapper->language($language->language)->enrollment_url->value(), 'options' => $options));
}

/**
 * Callback for DS field that determines which help texts to show.
 *
 * @param $field
 * @see https://wiki.helsinki.fi/pages/viewpage.action?pageId=202022322
 */
function uhc_course_implementation_timetable_help_texts($field) {
  $node = $field['entity'];

  /*
   * @var $drupal_timetable_empty bool
   *   Does timetable (from Drupal) accordion have any content?
   */
  $field_imp_reference_to_events = field_get_items('node', $node, 'field_imp_reference_to_events');
  $drupal_timetable_empty = !is_array($field_imp_reference_to_events);

  /*
   * @var $oodi_timetable_empty bool
   *   Does timetable (from Oodi) accordion have any content?
   */
  $field_imp_events_json = field_get_items('node', $node, 'field_imp_events_json');
  $oodi_timetable_empty = !is_array($field_imp_events_json);

  /*
   * @var $either_timetable_content bool
   *   Has either sources timetable content defined?
   */
  $either_timetable_content = !$drupal_timetable_empty || !$oodi_timetable_empty;

  /*
   * @var $schedule_only_from_drupal bool
   *   If timetable found but only from Drupal, don't show any text
   */
  $schedule_only_from_drupal = $oodi_timetable_empty && !$drupal_timetable_empty;

  /*
   * @var $is_exam bool
   *   Does current nodesÂ´ method of study belong to exams group?
   */
  $exam_tids = variable_get('uhc_migrate_methods_of_study_marked_as_exam', array());
  $exam_tids = array_unique(array_values($exam_tids));
  if ($zero = array_search(0, $exam_tids)) {
    unset($exam_tids[$zero]);
  }
  $is_exam = _uhc_course_implementation_has_method_of_study($exam_tids);

  /*
   * @var $is_electronic_exam_room bool
   *   Does current node's method of study belong to electronic exam room?
   */
  $is_electronic_exam_room = _uhc_course_implementation_viewing_electronic_exam_room();

  $content = '';
  uhc_course_implementation_help_texts_description($content, $node, $drupal_timetable_empty, $oodi_timetable_empty, $either_timetable_content, $schedule_only_from_drupal, $is_exam, $is_electronic_exam_room);
  uhc_course_implementation_help_texts_messages($content, $node, $drupal_timetable_empty, $oodi_timetable_empty, $either_timetable_content, $schedule_only_from_drupal, $is_exam, $is_electronic_exam_room);

  return $content;
}

/**
 * Populates $content varaible with timetable descripion text that has a
 * specific logic specified in flowchart.
 *
 * @param string &$content
 * @param object $node
 * @param bool $drupal_timetable_empty
 * @param bool $oodi_timetable_empty
 * @param bool $either_timetable_content
 * @param bool $schedule_only_from_drupal
 * @param bool $is_exam
 * @param bool $is_electronic_exam_room
 * @see https://wiki.helsinki.fi/pages/viewpage.action?pageId=202022322
 */
function uhc_course_implementation_help_texts_description(&$content, $node, $drupal_timetable_empty, $oodi_timetable_empty, $either_timetable_content, $schedule_only_from_drupal, $is_exam, $is_electronic_exam_room) {
  global $language;

  // Following loops until $help_text is defined
  while (!isset($help_text)) {

    // Has user set an specific help text?
    $field_imp_timetable_additional = field_get_items('node', $node, 'field_imp_timetable_additional', $language->language);
    if (!empty($field_imp_timetable_additional[0]['safe_value'])) {
      $help_text = $field_imp_timetable_additional[0]['safe_value'];
      break;
    }

    // If this page is elextronic exam room -type, then use specific help text
    if ($is_electronic_exam_room) {
      $examinarium_url = variable_get('uhc_course_implementation_timetable_examinarium_url_' . $language->language, '/');
      $help_text = t('Enrol for the exam in WebOodi. Then book your exam time and place in <a href="@url">Examinarium</a>.', array('@url' => $examinarium_url));
      break;
    }

    // If has timetable and its not only from Drupal, but it's not an exam...
    if ($either_timetable_content && !$schedule_only_from_drupal && !$is_exam) {
      $help_text = t('Here is the courseâs teaching schedule. Check the course overview for possible other schedules.');
      break;
    }

    // Default/fallback behaviour: Do not show any text
    $help_text = '';
    break;

  }

  // Set help text as accordionsÂ´ prefix value and wrap it with <p>
  if (!empty($help_text)) {
    $content .= '<p class="bar bar--small">' . $help_text . '</p>';
  }
}

/**
 * Populates $content with extra message elements.
 *
 * @param string &$content
 * @param object $node
 * @param bool $drupal_timetable_empty
 * @param bool $oodi_timetable_empty
 * @param bool $either_timetable_content
 * @param bool $schedule_only_from_drupal
 * @param bool $is_exam
 * @param bool $is_electronic_exam_room
 * @see https://wiki.helsinki.fi/pages/viewpage.action?pageId=202022322
 */
function uhc_course_implementation_help_texts_messages(&$content, $node, $drupal_timetable_empty, $oodi_timetable_empty, $either_timetable_content, $schedule_only_from_drupal, $is_exam, $is_electronic_exam_room) {

  // Set messages
  // DOO-2021: Show text link for accessability
  if ($either_timetable_content && !$is_electronic_exam_room) {
    $content .= '<div class="messages views-system-message status info alternative">' . t('<p><a href="http://www.helsinki.fi/teknos/opetustilat/index.htm">Learn more about the classrooms accessibility and facilities (in Finnish)</a></p>') . '</div>';
  }

  // DOO-706: When user is staff, let them know that information comes from
  // Oodi.
  if (!$oodi_timetable_empty && uh_coursepages_has_staff_role() && !$is_electronic_exam_room) {
    $content .= '<div class="messages views-system-message status alternative"><p>' . t('These events are imported from WebOodi') . '</p></div>';
  }

}

/**
 * Implements hook_entity_presave().
 */
function uhc_course_implementation_entity_presave($entity, $type) {
  // If we've set a default image, remove it before saving, so we don't
  // accidentally save the default image as actual image of the field.
  if ($type == 'node' && isset($entity->has_default_image) && isset($entity->field_imp_header_image)) {

    // Get entity's image fid and default organisation image
    $image_fid = empty($entity->field_imp_header_image[LANGUAGE_NONE][0]['fid']) ? NULL : $entity->field_imp_header_image[LANGUAGE_NONE][0]['fid'];
    $term_image_and_caption = uhc_course_implementation_get_default_header_image($entity->field_imp_organisation[LANGUAGE_NONE][0]['tid']);

    // Clear header image field adn caption, when it has been removed or it's
    // the same as organisation default image.
    if($image_fid == NULL || (!empty($term_image_and_caption['fid']) && $image_fid == $term_image_and_caption['fid'])) {
      $entity->field_imp_header_image = array();
      $entity->field_imp_header_image_caption = array();
    }
  }

  _uhc_course_implementation_wrap_video_embed_url_in_tag($entity);
}

/**
 * Wraps video embed URL in a special embed tag to make video embedding work.
 *
 * @param $entity object Node.
 */
function _uhc_course_implementation_wrap_video_embed_url_in_tag($entity) {
  if (isset($entity->type) && $entity->type == 'course_implementation') {
    $video_embed_url = !empty($entity->field_video_embed_url[LANGUAGE_NONE][0]['value'])
      ? $entity->field_video_embed_url[LANGUAGE_NONE][0]['value']
      : NULL;

    if (!empty($video_embed_url) && strpos($video_embed_url, '[video:') === FALSE) {
      $entity->field_video_embed_url[LANGUAGE_NONE][0]['value'] = "[video:$video_embed_url]";
    }
  }
}

/**
 * Helper function for fetching default course image by organisation term. If
 * organisation term does not have an image, it will check from the parent
 * recursively till the root term.
 *
 * When default image has been found, it will return its fid and caption as an
 * array. If no default course image can't be found, then function will return
 * an empty array.
 *
 * @param $tid
 * @return array
 */
function uhc_course_implementation_get_default_header_image($tid) {
  $return = &drupal_static(__FUNCTION__ . $tid, array());

  // Loop until we can't load the term or we're not in root
  while (empty($return)) {

    // Ensure that we can load the term
    $term = taxonomy_term_load($tid);
    if (!$term) {
      // Break the loop if given term couldn't be loaded.
      break;
    }

    // Look out for default header image and caption
    $field_default_header_image = field_get_items('taxonomy_term', $term, 'field_default_header_image');
    $field_default_header_image_caption = field_get_items('taxonomy_term', $term, 'field_default_header_image_capti');
    if (!empty($field_default_header_image[0]['fid']) && !empty($field_default_header_image_caption[0]['value'])) {
      $return = array('fid' => $field_default_header_image[0]['fid'], 'caption' => array(LANGUAGE_NONE => $field_default_header_image_caption));
      break;
    }

    // Look if this term has parents and set new tid for next round.
    $parents = taxonomy_get_parents($tid);
    $parent = reset($parents);
    if (empty($parent)) {
      // Break the loop if we can't find parents anymore.
      break;
    }
    $tid = $parent->tid;
  }


  return $return;
}

/**
 * Determines whether given $node has private content associated.
 *
 * @param $node object
 *   Course implementation node.
 * @return bool
 *   TRUE if the course has private content, otherwise FALSE.
 *
 * @see uhc_course_implementation_node_view()
 * @see uhc_course_implementation_has_private_messages()
 */
function uhc_course_implementation_has_private_content($node) {
  $moodle_key = uhc_teacher_tools_get_moodle_key($node);

  return !empty($moodle_key)
    || uhc_course_implementation_has_private_messages($node)
    || uhc_course_implementation_has_private_material($node);
}

/**
 * Determines whether given $node has private messages.
 *
 * @param $node object
 *   Course implementation node.
 * @return bool
 *   TRUE if the course has private messages, otherwise FALSE.
 *
 * @see uhc_course_implementation_has_private_content()
 */
function uhc_course_implementation_has_private_messages($node) {
  $has_private_messages = FALSE;

  if ($node->type == 'course_implementation') {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'comment');
    $query->propertyCondition('nid', $node->nid);
    $query->fieldCondition('field_private', 'value', 1);
    $result = $query->execute();

    $has_private_messages = !empty($result['comment']);
  }

  return $has_private_messages;
}

/**
 * Determines whether given $node has private material.
 *
 * @param $node object
 *   Course implementation node.
 * @return bool
 *   TRUE if the course has private material, otherwise FALSE.
 *
 * @see uhc_course_implementation_has_private_content() and uhc_course_collaboration_private_is_private_course_material().
 */
function uhc_course_implementation_has_private_material($node) {
  $has_private_material = FALSE;

  if ($node->type == 'course_implementation' && !empty($node->field_section_material[LANGUAGE_NONE])) {
    foreach ($node->field_section_material[LANGUAGE_NONE] as $material) {
      // Load node to ensure it exists before checking whether its private
      // material or not.
      $material_node = node_load($material['target_id']);
      if ($material_node && uhc_course_collaboration_private_is_private_course_material($material_node)) {
        $has_private_material = TRUE;
        break;
      }
    }
  }

  return $has_private_material;
}

/**
 * Determines whether given $node has material.
 *
 * @param $node object
 *   Course implementation node.
 * @return bool
 *   TRUE if the course has material, otherwise FALSE.
 */
function uhc_course_implementation_has_material($node) {
  return $node->type == 'course_implementation' && !empty($node->field_section_material[LANGUAGE_NONE]);
}

/**
 * Implements hook_node_view().
 */
function uhc_course_implementation_node_view($node) {
  if (arg(0) == 'node' &&
      arg(1) == $node->nid &&
    $node->type == 'course_implementation') {
    uhc_course_implementation_display_private_content_message($node);
    uhc_course_implementation_display_view_in_teaching_language_message($node);
    uhc_course_implementation_display_course_implementation_status_message($node);
  }
}

/**
 * Implements hook_preprocess_node().
 */
function uhc_course_implementation_preprocess_node(&$vars) {
  $node = $vars['node'];

  if ($node->type == 'course_implementation') {
    // add class so we can theme exams
    if (in_array($node->field_imp_method_of_study[LANGUAGE_NONE][0]['tid'], variable_get('uhc_migrate_methods_of_study_marked_as_exam'))) {
      $vars['classes_array'][] = 'exam';
    }
  }
}

/**
 * Display a message if the current language is not one of the teaching
 * languages.
 *
 * @param $node object Course implementation node.
 */
function uhc_course_implementation_display_view_in_teaching_language_message($node) {
  global $language;
  $teaching_languages = field_get_items('node', $node, 'field_imp_teaching_language');

  if (!empty($teaching_languages)) {
    $teaching_language_codes = array();

    foreach ($teaching_languages as $teaching_language) {
      $teaching_language_codes[] = $teaching_language['value'];
    }

    if (!in_array($language->language, $teaching_language_codes)) {
      uh_coursepages_set_message(t('Please read this page in teaching language'), 'status', FALSE);
    }
  }
}

/**
 * Display private content message when the course has private content and the
 * current user is not signed up for the course.
 *
 * @see uhc_course_implementation_has_private_content()
 * @param $node object Node object.
 */
function uhc_course_implementation_display_private_content_message($node) {
  $display_private_content_message = $node->type == 'course_implementation'
    && arg(0) == 'node'
    && arg(1) == $node->nid
    && !uhc_course_collaboration_is_current_user_course_student()
    && !uhc_course_collaboration_is_current_user_course_teacher()
    && !uhc_course_collaboration_is_current_user_course_administrator()
    && uhc_course_implementation_has_private_content($node);

  $private_content_message_anonymous = t('You need to log in and sign up for the course to view some of the content on this page.');
  $private_content_message_authenticated = t('You need to enrol for the course to view some of the content on this page.');
  $private_content_message = user_is_anonymous() ? $private_content_message_anonymous : $private_content_message_authenticated;

  if ($display_private_content_message) {
    $message_type = user_is_anonymous() ? 'warning anonymous private-content-message' : 'warning';
    uh_coursepages_set_message($private_content_message, $message_type);
  }
  else {
    drupal_add_js(
      array(
        'uhc_course_implementation' => array(
          'private_content_message' => $private_content_message,
        ),
      ),
      'setting'
    );
    drupal_add_js(drupal_get_path("module", "uhc_course_implementation") . "/js/uhc_course_implementation_hide_private_message.js");
  }
}

/**
 * Display a message if the course implementation has been canceled.
 *
 * @param $node object Course implementation node.
 */
function uhc_course_implementation_display_course_implementation_status_message($node) {
  $field_cancelled = field_get_items('node', $node, 'field_cancelled');
  if (!empty($field_cancelled[0]['value']) && $field_cancelled[0]['value']) {
    uh_coursepages_set_message(t('Cancelled'), 'error', FALSE);
  }
}

/**
 * Determines whether given node should hide the signup button.
 * @param $node
 * @return bool
 * @see https://wiki.helsinki.fi/pages/viewpage.action?pageId=202029321
 */
function uhc_course_implementation_should_hide_sign_up($node) {
  return uhc_course_collaboration_is_current_user_course_student()
  || uhc_course_collaboration_is_current_user_course_teacher()
  || uhc_course_collaboration_is_current_user_course_administrator()
  || (uhc_sources_is_from_organisation($node, 'H930') && !uhc_course_implementation_is_organised_by_open_uni($node))
  || uhc_course_implementation_signup_hidden($node);
}

/**
 * Determines whether given node is organized by open university.
 *
 * @param $node
 * @return bool
 * @see https://wiki.helsinki.fi/pages/viewpage.action?pageId=202029321
 */
function uhc_course_implementation_is_organised_by_open_uni($node) {
  $org = trim(drupal_strtolower(field_get_items('node', $node, 'field_imp_course_organiser')[0]['value']));
  return in_array($org, array('open university', 'avoin yliopisto', 'Ã¶ppna universitet'));
}

/**
 * Returns sign up button value of given node.
 *
 * @param $node
 * @return mixed
 * @see https://wiki.helsinki.fi/pages/viewpage.action?pageId=202029321
 */
function uhc_course_implementation_signup_hidden($node) {
  return field_get_items('node', $node, 'field_imp_hide_sign_up_button')[0]['value'];
}

/**
 * Determines whether given node has enrollment active.
 *
 * @param $node
 * @return bool
 * @see https://wiki.helsinki.fi/pages/viewpage.action?pageId=202029321
 */
function uhc_course_implementation_enrollment_period_active($node) {
  $enrollment_period_active = FALSE;
  $enrollment_begin_time = uhc_course_implementation_get_enrollment_begin_date($node);
  $enrollment_end_time = uhc_course_implementation_get_enrollment_end_date($node);

  if (isset($enrollment_begin_time, $enrollment_end_time) && $enrollment_begin_time < REQUEST_TIME && REQUEST_TIME < $enrollment_end_time) {
    $enrollment_period_active = TRUE;
  }
  elseif (isset($enrollment_begin_time) && !isset($enrollment_end_time) && $enrollment_begin_time < REQUEST_TIME) {
    $enrollment_period_active = TRUE;
  }
  elseif (!isset($enrollment_begin_time) && !isset($enrollment_end_time)) {
    $enrollment_period_active = TRUE;
  }

  return $enrollment_period_active;
}

/**
 * Returns an unix timestamp of enrollment begin date of given node.
 *
 * @param $node
 * @return int|null
 * @see uhc_course_implementation_get_date_field_value_as_timestamp()
 */
function uhc_course_implementation_get_enrollment_begin_date($node) {
  return uhc_course_implementation_get_date_field_value_as_timestamp($node, 'field_imp_enrollment_begin_date');
}

/**
 * Returns an unix timestamp of enrollment end date of given node.
 *
 * @param $node
 * @return int|null
 * @see uhc_course_implementation_get_date_field_value_as_timestamp()
 */
function uhc_course_implementation_get_enrollment_end_date($node) {
  return uhc_course_implementation_get_date_field_value_as_timestamp($node, 'field_imp_enrollment_end_date');
}

/**
 * Returns an unix timestamp of given node and date field.
 *
 * @param $node
 * @return int|null
 * @see uhc_course_implementation_get_enrollment_begin_date()
 * @see uhc_course_implementation_get_enrollment_end_date()
 */
function uhc_course_implementation_get_date_field_value_as_timestamp($node, $date_field_name) {
  $date_field = field_get_items('node', $node, $date_field_name);

  return isset($date_field[0]['value']) ? strtotime($date_field[0]['value']) : NULL;
}

/**
 * Loads a course implementation node by course implementation ID.
 *
 * @param $course_implementation_id int Course implementation ID.
 * @return bool|mixed|null Course implementation node (if found), NULL (if not
 * found) or FALSE (if node loading fails).
 */
function uhc_course_implementation_load_by_id($course_implementation_id) {
  $course_implementation_node = NULL;

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'course_implementation')
    ->fieldCondition('field_imp_id', 'value', $course_implementation_id);

  $result = $query->execute();

  if (!empty($result['node'])) {
    $node = array_pop($result['node']);
    $course_implementation_node = node_load($node->nid);
  }

  return $course_implementation_node;
}

/**
 * Implements hook_field_formatter_info().
 *
 * Field formatter for course implementation status.
 */
function uhc_course_implementation_field_formatter_info() {
  return array(
    'cancelled' => array(
      'label' => t('Cancelled'),
      'field types' => array('list_boolean'),
      'description' => t('Displays a true value as a cancelled message.'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * Formats course implementation status value (integer) as translated status
 * text.
 */
function uhc_course_implementation_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  if ($display['type'] == 'cancelled') {
    foreach ($items as $delta => $item) {
      if ($item['value']) {
        $markup = '<span class="cancelled messages alternative error"><span>' . t('Cancelled') . '</span></span>';
        $element[$delta] = array('#markup' => $markup);
      }
    }
  }
  return $element;
}

/**
 * Implements hook_taxonomy_term_delete().
 *
 * Respond to term deletion by putting course implementations to post update
 * queue that refers to deletable term.
 */
function uhc_course_implementation_taxonomy_term_delete($term) {
  $organisation_vocabulary = taxonomy_vocabulary_machine_name_load('organisations_of_university_of_helsinki');
  if (!empty($organisation_vocabulary->vid) && $term->vid == $organisation_vocabulary->vid) {

    $queue = new UHOodiPrioritisedQueue();

    // Find nodes that refers to this deletable node
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'course_implementation');
    $query->fieldCondition('field_imp_organisation', 'tid', $term->tid);
    $result = $query->execute();
    if (!empty($result['node'])) {
      foreach ($result['node'] as $item) {
        // For each found node, we need to resolve its course id for the post
        // update queue (it supports course ids, no nids).
        $id = _uhc_sources_resolve_course_imp($item->nid);
        if ($id) {
          $item = new UHOodiQueueItem(array(
            'action' => 'update',
            'entityType' => 'courseunitrealisation',
            'entityId' => $id,
          ), UHOodiQueue::PRIORITY_MEDIUM);
          $queue->createItem($item->exportToQueueItem());
        }
      }
    }
  }
}

/**
 * Helper function for getting teaching language from given $node.
 * @param $node
 * @return array
 * @see _uhc_course_implementation_inherited_fields_get_value()
 */
function _uhc_course_implementation_get_teaching_languages($node) {
  $teaching_language_field_items = field_get_items('node', $node, 'field_imp_teaching_language');
  return $teaching_language_field_items ? array_column($teaching_language_field_items, 'value') : array();
}

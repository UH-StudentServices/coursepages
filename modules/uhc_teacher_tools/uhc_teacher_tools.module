<?php
/**
 * @file
 * Code for the UHC Teacher Tools feature.
 *
 * @license GPL, or GNU General Public License, version 3
 * @license http://opensource.org/licenses/GPL-3.0
 * @see README.md how to contribute to this project
 */

include_once 'uhc_teacher_tools.features.inc';

/**
 * Implements hook_field_widget_form_alter().
 *
 * When attaching "text with format" -field to an form. Identify those who have
 * no format set or those who have a value and therefore they should have either
 * filtered_html or full_html (where WYSIWYG editors are in use).
 *
 * If no description has been set by Field API, then set this note to teachers
 * which tend to lack on differences between new paragraph VS new line.
 *
 * The empty description -check is done, in case if sometime some field needs to
 * have different description, therefore the manually set description should
 * override this default one.
 */
function uhc_teacher_tools_field_widget_form_alter(&$element, &$form_state, $context) {
  $expected_type = 'text_format';
  $expected_formats = array(NULL, 'filtered_html', 'full_html');
  if (isset($element['#type']) &&
      $element['#type'] == $expected_type &&
      in_array($element['#format'], $expected_formats) &&
      drupal_strlen($element['#description']) == 0 &&
      $element['#base_type'] == 'textarea') {
    $element['#description'] = t('Pressing Enter creates a new paragraph and pressing Shift+Enter creates a new line');
  }
}

/**
 * Implements hook_uh_coursepages_staff_roles().
 */
function uhc_teacher_tools_uh_coursepages_staff_roles() {
  return array(user_role_load_by_name('teacher')->rid, user_role_load_by_name('course administrator')->rid);
}

/**
 * Implements hook_module_implements_alter().
 * Lets put our hook_menu_local_tasks_alter() to be executed AFTER
 * entity_translation module.
 */
function uhc_teacher_tools_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'menu_local_tasks_alter' && isset($implementations['uhc_teacher_tools'])) {
    // Move it to be the last
    $group = $implementations['uhc_teacher_tools'];
    unset($implementations['uhc_teacher_tools']);
    $implementations['uhc_teacher_tools'] = $group;
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function uhc_teacher_tools_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  uhc_teacher_tools_hide_language_tabs($data);
  uhc_teacher_tools_hide_view_tab($data);
}

/**
 * Hide all language tabs if the active user is course teacher or course
 * administrator.
 */
function uhc_teacher_tools_hide_language_tabs(&$data) {
  $hide = (uhc_course_collaboration_is_current_user_course_teacher() || uhc_course_collaboration_is_current_user_course_administrator())
    && isset($data['tabs'][1]['output']);

  if ($hide) {
    foreach ($data['tabs'][1]['output'] as $key => $item) {
      if (isset($item['#language_tab']) && $item['#language_tab']) {
        unset($data['tabs'][1]['output'][$key]);
      }
    }
  }
}

/**
 * Hide "View" tab.
 */
function uhc_teacher_tools_hide_view_tab(&$data) {
  if (isset($data['tabs'][0]['output'])) {
    foreach ($data['tabs'][0]['output'] as $key => $item) {
      if ($item['#link']['path'] == 'node/%/view') {
        unset($data['tabs'][0]['output'][$key]);
      }
    }
  }
}

/**
 * Helper function for fetching Moodle key from course implementation node.
 * @param $node object Course implementation node.
 * @return string Moodle key.
 */
function uhc_teacher_tools_get_moodle_key($node) {
  $moodle_key = NULL;
  $moodle_key_field = field_get_items('node', $node, 'field_moodle_key');

  if (!empty($moodle_key_field[0]['value'])) {
    $moodle_key = $moodle_key_field[0]['value'];
  }

  return $moodle_key;
}

/**
 * Implements hook_menu().
 *
 * - Adds a "View demo course" link item to user menu.
 * - Adds menu callback targets for edit links.
 * - Adds a local task link to analytics data.
 */
function uhc_teacher_tools_menu() {
  $items["demo-course"] = array(
    'menu_name' => 'user-menu',
    'title' => 'View demo course',
    'access callback' => TRUE,
    'page callback' => '_uhc_teacher_tools_demo_course_page_callback'
  );

  $teacher_edit_links = array(
    'Moodle' => 'edit-group_imp_moodle',
    'Messages' => 'group-course-messages',
    'Material' => 'edit-group_imp_material'
  );

  $weight = 90;
  foreach ($teacher_edit_links as $key => $value) {
    $items['node/%node/' . $value] = array(
      'title' => $key,
      'access callback' => '_uhc_teacher_tools_menu_edit_links_access_callback',
      'access arguments' => array(1),
      'page callback' => '_uhc_teacher_tools_menu_edit_links_menu_callback',
      'page arguments' => array(1, $value),
      'description' => drupal_html_class('edit-' . $key), //we use this as a class in hy_doo_menu_local_tasks_alter().
      'weight' => $weight,
      'type' => MENU_LOCAL_TASK,
    );
    $weight++;
  }

  $items['node/%node/analytics'] = array(
    'title' => 'Analytics',
    'access callback' => '_uhc_teacher_tools_menu_edit_links_access_callback',
    'access arguments' => array(1),
    'page callback' => 'uhc_teacher_tools_analytics_callback',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

function _uhc_teacher_tools_demo_course_page_callback() {
  $demo_course_nid = variable_get('uhc_tour_demo_nid', NULL);
  drupal_goto("node/$demo_course_nid");
}

/**
 * Access callback for teacher menu local task edit links
 */
function _uhc_teacher_tools_menu_edit_links_access_callback($node) {
  return ($node->type == 'course_implementation')
    && (user_access('access administration pages') || uhc_course_collaboration_is_current_user_course_teacher($node) || uhc_course_collaboration_is_current_user_course_administrator($node));
}

/**
 * Page callback for teacher menu local task edit links, needed for
 * passing query parameters to the url so we can open vertical tabs
 */
function _uhc_teacher_tools_menu_edit_links_menu_callback($node, $value) {
  $path = ($value == 'group-course-messages') ? 'node/' . $node->nid : 'node/' . $node->nid . '/edit';
  drupal_goto($path, array('query' => array('section' => $value)));
}

/**
 * Page callback for page analytics data.
 *
 * @return array Markup for the UHC Google Analytics Reports Page block.
 */
function uhc_teacher_tools_analytics_callback() {
  $view = views_get_view('uhc_google_analytics_reports_page');
  $view->set_display('block');
  $analytics_block_title =  '<p>' . $view->get_title() . '</p>';
  $analytics_block_content = views_embed_view('uhc_google_analytics_reports_page', 'block');
  $analytics_block_markup = $analytics_block_title . $analytics_block_content;

  return array('#markup' => $analytics_block_markup);
}

/**
 * Implements hook_menu_link_alter().
 *
 * Hide menu items that have path pointing to user pages (admin still sees
 * these).
 */
function uhc_teacher_tools_menu_link_alter(&$item) {
  if (substr($item['link_path'], 0, strlen('user')) == 'user') {
    $item['hidden'] = 1;
    $item ['options']['alter'] = TRUE;
  }
}

/**
 * Implements template_preprocess_page().
 *
 * Remove Menu local tasks in Course implementation node edit.
 */
function uhc_teacher_tools_preprocess_page(&$variables) {
  $node = isset($variables['node']) ? $variables['node'] : null;
  $uid = isset($variables['user']->uid) ? $variables['user']->uid : null;
  if(isset($node->type)
    && $uid !== '1'
    && isset($variables['page']['content']['system_main']['#node_edit_form'])) {
    unset($variables['tabs']['#primary']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Add js to node edit form
 */
function uhc_teacher_tools_form_node_form_alter(&$form, &$form_state, $form_id) {

  $scripts = array(
    'open_vertical_tabs.js',
    'inline_entity_form_fix.js',
    'ief_overlay.js',
  );

  foreach ($scripts as $script) {
    $form['#attached']['js'][] = array(
      'data' => drupal_get_path('module', 'uhc_teacher_tools') . '/js/' . $script,
    );
  }

  // this field is used for saving the active tab
  $form['form_active_tab'] = array(
    '#type' => 'hidden',
    '#default_value' => NULL,
  );

  $form['actions']['submit2'] = $form['actions']['submit'];
  $form['actions']['submit']['#value'] = t('Save & Close');
  $form['actions']['submit2']['#weight'] = 6;
  $form['actions']['submit2']['#submit'][] = 'uhc_teacher_tools_save_and_continue';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function uhc_teacher_tools_form_course_implementation_node_form_alter(&$form, &$form_state, $form_id) {
  uhc_teacher_tools_display_editing_message();
}

function uhc_teacher_tools_display_editing_message() {
  drupal_set_message(t('You are now editing the course page. Remember to save your changes with choosing "Save" or "Save & Close".'));
}

/**
 * Submit handler for Save & Continue button
 */
function uhc_teacher_tools_save_and_continue($form, &$form_state) {
  $active_tab = isset($form_state['values']['form_active_tab']) ? $form_state['values']['form_active_tab'] : NULL;
  $form_state['redirect'] = array('node/' . $form_state['nid'] . '/edit');

  if($active_tab) {
    $form_state['redirect'][] = array(
      'query' => array(
        'section' => $active_tab,
      ),
    );
  }
}

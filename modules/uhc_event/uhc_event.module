<?php
/**
 * @file
 * Code for the UHC Event feature.
 *
 * @license GPL, or GNU General Public License, version 3
 * @license http://opensource.org/licenses/GPL-3.0
 * @see README.md how to contribute to this project
 */

include_once 'uhc_event.features.inc';

/**
 * Implements hook_theme().
 */
function uhc_event_theme() {
  return array(
    'uhc_event_structured_teaching_schedule' => array(
      'file' => 'uhc_event.theme.inc',
      'variables' => array('node' => NULL, 'prefix' => NULL, 'messages' => NULL, 'content' => NULL, 'suffix' => NULL),
    ),
    'uhc_event_unstructured_teaching_schedule' => array(
      'file' => 'uhc_event.theme.inc',
      'variables' => array('node' => NULL, 'prefix' => NULL, 'messages' => NULL, 'content' => NULL, 'suffix' => NULL),
    ),
  );
}

/**
 * Helper function to get referencing course implementation nid
 * from event node
 */
function uhc_event_get_course_implementation($nid) {
  $table_name = 'field_data_field_imp_reference_to_events';
  $column_name = 'field_imp_reference_to_events_target_id';
  $query = db_select($table_name)->fields($table_name, array('entity_id'))->condition($column_name, $nid)->execute();
  while ($entity_id = $query->fetchField()) {
    return $entity_id;
  }
  return NULL;
}

/**
 * Implements hook_node_view().
 *
 * We have not implemented event view page. Instead we redirect to its
 * corresponding course implementation where this event information gets
 * displayed.
 */
function uhc_event_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'event' && uh_coursepages_is_node_page($node, $view_mode)) {
    if ($nid = uhc_event_get_course_implementation($node->nid)) {
      drupal_goto('node/' . $nid);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * After event deletion, when we have reference to course implementation; lets
 * redirect back to the course page after event deletion.
 */
function uhc_event_form_node_delete_confirm_alter(&$form, &$form_state) {
  $node = $form['#node'];
  if ($node->type == 'event') {
    $form['#submit'][] = 'uhc_event_node_delete_confirm';
  }
}

/**
 * Form submission callback for setting redirect path after node deletion.
 */
function uhc_event_node_delete_confirm(&$form, &$form_state) {
if ($nid = uhc_event_get_course_implementation($form['nid']['#value'])) {
    $form_state['redirect'] = 'node/' . $nid;
  }
}

/**
 * Implements hook_ds_fields_info().
 *
 * Introduce fields for bringing course fields to course implementation.
 */
function uhc_event_ds_fields_info($entity_type) {
  if ($entity_type == 'node') {
    return array(
      'node' => array(
        'uhc_event_teaching_schedule' => array(
          'title' => 'Teaching schedule',
          'field_type' => DS_FIELD_TYPE_FUNCTION,
          'ui_limit' => array('course_implementation|*'),
          'function' => 'uhc_event_teaching_schedule',
        ),
      ),
    );
  }
}

/**
 * DS field callback for rendering teaching schedule which gets rendered from
 * JSON object. We import them as JSON and render based on it for optimizing
 * importing performance (no need to create relational entities for this use
 * case).
 *
 * @param $field
 * @return string
 */
function uhc_event_teaching_schedule($field) {
  $node = $field['entity'];
  if (uhc_event_should_use_unstructured_events($node)) {
    return theme('uhc_event_unstructured_teaching_schedule', array('node' => $node));
  }
  else {
    return theme('uhc_event_structured_teaching_schedule', array('node' => $node));
  }
}

/**
 * Return TRUE when referenced method of study has a field_use_raw_events value
 * checked.
 *
 * @param $node
 * @return bool
 */
function uhc_event_should_use_unstructured_events($node) {
  $node_wrapper = entity_metadata_wrapper('node', $node);
  $method_of_study = $node_wrapper->field_imp_method_of_study->value();
  if ($method_of_study) {
    $method_of_study_wrapper = entity_metadata_wrapper('taxonomy_term', $method_of_study);
    return $method_of_study_wrapper->field_use_raw_events->value() === TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_preprocess_block().
 */
function uhc_event_preprocess_block(&$variables) {
  $block = $variables['block'];
  if ($block->module == 'views' && $block->delta == 'course_event_references-block') {

    // Get the course implementation node from URL
    $node = menu_get_object();
    if (!is_null($node)) {
      // Check if we have a custom title for the events listing and use it
      if (!empty($node->field_imp_events_title)) {
        $block->subject = $node->field_imp_events_title[LANGUAGE_NONE][0]['value'];
      }

      // Set accordion classes when we have events from both sources
      if (uhc_event_has_events_from_both_sources($node)) {

        // Disable contextual links, as they break our accordion. Add classes to enable accordion.
        unset($variables['title_suffix']['contextual_links']);
        $variables['title_attributes_array']['class'][] = 'accordion-item__light ds-teaser-accordion--title';
        $variables['content_attributes_array']['class'][] = 'field-group-accordion-item';

      }
      else {
        //lets hide the title if no accordion is needed
        $variables['title_attributes_array']['class'][] = 'element-invisible';
      }
    }
  }
}

/**
 * Helper function for determining whether given node has events from oodi JSON
 * and from Drupal content.
 * @param $node
 * @return bool
 */
function uhc_event_has_events_from_both_sources($node) {
  $field_imp_reference_to_events = field_get_items('node', $node, 'field_imp_reference_to_events');
  $field_imp_events_json = field_get_items('node', $node, 'field_imp_events_json');
  return !empty($field_imp_reference_to_events) && !empty($field_imp_events_json);
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Add timepicker js to event inline entity form. Deny access to location edit
 * form.
 */
function uhc_event_field_widget_form_alter(&$element, &$form_state, $context) {
  if ($context['instance']['entity_type'] == 'node' && $context['instance']['bundle'] == 'event') {
    if ($context['instance']['field_name'] == 'field_event_begin_date') {
      $element['#attached']['js'][] = libraries_get_path('wvega-timepicker') . '/jquery.timepicker.js';
      $element['#attached']['js'][] = drupal_get_path('module', 'uhc_event') . '/js/duration_picker.js';
    }
    elseif ($context['instance']['field_name'] == 'field_event_location') {
      // See ticket DOO-1507
      $element['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_ajax_render_alter().
 * trigger timepicker when we have datepopup.
 */
function uhc_event_ajax_render_alter(&$commands) {
  foreach ($commands as $command) {
    if(isset($command['settings']['datePopup'])) {
      $commands[] = array('command' => 'timepickerinit');
    }
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 *
 * Adds a custom duration validator to event form.
 */
function uhc_event_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ($entity_form['#bundle'] == 'event') {
    $entity_form['#element_validate'][] = 'uhc_event_event_form_validate_duration';
  }
}

/**
 * Custom duration validator. Validates the duration format and that the event
 * ends at 23:45 the same day at the latest.
 */
function uhc_event_event_form_validate_duration($element, &$form_state, $form) {
  if (!empty($form_state['values']['field_imp_reference_to_events']['und']['form']['field_event_duration']['und'][0]['value'])
    && !empty($form_state['values']['field_imp_reference_to_events']['und']['form']['field_event_begin_date']['und'][0]['value'])) {

    $duration_value = $form_state['values']['field_imp_reference_to_events']['und']['form']['field_event_duration']['und'][0]['value'];

    // Validate duration format.
    if (!preg_match('#^([01]?[0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?$#', $duration_value)) {
      form_error($element, t('Duration is not in valid format. Use for example 01:30 for duration of one hour and thirty minutes.'));
      return;
    }

    // Validate end time.
    $duration_hours_and_minutes = explode(':', $duration_value);
    $start_time_value = $form_state['values']['field_imp_reference_to_events']['und']['form']['field_event_begin_date']['und'][0]['value'];
    $start_time = new DateTime($start_time_value);
    $max_start_time = clone $start_time;
    $max_start_time->setTime(23, 45);
    $duration_hours = (int) $duration_hours_and_minutes[0];
    $duration_minutes = (int) $duration_hours_and_minutes[1];
    $start_time->add(new DateInterval("PT{$duration_hours}H"));
    $start_time->add(new DateInterval("PT{$duration_minutes}M"));

    if ($start_time > $max_start_time) {
      form_error($element, t('The event must end at 23:45 the same day at the latest.'));
    }
  }
}

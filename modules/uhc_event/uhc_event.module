<?php
/**
 * @file
 * Code for the UHC Event feature.
 *
 * @license GPL, or GNU General Public License, version 3
 * @license http://opensource.org/licenses/GPL-3.0
 * @see README.md how to contribute to this project
 */

include_once 'uhc_event.features.inc';


/**
 * Helper function to get referencing course implementation nid
 * from event node
 */
function uhc_event_get_course_implementation($nid) {
  $table_name = 'field_data_field_imp_reference_to_events';
  $column_name = 'field_imp_reference_to_events_target_id';
  $query = db_select($table_name)->fields($table_name, array('entity_id'))->condition($column_name, $nid)->execute();
  while ($entity_id = $query->fetchField()) {
    return $entity_id;
  }
  return NULL;
}

/**
 * Implements hook_node_view().
 *
 * We have not implemented event view page. Instead we redirect to its
 * corresponding course implementation where this event information gets
 * displayed.
 */
function uhc_event_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'event' && uh_coursepages_is_node_page($node, $view_mode)) {
    if ($nid = uhc_event_get_course_implementation($node->nid)) {
      drupal_goto('node/' . $nid);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * After event deletion, when we have reference to course implementation; lets
 * redirect back to the course page after event deletion.
 */
function uhc_event_form_node_delete_confirm_alter(&$form, &$form_state) {
  $node = $form['#node'];
  if ($node->type == 'event') {
    $form['#submit'][] = 'uhc_event_node_delete_confirm';
  }
}

/**
 * Form submission callback for setting redirect path after node deletion.
 */
function uhc_event_node_delete_confirm(&$form, &$form_state) {
if ($nid = uhc_event_get_course_implementation($form['nid']['#value'])) {
    $form_state['redirect'] = 'node/' . $nid;
  }
}

/**
 * Implements hook_ds_fields_info().
 *
 * Introduce fields for bringing course fields to course implementation.
 */
function uhc_event_ds_fields_info($entity_type) {
  if ($entity_type == 'node') {
    return array(
      'node' => array(
        'uhc_event_teaching_schedule' => array(
          'title' => 'Teaching schedule',
          'field_type' => DS_FIELD_TYPE_FUNCTION,
          'ui_limit' => array('course_implementation|*'),
          'function' => 'uhc_event_teaching_schedule',
        ),
      ),
    );
  }
}

/**
 * DS field callback for rendering teaching schedule which gets rendered from
 * JSON object. We import them as JSON and render based on it for optimizing
 * importing performance (no need to create relational entities for this use
 * case).
 *
 * @param $field
 * @return string
 */
function uhc_event_teaching_schedule($field) {
  $node = $field['entity'];

  // By default title will not be rendered unless we have events from both
  // sources.
  $title = '';
  $content = '';
  if(uhc_event_has_events_from_both_sources($node)) {
    $title = '<h2 class="accordion-item__light ds-teaser-accordion--title">' . t('Teaching schedule') . '</h2>';
    $content .= '<div class="event-list table-three-columns field-group-accordion-item">';
  }
  else {
    $content .= '<div class="event-list table-three-columns tube--large">';
  }

  // Generate content out from JSON
  $field_imp_events_json = field_get_items('node', $node, 'field_imp_events_json');
  if (!empty($field_imp_events_json[0]['value'])) {
    $events = json_decode($field_imp_events_json[0]['value']);
    if (json_last_error() == JSON_ERROR_NONE) {

      // DOO-2021: Show text link for accessability
      $content .= '<div class="messages views-system-message status info alternative">' . t('<p><a href="http://www.helsinki.fi/teknos/opetustilat/index.htm">Learn more about the classrooms accessibility and facilities (in Finnish)</a></p>') . '</div>';

      // DOO-706: When user is staff, let them know that information comes from
      // Oodi.
      if (uh_coursepages_has_staff_role()) {
        $content .= '<div class="messages views-system-message status alternative"><p>' . t('These events are imported from WebOodi') . '</p></div>';
      }

      // Table header
      $content .= '<span class="event-list-header">';
      $content .= '<span class="event-column"><span class="field accordion-content-item--label event-date">' . t('Date') . '</span><span class="field accordion-content-item--label event-time">' . t('Time') . '</span></span>';
      $content .= '<span class="event-column"><span class="field remove-styles accordion-content-item--label event-location">' . t('Location') . '</span></span>';
      $content .= '</span>';

      // Table contents
      foreach ($events as $event) {

        // JSON events datetimes are provided as Zulu timezone but we want to
        // convert them to local timezone.
        $from_timezone = new DateTimeZone('Etc/Zulu');
        $to_timzone = new DateTimeZone('Europe/Helsinki');

        // Create date objects out from start/end dates
        $begin_date = new DateTime($event->start_date, $from_timezone);
        $begin_date->setTimezone($to_timzone);

        $date = format_date($begin_date->getTimestamp(), 'custom', 'D j.n.Y');
        $time = $begin_date->format('H:i');
        if ($event->event_duration > 0) {
          $end_date = new DateTime($event->start_date, $from_timezone);
          $end_date->setTimezone($to_timzone);
          $end_date->modify('+' . $event->event_duration . ' minutes');
          $time = $begin_date->format('H:i') . ' - ' . $end_date->format('H:i');
        }

        // Location is an combination of building name and street address link
        $location = '';
        if (!empty($event->room_name_short)) {
          $location = check_plain($event->room_name_short);
        }

        // Build the maps link
        if (!empty($event->building_address1)) {
          $path = 'https://www.google.fi/maps/place/' . $event->building_address1;
          if (!empty($event->building_zipcode)) {
            $path .= ', ' . $event->building_zipcode;
          }
          $location .= ', ' . l($event->building_address1, $path);
        }

        $content .= '<div class="event">';
        $content .= '<div class="event-column"><div class="field event-date">' . $date . '</div><div class="field event-time">' . $time . '</div></div>';
        $content .= '<div class="event-column"><div class="field remove-styles event-location">' . $location . '</div></div>';
        $content .= '</div>';
      }
      $content .= '</div>';

      return $title . $content;
    }
  }
  return '';
}

/**
 * Implements hook_preprocess_block().
 */
function uhc_event_preprocess_block(&$variables) {
  $block = $variables['block'];
  if ($block->module == 'views' && $block->delta == 'course_event_references-block') {

    // Get the course implementation node
    $node = menu_get_object();

    // Check if we have a custom title for the events listing and use it
    if (!empty($node->field_imp_events_title)) {
      $block->subject = $node->field_imp_events_title[LANGUAGE_NONE][0]['value'];
    }

    // Set accordion classes when we have events from both sources
    if(uhc_event_has_events_from_both_sources($node)) {

      // Disable contextual links, as they break our accordion. Add classes to enable accordion.
      unset($variables['title_suffix']['contextual_links']);
      $variables['title_attributes_array']['class'][] = 'accordion-item__light ds-teaser-accordion--title';
      $variables['content_attributes_array']['class'][] = 'field-group-accordion-item';

    }
    else {
      //lets hide the title if no accordion is needed
       $variables['title_attributes_array']['class'][] = 'element-invisible';
    }

  }
}

/**
 * Helper function for determining whether given node has events from oodi JSON
 * and from Drupal content.
 * @param $node
 * @return bool
 */
function uhc_event_has_events_from_both_sources($node) {
  $field_imp_reference_to_events = field_get_items('node', $node, 'field_imp_reference_to_events');
  $field_imp_events_json = field_get_items('node', $node, 'field_imp_events_json');
  return !empty($field_imp_reference_to_events) && !empty($field_imp_events_json);
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Add timepicker js to event inline entity form. Deny access to location edit
 * form.
 */
function uhc_event_field_widget_form_alter(&$element, &$form_state, $context) {
  if ($context['instance']['entity_type'] == 'node' && $context['instance']['bundle'] == 'event') {
    if ($context['instance']['field_name'] == 'field_event_begin_date') {
      $element['#attached']['js'][] = libraries_get_path('wvega-timepicker') . '/jquery.timepicker.js';
      $element['#attached']['js'][] = drupal_get_path('module', 'uhc_event') . '/js/duration_picker.js';
    }
    elseif ($context['instance']['field_name'] == 'field_event_location') {
      // See ticket DOO-1507
      $element['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_ajax_render_alter().
 * trigger timepicker when we have datepopup.
 */
function uhc_event_ajax_render_alter(&$commands) {
  foreach ($commands as $command) {
    if(isset($command['settings']['datePopup'])) {
      $commands[] = array('command' => 'timepickerinit');
    }
  }
}
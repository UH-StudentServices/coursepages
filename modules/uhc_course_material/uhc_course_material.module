<?php
/**
 * @file
 * Code for the UHC Course material feature.
 *
 * @license GPL, or GNU General Public License, version 3
 * @license http://opensource.org/licenses/GPL-3.0
 * @see README.md how to contribute to this project
 */

include_once 'uhc_course_material.features.inc';

/**
 * Implements hook_entity_property_info().
 *
 * Introduce an reverse reference link between "course_material" node type and
 * "course_implementation" node type.
 */
function uhc_course_material_entity_property_info() {
  $info = array();
  $properties = &$info['node']['bundles']['course_material']['properties'];
  $properties['course_implementation_node'] = array(
    'label' => t("Course implementation node"),
    'type' => 'node',
    'description' => t("Reverse reference back to course implementation."),
    'getter callback' => 'uhc_course_material_entity_property_course_implementation_node',
  );
  return $info;
}

/**
 * Entity property callback for [node:course_implementation_node].
 */
function uhc_course_material_entity_property_course_implementation_node($data, array $options, $name, $type, $info) {
  if ($info['name'] == 'course_implementation_node') {
    $nid = NULL;
    $node = $data;

    // Because we may reference this node from several different ways, we gather
    // here set of callbacks which tries to resolve node id of course
    // implementation.
    $callbacks = array(
      '_uhc_course_material_resolve_nid_from_course_material',
      '_uhc_course_material_resolve_nid_from_course_task',
    );
    foreach ($callbacks as $callback) {
      if (function_exists($callback)) {
        $nid = $callback($node);
        if ($nid) {
          // Nice, we got now an resolved nid
          break;
        }
      }
    }

    return !is_null($nid) ? node_load($nid) : NULL;

  }
  return NULL;
}

/**
 * Implements hook_node_view().
 *
 * We have not implemented material view page. Instead we redirect to its
 * corresponding course implementation where this material information gets
 * displayed.
 */
function uhc_course_material_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'course_material' && uh_coursepages_is_node_page($node, $view_mode)) {

    // Because we may reference this node from several different ways, we gather
    // here set of callbacks which tries to resolve node id of course
    // implementation.
    $callbacks = array(
      '_uhc_course_material_resolve_nid_from_course_material',
      '_uhc_course_material_resolve_nid_from_course_task',
    );
    $nid = NULL;
    foreach ($callbacks as $callback) {
      if (function_exists($callback)) {
        $nid = $callback($node);
        if ($nid) {
          // Nice, we got now an resolved nid
          break;
        }
      }
    }

    // If we have resolved an node id, let's redirect to it
    if ($nid) {
      $course_implementation_node = node_load($nid);
      $entity_uri = entity_uri('node', $course_implementation_node);
      drupal_goto($entity_uri['path']);
    }
    else {
      /* Lets log this, because we should be able to resolve this. Maybe field
       * names have changed or new references has been added?
       *
       * Also, if you get lots of these, it might be also that some of the
       * entities in between has been removed or references have been removed.
       *
       * Maybe field reference some clean up could be useful?
       */
      watchdog('uhc_course_material', 'Could not figure out course implemenation for material with nid %nid', array('%nid' => $node->nid), WATCHDOG_WARNING);
    }
  }
}

/**
 * One of course implementation node id resolver callback. This should cover
 * cases where we reference materials from course implementations
 *
 * @param $node
 * @return int|null
 */
function _uhc_course_material_resolve_nid_from_course_material($node) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'course_implementation')
    ->fieldCondition('field_section_material', 'target_id', $node->nid);
  $course_implementation_results = $query->execute();
  if (isset($course_implementation_results['node']) && count($course_implementation_results['node']) == 1) {
    $course_implementation = array_shift($course_implementation_results['node']);
    return $course_implementation->nid;
  }

  return NULL;
}

/**
 * One of course implementation node id resolver callback. This should cover
 * cases where we reference materials from course tasks.
 *
 * @param $node
 * @return int|null
 */
function _uhc_course_material_resolve_nid_from_course_task($node) {
  // We require uhc_course_tasks_and_material module's helper function to be
  // available for resolving course implementation reference from course task.
  if (!function_exists('uhc_course_tasks_and_material_resolve_referencing_course_implementation')) {
    return NULL;
  }

  // First resolve which course task is referencing to this material
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'course_task')
    ->fieldCondition('field_event_ref_to_material', 'target_id', $node->nid);
  $course_tasks_results = $query->execute();
  if (isset($course_tasks_results['node']) && count($course_tasks_results['node']) == 1) {
    $course_task = array_shift($course_tasks_results['node']);
    $course_task->nid;
  }

  // Then if we found course task, then we should be able to resolve course
  // implementation node id too.
  if (isset($course_task->nid)) {
    return uhc_course_tasks_and_material_resolve_referencing_course_implementation(node_load($course_task->nid));
  }

  return NULL;
}

/**
 * Implements hook_inline_entity_form_table_fields_alter().
 * Remove status column, add "Filename", "Section" and "Restricted" columns.
 */
function uhc_course_material_inline_entity_form_table_fields_alter(&$fields, $context) {
  if (in_array('course_material', $context['allowed_bundles'])) {
    unset($fields['status'], $fields['title']);
    $fields['field_material_title'] = array(
      'type' => 'callback',
      'render_callback' => 'uhc_course_material_table_merge_file_and_link',
      'label' =>  t('Material'),
      'weight' => 97,
    );
    $fields['field_material_section'] = array(
      'type' => 'field',
      'label' => t('Section'),
      'weight' => 99,
    );
    $fields['field_private'] = array(
      'type' => 'property',
      'label' => t('Restricted'),
      'weight' => 100,
    );
  }
}

/**
 * If material file is set, use it as title. if not, use material link.
 */
function uhc_course_material_table_merge_file_and_link($entity_type, $entity) {
  $file = field_view_field($entity_type, $entity, 'field_material_file', array('label' => 'hidden'));
  $link = field_view_field($entity_type, $entity, 'field_material_link', array('label' => 'hidden'));
  return $file ? render($file) : render($link);
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 *
 * Show specific fields in material inline entity form depending on what button was clicked to access it.
 *
 * In case we are adding material to tasks, hide field_material_section
 * as it is not used.
 */
function uhc_course_material_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ($entity_form['#bundle'] == 'course_material') {
    $entity_form['status']['#access'] = FALSE;

    // we add the node title automatically
    $entity_form['title']['#access'] = FALSE;
    $entity_form['#element_validate'][] = 'uhc_course_material_inline_entity_form_entity_form_validate';

    // if file added then hide link and vice versa
    $has_file = field_get_items('node', $entity_form['#entity'], 'field_material_file');
    $has_link = field_get_items('node', $entity_form['#entity'], 'field_material_link');
    $entity_form['field_material_link']['#access'] = $has_file ? FALSE : TRUE;
    $entity_form['field_material_file']['#access'] = $has_link ? FALSE : TRUE;

    // if node formed accessed with add file, clean up form accordingly
    if (strpos($form_state['clicked_button']['#id'], 'add-material-file') !== false) {
      $relevant_field = 'field_material_file';
      uhc_course_material_clean_form($entity_form, $form_state, $relevant_field, 'field_material_link');
    }
    // if node formed accessed with add link, clean up form accordingly
    if (strpos($form_state['clicked_button']['#id'], 'add-material-link') !== false) {
      $relevant_field = 'field_material_link';
      uhc_course_material_clean_form($entity_form, $form_state, $relevant_field, 'field_material_file');
    }
  }

  if ($entity_form['#parents'][0] == 'field_reference_to_course_tasks' && isset($entity_form['field_material_section'])) {
    $entity_form['field_material_section']['#access'] = FALSE;
  }
  if ($entity_form['#bundle'] == 'course_material') {
    // TODO: Refactor material form for better usability. Disabled Finna links until then
    $entity_form['field_material_publication_year']['#access'] = FALSE;
    $entity_form['field_material_show_finna_link']['#access'] = FALSE;
    //$entity_form['#element_validate'][] = 'uhc_course_material_publication_year_validate';
  }
}

/**
 * Clean up material node form. We want it as simple as possible when initially
 * adding a file/link. Hide label. Change form title to same as clicked button.
 * Hide non-relevant field, Make relevant field required.
 */
function uhc_course_material_clean_form(&$entity_form, $form_state, $relevant_field, $hidden_field) {
  $entity_form[$relevant_field][LANGUAGE_NONE][0]['#title_display'] = 'invisible';
  $entity_form['#title'] = $form_state['clicked_button']['#value'];
  //$entity_form['actions']['ief_add_save']['#value'] = $form_state['clicked_button']['#value'];
  $entity_form[$relevant_field][LANGUAGE_NONE][0]['#required'] = TRUE;
  $entity_form[$hidden_field]['#access'] = FALSE;
}

/**
 * Set material node title as file name/description or link title/url
 */
function uhc_course_material_inline_entity_form_entity_form_validate(&$entity_form, &$form_state) {
  // Were trying to figure out the title from various sources: if link url exists, try the link title or fallback
  // to link url. if file name exists, try file description or fallback to file name.

  if (!empty($entity_form['field_material_link'][LANGUAGE_NONE][0]['#value']['url'])) {
    $title = !empty($entity_form['field_material_link'][LANGUAGE_NONE][0]['#value']['title']) ?
      $entity_form['field_material_link'][LANGUAGE_NONE][0]['#value']['title'] :
      $entity_form['field_material_link'][LANGUAGE_NONE][0]['#value']['url'];
  }
  else if (!empty($entity_form['field_material_file'][LANGUAGE_NONE][0]['#file']->filename)) {
    $title = !empty($entity_form['field_material_file'][LANGUAGE_NONE][0]['description']['#value']) ?
      $entity_form['field_material_file'][LANGUAGE_NONE][0]['description']['#value'] :
      $entity_form['field_material_file'][LANGUAGE_NONE][0]['#file']->filename;
  }
  else {
    $title = 'Untitled material';
  }

  form_set_value($entity_form['title'], $title, $form_state);
  inline_entity_form_entity_form_validate($entity_form, $form_state);
}

/**
 * Implements hook_field_widget_form_alter().
 * create new buttons for add file and add link. we check which button is clicked in
 * uhc_course_material_inline_entity_form_entity_form_alter() and show only relevant fields accordingly.
 */
function uhc_course_material_field_widget_form_alter(&$element, &$form_state, $context) {
  if ($context['instance']['entity_type'] == 'node' &&
      in_array($context['instance']['bundle'], array('course_implementation', 'course_task')) &&
      in_array($context['instance']['field_name'], array('field_section_material', 'field_event_ref_to_material'))) {

    $prefix = $context['instance']['field_name'];
    $ief_id = $element['#ief_id'];
    if (empty($form_state['inline_entity_form'][$ief_id]['form']) && !empty($element['actions']['ief_add'])) {
      $element['actions'][$prefix . '_add_material_link'] = $element['actions']['ief_add'];
      $element['actions'][$prefix . '_add_material_link']['#value'] = t('Add link');
      $element['actions'][$prefix . '_add_material_link']['#name'] = $prefix . '_add_material_link';

      $element['actions'][$prefix . '_add_material_file'] = $element['actions']['ief_add'];
      $element['actions'][$prefix . '_add_material_file']['#value'] = t('Add file');
      $element['actions'][$prefix . '_add_material_file']['#name'] = $prefix . '_add_material_link';

      // remove original material add button
      unset($element['actions']['ief_add']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Add js to guide users to add more detailed information with the edit link.
 * See uhc_course_material_ajax_render_alter().
 */
function uhc_course_material_form_node_form_alter(&$form, &$form_state, $form_id) {
  $material_edit_text = t('You can add more detailed information to your material with the edit-link');
  $material_edit_message = '<div class="messages alternative warning"><p>' . $material_edit_text . '</p></div>';

  if ($form_id == 'course_implementation_node_form') {
    $form['#attached']['js'][] = drupal_get_path('module', 'uhc_course_material') . '/js/material_edit_instructions.js';
    $form['#attached']['js'][] = array(
      'type' => 'setting',
      'data' => array(
        'uhc_course_material' => array(
          'material_edit_instructions' => $material_edit_message,
        ),
      ),
    );
  }
}

/**
 * Implements hook_ajax_render_alter().
 * when we add new material, guide users to add more detailed information with the edit link.
 */
function uhc_course_material_ajax_render_alter(&$commands) {
  foreach ($commands as $command) {
    if(isset($command['settings']['tableDrag']['ief-entity-table-edit-field-section-material-und-entities'])) {
      $commands[] = array('command' => 'materialEditInstructions');
    }
  }
}

/**
 * Validates that the publication year is entered and is in correct format when
 * the material is a link to Finna.
 */
function uhc_course_material_publication_year_validate($form, &$form_state) {
  /* TODO: Fix if we ever start using it. right now it's broken and is the cause for DOO-2393
  $ief = &$form_state['values']['field_section_material'][LANGUAGE_NONE]['form'];
  if (!$ief) {
    // This is an edit form so the IEF structure is completely different. Find the IEF form
    // array.
    $ief = &$form_state['values']['field_section_material'][LANGUAGE_NONE]['entities'];
    foreach ($ief as $entity) {
      if (isset($entity['form'])) {
        $ief = $entity['form'];
        break;
      }
    }
  }
  $enable_link = $ief['field_material_show_finna_link'][LANGUAGE_NONE][0]['value'];
  $year = $ief['field_material_publication_year'][LANGUAGE_NONE][0]['value'];
  if ($enable_link && !$year) {
    form_error($form, t('The publication year is required when the material is a Finna link.'));
  }
  if ($year && is_numeric($year) && strlen((string)$year) != 4) {
    form_error($form, t('The publication year must be entered in YYYY format.'));
  }
  */
}

/**
 * Implements hook_node_view_alter(). Remove contextual links from course materials.
 */
function uhc_course_material_node_view_alter(&$variables) {
  if (isset($variables['#node'])) {
    $node = $variables['#node'];
    if ($node->type == 'course_material') {
      unset($variables['#contextual_links']);
    }
  }
}

/**
 * Implements hook_file_validate().
 *
 * Generates an error if the course implementation already has a file with the
 * same name as the validated file.
 */
function uhc_course_material_file_validate($file) {
  $errors = array();

  $validate = !empty($_REQUEST['form_id'])
    && !empty($_SESSION['og_context']['gid'])
    && $_REQUEST['form_id'] == 'course_implementation_node_form';

  if ($validate) {
    $course_implementation_id = $_SESSION['og_context']['gid'];
    $course_implementation_node = node_load($course_implementation_id);
    $file_names = uhc_course_material_get_file_names($course_implementation_node);

    if (in_array($file->filename, $file_names)) {
      $errors[] = t('The file "@file" already exists and was not uploaded.', array('@file' => $file->filename));
    }
  }

  return $errors;
}

/**
 * Returns all file names from files related to the given course implementation
 * node.
 *
 * @param $course_implementation_node object Course implemantation node.
 * @return array File names.
 */
function uhc_course_material_get_file_names($course_implementation_node) {
  $file_names = array();
  $field_items = field_get_items('node', $course_implementation_node, 'field_section_material');

  if (!empty($field_items)) {
    $material_node_ids = array();

    foreach ($field_items as $field_item) {
      $material_node_ids[] = $field_item['target_id'];
    }

    if (!empty($material_node_ids)) {
      $material_nodes = node_load_multiple($material_node_ids);

      foreach ($material_nodes as $material_node) {
        $file_name = !empty($material_node->field_material_file[LANGUAGE_NONE][0]['filename'])
          ? $material_node->field_material_file[LANGUAGE_NONE][0]['filename']
          : '';

        if (!empty($file_name)) {
          $file_names[] = $file_name;
        }
      }
    }
  }

  return $file_names;
}

<?php
/**
 * @file
 * Drupal module implementation.
 *
 * @license GPL, or GNU General Public License, version 3
 * @license http://opensource.org/licenses/GPL-3.0
 * @see README.md how to contribute to this project
 */

/**
 * Implements hook_menu_alter().
 */
function uhc_course_implementation_source_menu_alter(&$items) {
  if ($items['node/add/course-implementation']) {
    $items['node/add/course-implementation']['page callback'] = 'drupal_get_form';
    $items['node/add/course-implementation']['page arguments'] = array('uhc_course_implementation_source_add_course_implementation');
    $items['node/add/course-implementation']['module'] = 'uhc_course_implementation_source';
    unset($items['node/add/course-implementation']['file']);
  }
}

/**
 * Menu callback for starting importing specified course implementation.
 */
function uhc_course_implementation_source_add_course_implementation() {
  return array(
    'container' => array(
      '#type' => 'fieldset',
      '#title' => t('Course implementation'),
      '#description' => t('Type in the course id which you want to import.'),
      'course_imp_id' => array('#type' => 'textfield', '#title' => t('Course implementation ID'), '#required' => TRUE, '#size' => 10),
    ),
    'submit' => array('#type' => 'submit', '#value' => t('Import')),
  );
}

/**
 * Validation callback for
 * uhc_course_implementation_source_add_course_implementation()
 * @param $form
 * @param $form_state
 */
function uhc_course_implementation_source_add_course_implementation_validate(&$form, &$form_state) {

  // Ensure that course implementation json object can be fetched
  $course_imp_id = $form_state['values']['course_imp_id'];
  $course_imp_json = _uhc_sources_get_json_object($course_imp_id);
  if (!$course_imp_json) {
    form_set_error('course_imp_id', t('Failed to fetch'));
  }

  // Resolve course number, so we know that which course we need to import too
  if (!$course_number = _uhc_sources_resolve_course_number($course_imp_id)) {
    form_set_error('course_imp_id', t('Could not resolve course number from course implementation id'));
  }
  $form_state['values']['course_number'] = $course_number;

}

/**
 * Submission callback for
 * uhc_course_implementation_source_add_course_implementation()
 * @param $form
 * @param $form_state
 */
function uhc_course_implementation_source_add_course_implementation_submit(&$form, &$form_state) {

  $course_imp_id = $form_state['values']['course_imp_id'];
  $course_number = $form_state['values']['course_number'];

  // Now ensure that course node exists. If it fails, then log and return
  // FALSE.
  if (!$course_node = uhc_course_source_import($course_number)) {
    watchdog('uhc_course_implementation_sources', 'Failed to ensure @course_number course presence.', array('@course_number' => $course_number), WATCHDOG_ERROR);
    drupal_set_message(t('Could not import course'), 'error');
    return;
  }

  // After we have ensured that we have referenced entity in the system we may
  // now import course implementation.
  if (!$node = uhc_course_implementation_source_import($course_imp_id)) {
    watchdog('uhc_course_implementation_sources', 'Failed to import @course_imp_id course implementation.', array('@course_imp_id' => $course_imp_id), WATCHDOG_ERROR);
    drupal_set_message(t('Could not import course implementation'), 'error');
    return;
  }

  $entity_uri = entity_uri('node', $node);
  if (!empty($entity_uri['path'])) {
    drupal_goto($entity_uri['path']);
  }
  else {
    drupal_set_message(t('Could import node, but could not find path to redirect.'));
  }
}

/**
 * Implements hook_uhc_activemq_connector_message_processor_info().
 */
function uhc_course_implementation_source_uhc_activemq_connector_message_processor_info() {
  $default_queue_name = variable_get('uhc_activemq_connector_default_queue', 'doo.local1.kurssisivu.in');
  return array(
    $default_queue_name => array(
      array('class_name' => 'UHCCourseImplementationMessageProcessor', 'implements' => 'UHCMessageQueueProcessorInterface')
    ),
  );
}

/**
 * Imports a course implementation by the given ID whether or not it exists in
 * the system.
 *
 * @param $course_imp_id
 *   The ID of the course implementation to import.
 * @return bool|object
 *   Returns FALSE if failed to import. Node object when successfully imported.
 */
function uhc_course_implementation_source_import($course_imp_id) {

  // Construct the URLs for source class
  $item_url = variable_get('uhc_course_implementation_source_item_url', '');
  $item_url = PortalMigrationBase::prependHostIfMissing($item_url);

  /** @var $migration CourseImplementationNodeMigration */
  $migration = new CourseImplementationNodeMigration(array('predefined_ids' => array($course_imp_id), 'predefined_item' => $item_url));
  $migration->prepareUpdate();
  $result = $migration->processImport();
  if ($result == Migration::RESULT_COMPLETED) {

    // Use EntityFieldQuery to find out the node id. Then load and return it.
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'course_implementation')
      ->fieldCondition('field_imp_id', 'value', $course_imp_id)
      ->execute();
    if (isset($result['node'])) {
      foreach ($result['node'] as $nid => $item) {
        return node_load($nid);
      }
    }
    else {
      watchdog('uhc_course_implementation_source', 'Node with course implementation id @course_imp_id was imported but could not be loaded.', array('@course_imp_id' => $course_imp_id), WATCHDOG_ERROR);
      return FALSE;
    }

  }
  else {
    watchdog('uhc_course_implementation_source', 'Failed to process importing, migration returned "@result" as result.', array('@result' => $result), WATCHDOG_ERROR);
    return FALSE;
  }

}

/**
 * Deletes an course implementation item together with the Migrate mapping.
 * @param $id
 * @return bool
 * @see drush_uhc_sources_uhc_process_queue()
 */
function _uhc_course_implementation_source_delete_item($id) {
  // Utilize MigrateSQLMap class for resolving mapping from given ID
  $map = new MigrateSQLMap('CourseImplementationNode', array('id'), array('nid'));
  if ($row = $map->getRowBySource(array($id))) {

    // After following treatment, we'll not end up having mapping row anymore
    // after this.
    $map->delete(array($id));

    // If it was in the system before, but has been deleted in Drupal by other
    // means. We just leave log entry in this case (and clean it up).
    if (empty($row['destid1'])) {
      watchdog('uhc_course_implementation_source', 'Resolved ID @id during queue deletion worker process, but no destination was found. Mapping row was deleted.', array('@id' => $id), WATCHDOG_WARNING);
      return FALSE;
    }

    watchdog('uhc_course_implementation_source', 'Deleting node @nid which was resolved from id @id (and mapping row will be deleted)', array('@nid' => $row['destid1'], '@id' => $row['sourceid1']), WATCHDOG_INFO);
    node_delete($row['destid1']);
    return TRUE;
  }
  else {
    // We hit here when we can't find corresponding node for given ID. Can
    // happen if something very old was deleted or it couldn't have a chance to
    // get imported in the first place.
    watchdog('uhc_course_implementation_source', 'Failed resolving ID @id during queue deletion worker process. Nothing was done (queue item will be deleted).', array('@id' => $id), WATCHDOG_INFO);
  }
  return FALSE;
}

/**
 * Processes batch if UHQueueItem objects that should be imported through
 * migrate.
 * @param array $items
 * @see drush_uhc_sources_uhc_process_queue()
 */
function _uhc_course_implementation_source_process_update_batch($items) {
  $ids = array();
  /** @var UHOodiQueueItem $item */
  foreach ($items as $item) {
    $ids[] = $item->getId();
  }

  // Construct the URLs for source class
  $item_url = variable_get('uhc_course_implementation_source_item_url', '');
  $item_url = PortalMigrationBase::prependHostIfMissing($item_url);

  /** @var $migration CourseImplementationNodeMigration */
  $migration = new CourseImplementationNodeMigration(array('predefined_ids' => $ids, 'predefined_item' => $item_url));
  $migration->prepareUpdate();
  $result = $migration->processImport();
  if ($result != Migration::RESULT_COMPLETED) {
    watchdog('uhc_course_implementation_source', 'Migration for update batch has failed', array(), WATCHDOG_ERROR);
  }
}

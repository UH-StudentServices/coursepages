<?php
/**
 * @file
 * Drupal module implementation.
 *
 * @license GPL, or GNU General Public License, version 3
 * @license http://opensource.org/licenses/GPL-3.0
 * @see README.md how to contribute to this project
 */

/**
 * Implements hook_menu_alter().
 */
function uhc_course_implementation_source_menu_alter(&$items) {
  if ($items['node/add/course-implementation']) {
    $items['node/add/course-implementation']['page callback'] = 'drupal_get_form';
    $items['node/add/course-implementation']['page arguments'] = array('uhc_course_implementation_source_add_course_implementation');
    $items['node/add/course-implementation']['module'] = 'uhc_course_implementation_source';
    unset($items['node/add/course-implementation']['file']);
  }
}

/**
 * Menu callback for starting importing specified course implementation.
 */
function uhc_course_implementation_source_add_course_implementation() {
  return array(
    'container' => array(
      '#type' => 'fieldset',
      '#title' => t('Course implementation'),
      '#description' => t('Type in the course id which you want to queue for import.'),
      'course_imp_id' => array('#type' => 'textfield', '#title' => t('Course implementation ID'), '#required' => TRUE, '#size' => 10),
    ),
    'submit' => array('#type' => 'submit', '#value' => t('Import')),
  );
}

/**
 * Validation callback for
 * uhc_course_implementation_source_add_course_implementation()
 * @param $form
 * @param $form_state
 */
function uhc_course_implementation_source_add_course_implementation_validate(&$form, &$form_state) {

  // Ensure that course implementation json object can be fetched
  $course_imp_id = $form_state['values']['course_imp_id'];
  $course_imp_json = _uhc_sources_get_json_object($course_imp_id);
  if (!$course_imp_json) {
    form_set_error('course_imp_id', t('Failed to fetch'));
  }

}

/**
 * Submission callback for
 * uhc_course_implementation_source_add_course_implementation()
 * @param $form
 * @param $form_state
 */
function uhc_course_implementation_source_add_course_implementation_submit(&$form, &$form_state) {

  $course_imp_id = $form_state['values']['course_imp_id'];

  // Queue this item for import
  if (!uhc_course_implementation_source_queue($course_imp_id)) {
    watchdog('uhc_course_implementation_sources', 'Failed to queue @course_imp_id course implementation.', array('@course_imp_id' => $course_imp_id), WATCHDOG_ERROR);
    drupal_set_message(t('Could not queue course implementation'), 'error');
    return;
  }

  drupal_set_message(t('The page will be created/updated soon (within @expected_duration)', array('@expected_duration' => variable_get('uhc_sources_expected_duration', '10 min'))));
}

/**
 * Queues a course implementation by the given ID.
 *
 * @param $course_imp_id
 *   The ID of the course implementation to queue.
 * @return bool
 *   Returns FALSE if failed to queue. TRUE if it succeeds.
 */
function uhc_course_implementation_source_queue($course_imp_id) {
  $queue = new UHOodiQueue(UHOodiQueue::PRIORITY_HIGH);
  $item = array(
    'action' => 'update',
    'entityType' => 'courseunitrealisation',
    'entityId' => $course_imp_id,
  );
  return $queue->createItem($item);
}

/**
 * Deletes an course implementation item together with the Migrate mapping.
 * @param $id
 * @return bool
 * @see drush_uhc_sources_uhc_process_queue()
 */
function _uhc_course_implementation_source_delete_item($id) {
  // Utilize MigrateSQLMap class for resolving mapping from given ID
  $map = new MigrateSQLMap('CourseImplementationNode', array('id'), array('nid'));
  if ($row = $map->getRowBySource(array($id))) {

    // After following treatment, we'll not end up having mapping row anymore
    // after this.
    $map->delete(array($id));

    // If it was in the system before, but has been deleted in Drupal by other
    // means. We just leave log entry in this case (and clean it up).
    if (empty($row['destid1'])) {
      watchdog('uhc_course_implementation_source', 'Resolved ID @id during queue deletion worker process, but no destination was found. Mapping row was deleted.', array('@id' => $id), WATCHDOG_WARNING);
      return FALSE;
    }

    watchdog('uhc_course_implementation_source', 'Deleting node @nid which was resolved from id @id (and mapping row will be deleted)', array('@nid' => $row['destid1'], '@id' => $row['sourceid1']), WATCHDOG_INFO);
    node_delete($row['destid1']);
    return TRUE;
  }
  else {
    // We hit here when we can't find corresponding node for given ID. Can
    // happen if something very old was deleted or it couldn't have a chance to
    // get imported in the first place.
    watchdog('uhc_course_implementation_source', 'Failed resolving ID @id during queue deletion worker process. Nothing was done (queue item will be deleted).', array('@id' => $id), WATCHDOG_INFO);
  }
  return FALSE;
}

/**
 * Processes batch if UHQueueItem objects that should be imported through
 * migrate.
 * @param array $items
 * @see drush_uhc_sources_uhc_process_queue()
 */
function _uhc_course_implementation_source_process_update_batch($items) {
  $ids = array();
  /** @var UHOodiQueueItem $item */
  foreach ($items as $item) {
    $ids[] = $item->getId();
  }

  // Construct the URLs for source class
  $item_url = variable_get('uhc_course_implementation_source_item_url', '');
  $item_url = PortalMigrationBase::prependHostIfMissing($item_url);

  /** @var $migration CourseImplementationNodeMigration */
  $migration = new CourseImplementationNodeMigration(array('predefined_ids' => $ids, 'predefined_item' => $item_url));
  $migration->prepareUpdate();
  $result = $migration->processImport();
  if ($result != Migration::RESULT_COMPLETED) {
    watchdog('uhc_course_implementation_source', 'Migration for course implementations did not complete (status @status)', array('@status' => $result), WATCHDOG_ERROR);
    return FALSE;
  }
  return TRUE;
}

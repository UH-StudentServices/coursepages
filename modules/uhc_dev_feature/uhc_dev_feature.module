<?php
/**
 * @file
 * Code for the UHC Dev feature feature.
 *
 * @license GPL, or GNU General Public License, version 3
 * @license http://opensource.org/licenses/GPL-3.0
 * @see README.md how to contribute to this project
 */

include_once 'uhc_dev_feature.features.inc';

/**
 * Implements hook_permission().
 */
function uhc_dev_feature_permission() {
  return array(
    'test integration requests' => array(
      'title' => t('Test integration requests'),
      'description' => t('Allows user to request integration through testing paths'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function uhc_dev_feature_menu() {
  $items['test/course'] = array(
    'page callback' => '_uhc_dev_feature_integration_get_course',
    'delivery callback' => 'drupal_json_output',
    'access arguments' => array('test integration requests'),
  );
  $items['test/course/changes'] = array(
    'page callback' => '_uhc_dev_feature_integration_get_course_changes',
    'delivery callback' => 'drupal_json_output',
    'access arguments' => array('test integration requests'),
  );
  $items['test/enrollments'] = array(
    'page callback' => '_uhc_dev_feature_integration_get_enrollments',
    'delivery callback' => 'drupal_json_output',
    'access arguments' => array('test integration requests'),
  );
  $items['test/implementation'] = array(
    'page callback' => '_uhc_dev_feature_integration_get_course_implementation',
    'delivery callback' => 'drupal_json_output',
    'access arguments' => array('test integration requests'),
  );
  $items['test/implementation/changes'] = array(
    'page callback' => '_uhc_dev_feature_integration_get_course_implementation_changes',
    'delivery callback' => 'drupal_json_output',
    'access arguments' => array('test integration requests'),
  );
  $items['test/queue'] = array(
    'page callback' => '_uhc_dev_feature_get_queue',
    'delivery callback' => 'drupal_json_output',
    'access arguments' => array('test integration requests'),
  );
  $items['test/teacher/modifyrights'] = array(
    'page callback' => '_uhc_dev_feature_integration_get_teacher_modify_rights',
    'delivery callback' => 'drupal_json_output',
    'access arguments' => array('test integration requests'),
  );

  return $items;
}

function _uhc_dev_feature_integration_get_course($id) {
  $url = variable_get('uhc_course_source_item_url', '');
  $url = str_replace(':id', check_plain($id), $url);
  $url = PortalMigrationBase::prependHostIfMissing($url);
  return _uhc_dev_feature_return_json_response($url);
}

function _uhc_dev_feature_integration_get_course_changes($since_date) {
  $url = variable_get('uh_oodi_queue_poll_learningopportunity_changes_url', '');
  $url = str_replace(':since_date', check_plain($since_date), $url);
  return _uhc_dev_feature_return_json_response($url);
}

function _uhc_dev_feature_integration_get_course_implementation($id) {
  $url = variable_get('uhc_course_implementation_source_item_url', '');
  $url = str_replace(':id', check_plain($id), $url);
  $url = PortalMigrationBase::prependHostIfMissing($url);
  return _uhc_dev_feature_return_json_response($url);
}

function _uhc_dev_feature_integration_get_course_implementation_changes($since_date) {
  $url = variable_get('uh_oodi_queue_poll_courseunitrealisation_changes_url', '');
  $url = str_replace(':since_date', check_plain($since_date), $url);
  return _uhc_dev_feature_return_json_response($url);
}

function _uhc_dev_feature_integration_get_enrollments($id) {
  $url = variable_get('uhc_enrollments_base_url', '') . 'students/:id/enrollments';
  $url = str_replace(':id', check_plain($id), $url);
  $url = PortalMigrationBase::prependHostIfMissing($url);
  return _uhc_dev_feature_return_json_response($url);
}

function _uhc_dev_feature_integration_get_teacher_modify_rights($email) {
  $url = variable_get('uhc_organisation_modify_rights_base_url', '');
  $url .= 'teachers/:email/modifyrights';
  $url = str_replace(':email', check_plain($email), $url);
  $url = PortalMigrationBase::prependHostIfMissing($url);
  return _uhc_dev_feature_return_json_response($url);
}

function _uhc_dev_feature_return_json_response($url) {
  return drupal_json_decode(drupal_http_request($url)->data);
}

function _uhc_dev_feature_get_queue() {
  $query = db_select('queue', 'q')->fields('q');
  $results = $query->execute();
  $queue = [];
  $queue['total'] = $results->rowCount();
  $queue['courseunitrealisations'] = [];
  $queue['learningopportunities'] = [];
  $queue['courseunitrealisation'] = [];
  $queue['learningopportunity'] = [];

  foreach ($results as $result) {

    if (!empty($result->data)) {
      $data = unserialize($result->data);

      if (isset($data['entityId'], $data['entityType'])) {
        $item = new stdClass();
        $item->id = $data['entityId'];
        $item->created = date('Y-m-d H:i:s', $result->created);
        $queue[$data['entityType']][] = $item;
      }
    }
  }

  $queue['courseunitrealisations'] = count($queue['courseunitrealisation']);
  $queue['learningopportunities'] = count($queue['learningopportunity']);

  return $queue;
}

/**
 * Get the IDs of course implementations matching the following criteria:
 *
 * - Status is published
 * - Hierarchy position is root
 * - Title contains words longer than $character_count characters
 *
 * Word delimiters: ' ', '/'
 *
 * @param int $character_count
 * @return int[] Implementation IDs
 */
function get_implementations_having_titles_containing_words_longer_than($character_count) {
  $query = db_select('field_data_title_field', 'tf');
  $query->join('field_data_field_imp_id', 'fid', 'tf.entity_id = fid.entity_id');
  $query->join('node', 'n', 'tf.entity_id = n.nid');
  $query->join('field_data_field_hierarchy_position', 'fhp', 'tf.entity_id = fhp.entity_id');
  $query->fields('tf', ['title_field_value']);
  $query->fields('fid', ['field_imp_id_value']);
  $query->condition('tf.bundle', 'course_implementation');
  $query->condition('n.status', 1);
  $query->condition('fhp.field_hierarchy_position_value', 'root');
  $query->groupBy('field_imp_id_value');
  $query->orderBy('title_field_value');

  $results = $query->execute();
  $implementation_ids = [];

  foreach ($results as $result) {
    $implementation_id = $result->field_imp_id_value;
    $title = $result->title_field_value;
    $processed_title = str_replace('/', ' ', $title);
    $words = explode(' ', $processed_title);

    foreach ($words as $word) {
      if (mb_strlen($word, 'UTF-8') > $character_count) {
        print "$implementation_id $title" . "\n";
        $implementation_ids[] = $implementation_id;
        break;
      }
    }
  }

  return $implementation_ids;
}

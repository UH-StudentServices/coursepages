<?php
/**
 * @file
 * Code for the UHC Autofill metadata feature.
 *
 * @license GPL, or GNU General Public License, version 3
 * @license http://opensource.org/licenses/GPL-3.0
 * @see README.md how to contribute to this project
 */

include_once 'uhc_autofill_metadata.features.inc';

/**
 * Implements hook_menu().
 */
function uhc_autofill_metadata_menu() {
  return array(
    'admin/config/uhc_shibboleth_metadata' => array(
      'title' => 'Shibboleth metadata',
      'description' => 'Map metadata sources to shibboleth session attributes',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('uhc_autofill_metadata_form'),
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
    ),
  );
}

/**
 * Admin settings form.
 */
function uhc_autofill_metadata_form($form, &$form_state) {
  $form['uhc_shibboleth_metadata_realname'] = array(
    '#type' => 'textfield',
    '#title' => t("User's full name"),
    '#description' => t("Enter the server attribute containing the user's full name"),
    '#size' => 40,
    '#default_value' => variable_get('uhc_shibboleth_metadata_realname', 'HTTP_CN'),
    '#maxlength' => 255,
  );
  $form['uhc_shibboleth_metadata_ou'] = array(
    '#type' => 'textfield',
    '#title' => t('Organisational unit ID'),
    '#description' => t('Enter the server attribute containing the organisational unit ID.'),
    '#size' => 40,
    '#default_value' => variable_get('uhc_shibboleth_metadata_ou', 'HTTP_OU'),
    '#maxlength' => 255,
  );
  $form['uhc_shibboleth_metadata_puc'] = array(
    '#type' => 'textfield',
    '#title' => t('Personal unique code'),
    '#description' => t('Enter the server attribute containing the personal unique code.'),
    '#size' => 40,
    '#default_value' => variable_get('uhc_shibboleth_metadata_puc', 'HTTP_PUC'),
    '#maxlength' => 255,
  );
  $form['uhc_shibboleth_metadata_en'] = array(
    '#type' => 'textfield',
    '#title' => t('Employee number'),
    '#description' => t('Enter the server attribute containing the employee number.'),
    '#size' => 40,
    '#default_value' => variable_get('uhc_shibboleth_metadata_en', 'HTTP_EN'),
    '#maxlength' => 255,
  );
  $form['uhc_shibboleth_metadata_ouid'] = array(
    '#type' => 'textfield',
    '#title' => t('Oodi UID'),
    '#description' => t('Enter the server attribute containing the Oodi UID.'),
    '#size' => 40,
    '#default_value' => variable_get('uhc_shibboleth_metadata_ouid', 'HTTP_OODIUID'),
    '#maxlength' => 255,
  );
  $form['uhc_shibboleth_metadata_require_all'] = array(
    '#type' => 'checkbox',
    '#title' => t('Require all metadata attributes'),
    '#description' => t('Uncheck this if you want to accept some attributes.'),
    '#default_value' => variable_get('uhc_shibboleth_metadata_require_all', TRUE),
  );
  $form['uhc_shibboleth_metadata_debug_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable error reporting'),
    '#default_value' => variable_get('uhc_shibboleth_metadata_debug_mode', FALSE),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_user_login().
 */
function uhc_autofill_metadata_user_login(&$edit, $account) {
  $debug_enabled = variable_get('uhc_shibboleth_metadata_debug_mode', FALSE);
  $ou_attr = variable_get('uhc_shibboleth_metadata_ou', 'HTTP_OU');
  $realname_attr = variable_get('uhc_shibboleth_metadata_realname', 'HTTP_CN');
  $puc_attr = variable_get('uhc_shibboleth_metadata_puc', 'HTTP_PUC');
  $en_attr = variable_get('uhc_shibboleth_metadata_en', 'HTTP_EN');
  $ouid_attr = variable_get('uhc_shibboleth_metadata_ouid', 'HTTP_OODIUID');

  // Depending on the setting whether we require all attributes or not, lets
  // setup statement for both cases.
  $require_all = variable_get('uhc_shibboleth_metadata_require_all', TRUE);
  $found = array(
    TRUE => array_key_exists($ou_attr, $_SERVER) && array_key_exists($realname_attr, $_SERVER),
    FALSE => array_key_exists($ou_attr, $_SERVER) || array_key_exists($realname_attr, $_SERVER),
  );

  // If partial/all attributes are not found, don't proceed further.
  if (!$found[$require_all]) {
    if ($debug_enabled) {
      drupal_set_message(t('Could not fetch Shibboleth attribute(s).'), 'error');
    }
    return;
  }

  // When organisational unit attribute found.
  if (isset($_SERVER[$ou_attr])) {
    $terms = explode(';', $_SERVER[$ou_attr]);
    $account->field_organisational_unit = array(
      LANGUAGE_NONE => array(),
    );
    foreach ($terms as $name) {
      if (!$name) {
        continue;
      }
      $term = taxonomy_get_term_by_name($name, 'organisational_units');
      if (!$term) { // Create any missing units as terms
        $term = new stdClass();
        $term->name = $name;
        $term->vid = taxonomy_vocabulary_machine_name_load('organisational_units')->vid;
        taxonomy_term_save($term);
        $account->field_organisational_unit[LANGUAGE_NONE][] = array(
          'tid' => $term->tid,
        );
      }
      else {
        $account->field_organisational_unit[LANGUAGE_NONE][] = array(
          'tid' => reset($term)->tid,
        );
      }
    }
  }

  // When real name attribute found
  if (isset($_SERVER[$realname_attr])) {
    $account->field_user_real_name = array(
      LANGUAGE_NONE => array(
        0 => array(
          'value' => $_SERVER[$realname_attr],
        ),
      ),
    );
  }

  // When personal unique code attribute found
  if (isset($_SERVER[$puc_attr])) {
    $personal_unique_code_parts = explode(':', $_SERVER[$puc_attr]);
    $personal_unique_code = array_pop($personal_unique_code_parts);

    $account->field_personal_unique_code = array(
      LANGUAGE_NONE => array(
        0 => array(
          'value' => $personal_unique_code,
        ),
      ),
    );

    $enrollments = uhc_autofill_metadata_get_enrollments($personal_unique_code);
    $account = uhc_autofill_metadata_set_enrollments($account, $enrollments);
  }

  // When employee number attribute found
  if (isset($_SERVER[$en_attr])) {
    $account->field_employee_number = array(
      LANGUAGE_NONE => array(
        0 => array(
          'value' => $_SERVER[$en_attr],
        ),
      ),
    );
  }

  // When Oodi UID attribute found
  if (isset($_SERVER[$ouid_attr])) {
    $account->field_oodi_uid = array(
      LANGUAGE_NONE => array(
        0 => array(
          'value' => $_SERVER[$ouid_attr],
        ),
      ),
    );
  }

  user_save($account);
}

/**
 * Implements hook_form_alter(). Autofill metadata fields from user fields.
 */
function uhc_autofill_metadata_form_alter(&$form, &$form_state, $form_id) {
  // Atoms
  if ($form_id == 'scald_atom_add_form_options') {
    $form_base = &$form['atom0'];
  }
  // Nodes
  elseif (!empty($form['#node_edit_form'])) {
    $form_base = &$form;
  }
  else {
    return;
  }
  global $user;
  $user_full = user_load($user->uid);
  _uhc_autofill_metadata_prefill($form_base, 'field_responsible_person', field_get_items('user', $user_full, 'field_user_real_name')[0]['value']);
  _uhc_autofill_metadata_prefill($form_base, 'field_responsible_person_email', $user->mail);
  $org_units = field_get_items('user', $user_full, 'field_organisational_unit');
  $ou_parsed = '';
  if (is_array($org_units)) {
    foreach ($org_units as $ou) {
      $term = taxonomy_term_load($ou['tid']);
      $ou_parsed .= $ou_parsed ? ', ' . $term->name : $term->name; // No trailing separator
    }
    _uhc_autofill_metadata_prefill($form_base, 'field_responsible_unit', $ou_parsed);
  }
}

/**
 * Does the heavy lifting in fetching form values from the user object
 */
function _uhc_autofill_metadata_prefill(&$form, $field, $value) {
  if (isset($form[$field])) {
    $lang = $form[$field]['#language'];
    $column = $form[$field][$lang][0]['#columns'][0];
    if (!isset($form[$field][$lang][0][$column]['#default_value'])) {
      $form[$field][$lang][0][$column]['#default_value'] = $value;
    }
  }
}

/**
 * Returns enrollment course implementation numbers for the given user
 * identified by personal unique code.
 *
 * @param $personal_unique_code string Personal unique code, typically student
 * number.
 * @return array|bool 0-n enrollments (course implementation numbers) or FALSE if
 * an error occured.
 */
function uhc_autofill_metadata_get_enrollments($personal_unique_code) {
  $enrollments = array();
  $enrollment_data = uhc_autofill_metadata_get_enrollment_data($personal_unique_code);

  if (isset($enrollment_data['status']) && $enrollment_data['status'] == 200 && !empty($enrollment_data['data'])) {
    foreach ($enrollment_data['data'] as $enrollment) {
      if (isset($enrollment['course_id'])) {
        if (uhc_autofill_metadata_is_enrollment_confirmed($enrollment)) {
          $enrollments[] = $enrollment['course_id'];
        }
      }
    }
  }

  return $enrollments;
}

/**
 * An enrollment is considered confirmed if automatic confirmation is not
 * enabled or automatic confirmation is enabled and the confirmation time is in
 * the past.
 *
 * @param array $enrollment
 * @return bool Is the enrollment confirmed?
 */
function uhc_autofill_metadata_is_enrollment_confirmed($enrollment) {
  return empty($enrollment['automatic_enabled'])
    || $enrollment['automatic_enabled'] != 'true'
    || uhc_autofill_metadata_has_enrollment_confirmation_time_passed($enrollment);
}

/**
 * Parses enrollment confirmation end time and returns whether it has passed.
 *
 * @param array $enrollment
 * @return bool Has the enrollment confirmation time passed?
 */
function uhc_autofill_metadata_has_enrollment_confirmation_time_passed($enrollment) {
  $end_date = !empty($enrollment['automatic_end_date']) ? date_create($enrollment['automatic_end_date']) : NULL;
  $end_time = !empty($enrollment['automatic_end_time']) ? $enrollment['automatic_end_time'] : NULL;
  $end_time_hours_minutes_seconds = isset($end_time) ? str_split($end_time, 2) : NULL;

  if (isset($end_date, $end_time_hours_minutes_seconds)) {
    date_add($end_date, date_interval_create_from_date_string("$end_time_hours_minutes_seconds[0] hours"));
    date_add($end_date, date_interval_create_from_date_string("$end_time_hours_minutes_seconds[1] minutes"));
    date_add($end_date, date_interval_create_from_date_string("$end_time_hours_minutes_seconds[2] seconds"));
  }

  return isset($end_date) && $end_date->getTimestamp() <= REQUEST_TIME;
}

/**
 * Returns enrollment information for the given user identified by personal
 * unique code.
 *
 * @param string $personal_unique_code
 *   Personal unique code, typically student number.
 * @return array|NULL
 *   Enrollment information (if found), NULL if not found or empty array if an error
 *   occured.
 */
function uhc_autofill_metadata_get_enrollment_data($personal_unique_code) {

  // For easier debugging, we can fake our enrollment response by using this
  // Drupal variable (if it's set).
  $enrollment_data = variable_get('uhc_autofill_metadata_override_enrollments', NULL);

  // Work only when unique code is given
  if (!empty($personal_unique_code)) {
    $enrollment_data = &drupal_static(__FUNCTION__ . $personal_unique_code);
    // If enrollment data is NULL, we assume that this specific case isn't
    // requested yet.
    if (is_null($enrollment_data)) {
      $base_url = variable_get('uhc_enrollments_base_url');

      if (!empty($base_url)) {
        $path = "students/$personal_unique_code/enrollments";
        $url = $base_url . $path;
        $response = drupal_http_request($url, array('timeout' => 5.0));

        if ($response->code == 200) {
          $enrollment_data = drupal_json_decode($response->data);
        }
        else {
          $enrollment_data = array();
          $error = isset($response->error) ? $response->error : '';

          uhc_autofill_metadata_log(
            'Failed to get enrollments for @personal_unique_code. Error: @error',
            array('@personal_unique_code' => $personal_unique_code, '@error' => $error),
            WATCHDOG_WARNING
          );

          // Display enrollment check failure message to user
          drupal_set_message(t('There is a temporary problem with verifying the access rights. Some of the page content may be missing.'), 'error');
        }
      }
    }
  }

  return $enrollment_data;
}

function uhc_autofill_metadata_set_enrollments($account, $enrollments) {
  if ($enrollments !== FALSE) {
    $account->field_enrollments[LANGUAGE_NONE] = array();

    foreach ($enrollments as $index => $value) {
      $account->field_enrollments[LANGUAGE_NONE][$index]['value'] = $value;
    }
  }

  return $account;
}

function uhc_autofill_metadata_set_organisation_modify_rights($account, $organisation_modify_rights) {
  if ($organisation_modify_rights !== FALSE) {
    $account->field_organisation_modify_rights[LANGUAGE_NONE] = array();

    foreach ($organisation_modify_rights as $index => $value) {
      $account->field_organisation_modify_rights[LANGUAGE_NONE][$index]['value'] = $value;
    }
  }

  return $account;
}

/**
 * Implements hook_node_view().
 */
function uhc_autofill_metadata_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'course_implementation' && arg(0) == 'node') {
    uhc_autofill_metadata_refresh_enrollments_for_current_user();
    uhc_autofill_metadata_refresh_organisation_modify_rights_for_current_user();
  }
}

/**
 * Refreshes enrollments for the current authenticated user if the user has a
 * personal unique code. The refresh is cached for one minute.
 */
function uhc_autofill_metadata_refresh_enrollments_for_current_user() {
  if (user_is_logged_in() && variable_get('uhc_refresh_enrollments', TRUE)) {
    global $user;
    $account = user_load($user->uid);

    if (!empty($account->field_personal_unique_code[LANGUAGE_NONE][0]['value'])) {
      $cid = 'uhc-enrollment-refresh-' . $user->uid;

      if (!cache_get($cid)) {
        $enrollments = uhc_autofill_metadata_get_enrollments($account->field_personal_unique_code[LANGUAGE_NONE][0]['value']);

        if ($enrollments !== FALSE) {
          $account = uhc_autofill_metadata_set_enrollments($account, $enrollments);
          user_save($account, array('field_personal_unique_code' => $account->field_personal_unique_code));
          cache_set($cid, TRUE, 'cache', REQUEST_TIME + 60);
        }
      }
    }
  }
}

/**
 * Refreshes organisation modify_rights for the current authenticated user if
 * the user has an employee number. The refresh is cached for one minute.
 */
function uhc_autofill_metadata_refresh_organisation_modify_rights_for_current_user() {
  if (user_is_logged_in() && variable_get('uhc_refresh_organisation_modify_rights', TRUE)) {
    global $user;
    $account = user_load($user->uid);

    if (!empty($account->field_employee_number[LANGUAGE_NONE][0]['value'])) {
      $cid = 'uhc-organisation-modify-rights-refresh-' . $user->uid;

      if (!cache_get($cid)) {
        $organisation_modify_rights = uhc_autofill_metadata_get_organisation_modify_rights($account->name);

        if ($organisation_modify_rights !== FALSE) {
          $account = uhc_autofill_metadata_set_organisation_modify_rights($account, $organisation_modify_rights);
          user_save($account, array('name' => $account->name));
          cache_set($cid, TRUE, 'cache', REQUEST_TIME + 60);
        }
      }
    }
  }
}

function uhc_autofill_metadata_get_current_user_employee_number() {
  $employee_number = NULL;

  if (user_is_logged_in()) {
    global $user;
    $account = user_load($user->uid);

    if (!empty($account->field_employee_number[LANGUAGE_NONE][0]['value'])) {
      $employee_number = $account->field_employee_number[LANGUAGE_NONE][0]['value'];
    }
  }

  return $employee_number;
}

function uhc_autofill_metadata_get_current_user_personal_unique_code() {
  $personal_unique_code = NULL;

  if (user_is_logged_in()) {
    global $user;
    $account = user_load($user->uid);

    if (!empty($account->field_personal_unique_code[LANGUAGE_NONE][0]['value'])) {
      $personal_unique_code = $account->field_personal_unique_code[LANGUAGE_NONE][0]['value'];
    }
  }

  return $personal_unique_code;
}

function uhc_autofill_metadata_get_current_user_oodi_uid() {
  $oodi_uid = NULL;

  if (user_is_logged_in()) {
    global $user;
    $account = user_load($user->uid);

    if (!empty($account->field_oodi_uid[LANGUAGE_NONE][0]['value'])) {
      $oodi_uid = $account->field_oodi_uid[LANGUAGE_NONE][0]['value'];
    }
  }

  return $oodi_uid;
}

function uhc_autofill_metadata_get_current_user_organisation_modify_rights() {
  $organisation_modify_rights = array();

  if (user_is_logged_in()) {
    global $user;
    $account = user_load($user->uid);

    if (!empty($account->field_organisation_modify_rights[LANGUAGE_NONE])) {
      foreach ($account->field_organisation_modify_rights[LANGUAGE_NONE] as $organisation_modify_right) {
        $organisation_modify_rights[] = $organisation_modify_right['value'];
      }
    }
  }

  return $organisation_modify_rights;
}

/**
 * Returns enrollment name by the given language code. If a name matching the
 * given language code is not found, fallbacks to known languages ('fi', 'en').
 *
 * @param $enrollment object Enrollment object.
 * @param $langcode string Language code.
 * @return string Enrollment name matching the language code, if found.
 */
function _uhc_autofill_metadata_get_enrollment_name($enrollment, $langcode) {
  $enrollment_name = '';
  $enrollment_names = array();

  foreach ($enrollment['name'] as $name) {
    $enrollment_names[$name['langcode']] = $name['text'];
  }

  // Primary: Name by given language code. Fallback to 'fi' or 'en'.
  if (!empty($enrollment_names[$langcode])) {
    $enrollment_name = $enrollment_names[$langcode];
  }
  else {
    if (!empty($enrollment_names['fi'])) {
      $enrollment_name = $enrollment_names['fi'];
    }
    elseif (!empty($enrollment_names['en'])){
      $enrollment_name = $enrollment_names['en'];
    }
  }

  return $enrollment_name;
}

function _uhc_autofill_metadata_enrollments_block_should_display_enrollment($method_of_study_id, $exams) {
  $should_display_enrollment = FALSE;

  if (isset($method_of_study_id)) {
    $query = db_query(
      'SELECT destid1 FROM {migrate_map_taxonomyformofteachingterm} WHERE sourceid1=:id',
      array(':id' => $method_of_study_id)
    );

    $result = $query->fetch();

    if (isset($result->destid1)) {
      $should_display_enrollment = !in_array($result->destid1, $exams);
    }
  }

  return $should_display_enrollment;
}

/**
 * Returns organisation modify rights (organisation codes) for the given user
 * identified by email address.
 *
 * @param $email string Email address.
 * @return array|bool 0-n Organisation modify rights (organisation codes) or
 * FALSE if an error occured.
 */
function uhc_autofill_metadata_get_organisation_modify_rights($email) {
  $organisation_modify_rights = array();
  $organisation_modify_rights_data = uhc_autofill_metadata_get_organisation_modify_rights_data($email);

  if (isset($organisation_modify_rights_data['status']) && $organisation_modify_rights_data['status'] == 200 && !empty($organisation_modify_rights_data['data'])) {
    foreach ($organisation_modify_rights_data['data'] as $modify_right) {
      if (isset($modify_right['organisation_code'])) {
        $organisation_modify_rights[] = $modify_right['organisation_code'];
      }
    }
  }

  return $organisation_modify_rights;
}

/**
 * Returns organisation modify rights (a list of organisation codes) for the
 * given user identified by email address.
 *
 * @param $email string Email address
 * @return object|NULL|bool Modify rights (if found), NULL if not found or FALSE
 * if an error occured.
 */
function uhc_autofill_metadata_get_organisation_modify_rights_data($email) {
  $organisation_modify_rights = NULL;

  // For easier debugging, we can fake our organisation modify rights response
  // by using this Drupal variable (if it's set).
  $override_organisation_modify_rights = variable_get('uhc_autofill_metadata_override_organisation_modify_rights', array());

  if (!empty($override_organisation_modify_rights)) {
    return $override_organisation_modify_rights;
  }

  // Continue only when email is given.
  if (!empty($email)) {
    $organisation_modify_rights = &drupal_static(__FUNCTION__ . $email);
    // Organisation modify rights data might be also defined as FALSE, so we let
    // this through from static storage too. If it's NULL, we assume that this
    // specific case isn't requested yet.
    if (is_null($organisation_modify_rights)) {
      $base_url = variable_get('uhc_organisation_modify_rights_base_url');

      if (!empty($base_url)) {
        $path = "teachers/$email/modifyrights";
        $url = $base_url . $path;
        $response = drupal_http_request($url, array('timeout' => 5.0));

        if ($response->code == 200) {
          $organisation_modify_rights = drupal_json_decode($response->data);
        }
        else {
          $organisation_modify_rights = FALSE;
          $error = isset($response->error) ? $response->error : '';

          uhc_autofill_metadata_log(
            'Failed to get organisation modify rights for @email. Error: @error',
            array('@email' => $email, '@error' => $error),
            WATCHDOG_WARNING
          );
        }
      }
    }
  }

  return $organisation_modify_rights;
}

/**
 * Helper function for writing logs in name of this module.
 *
 * @param $message
 * @param array $variables
 * @param int $severity
 */
function uhc_autofill_metadata_log($message, $variables = array(), $severity = WATCHDOG_NOTICE) {
  watchdog('uhc_autofill_metadata', $message, $variables, $severity);
}

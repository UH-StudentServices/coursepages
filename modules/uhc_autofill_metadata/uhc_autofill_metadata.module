<?php
/**
 * @file
 * Code for the UHC Autofill metadata feature.
 *
 * @license GPL, or GNU General Public License, version 3
 * @license http://opensource.org/licenses/GPL-3.0
 * @see README.md how to contribute to this project
 */

include_once 'uhc_autofill_metadata.features.inc';

/**
 * Implements hook_menu().
 */
function uhc_autofill_metadata_menu() {
  return array(
    'admin/config/uhc_shibboleth_metadata' => array(
      'title' => 'Shibboleth metadata',
      'description' => 'Map metadata sources to shibboleth session attributes',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('uhc_autofill_metadata_form'),
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
    ),
  );
}

/**
 * Admin settings form.
 */
function uhc_autofill_metadata_form($form, &$form_state) {
  $form['uhc_shibboleth_metadata_realname'] = array(
    '#type' => 'textfield',
    '#title' => t("User's full name"),
    '#description' => t("Enter the server attribute containing the user's full name"),
    '#size' => 40,
    '#default_value' => variable_get('uhc_shibboleth_metadata_realname', 'HTTP_CN'),
    '#maxlength' => 255,
  );
  $form['uhc_shibboleth_metadata_ou'] = array(
    '#type' => 'textfield',
    '#title' => t('Organisational unit ID'),
    '#description' => t('Enter the server attribute containing the organisational unit ID.'),
    '#size' => 40,
    '#default_value' => variable_get('uhc_shibboleth_metadata_ou', 'HTTP_OU'),
    '#maxlength' => 255,
  );
  $form['uhc_shibboleth_metadata_puc'] = array(
    '#type' => 'textfield',
    '#title' => t('Personal unique code'),
    '#description' => t('Enter the server attribute containing the personal unique code.'),
    '#size' => 40,
    '#default_value' => variable_get('uhc_shibboleth_metadata_puc', 'HTTP_PUC'),
    '#maxlength' => 255,
  );
  $form['uhc_shibboleth_metadata_en'] = array(
    '#type' => 'textfield',
    '#title' => t('Employee number'),
    '#description' => t('Enter the server attribute containing the employee number.'),
    '#size' => 40,
    '#default_value' => variable_get('uhc_shibboleth_metadata_en', 'HTTP_EN'),
    '#maxlength' => 255,
  );
  $form['uhc_shibboleth_metadata_ouid'] = array(
    '#type' => 'textfield',
    '#title' => t('Oodi UID'),
    '#description' => t('Enter the server attribute containing the Oodi UID.'),
    '#size' => 40,
    '#default_value' => variable_get('uhc_shibboleth_metadata_ouid', 'HTTP_OODIUID'),
    '#maxlength' => 255,
  );
  $form['uhc_shibboleth_metadata_require_all'] = array(
    '#type' => 'checkbox',
    '#title' => t('Require all metadata attributes'),
    '#description' => t('Uncheck this if you want to accept some attributes.'),
    '#default_value' => variable_get('uhc_shibboleth_metadata_require_all', TRUE),
  );
  $form['uhc_shibboleth_metadata_debug_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable error reporting'),
    '#default_value' => variable_get('uhc_shibboleth_metadata_debug_mode', FALSE),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_user_login().
 */
function uhc_autofill_metadata_user_login(&$edit, $account) {
  $debug_enabled = variable_get('uhc_shibboleth_metadata_debug_mode', FALSE);
  $ou_attr = variable_get('uhc_shibboleth_metadata_ou', 'HTTP_OU');
  $realname_attr = variable_get('uhc_shibboleth_metadata_realname', 'HTTP_CN');
  $puc_attr = variable_get('uhc_shibboleth_metadata_puc', 'HTTP_PUC');
  $en_attr = variable_get('uhc_shibboleth_metadata_en', 'HTTP_EN');
  $ouid_attr = variable_get('uhc_shibboleth_metadata_ouid', 'HTTP_OODIUID');

  // Depending on the setting whether we require all attributes or not, lets
  // setup statement for both cases.
  $require_all = variable_get('uhc_shibboleth_metadata_require_all', TRUE);
  $found = array(
    TRUE => array_key_exists($ou_attr, $_SERVER) && array_key_exists($realname_attr, $_SERVER),
    FALSE => array_key_exists($ou_attr, $_SERVER) || array_key_exists($realname_attr, $_SERVER),
  );

  // If partial/all attributes are not found, don't proceed further.
  if (!$found[$require_all]) {
    if ($debug_enabled) {
      drupal_set_message(t('Could not fetch Shibboleth attribute(s).'), 'error');
    }
    return;
  }

  // When organisational unit attribute found.
  if (isset($_SERVER[$ou_attr])) {
    $terms = explode(';', $_SERVER[$ou_attr]);
    $account->field_organisational_unit = array(
      'und' => array(),
    );
    foreach ($terms as $name) {
      if (!$name) {
        continue;
      }
      $term = taxonomy_get_term_by_name($name, 'organisational_units');
      if (!$term) { // Create any missing units as terms
        $term = new stdClass();
        $term->name = $name;
        $term->vid = taxonomy_vocabulary_machine_name_load('organisational_units')->vid;
        taxonomy_term_save($term);
        $account->field_organisational_unit['und'][] = array(
          'tid' => $term->tid,
        );
      }
      else {
        $account->field_organisational_unit['und'][] = array(
          'tid' => reset($term)->tid,
        );
      }
    }
  }

  // When real name attribute found
  if (isset($_SERVER[$realname_attr])) {
    $account->field_user_real_name = array(
      'und' => array(
        0 => array(
          'value' => $_SERVER[$realname_attr],
        ),
      ),
    );
  }

  // When personal unique code attribute found
  if (isset($_SERVER[$puc_attr])) {
    $personal_unique_code_parts = explode(':', $_SERVER[$puc_attr]);
    $personal_unique_code = array_pop($personal_unique_code_parts);

    $account->field_personal_unique_code = array(
      'und' => array(
        0 => array(
          'value' => $personal_unique_code,
        ),
      ),
    );

    $enrollments = uhc_autofill_metadata_get_enrollments($personal_unique_code);
    $account = uhc_autofill_metadata_set_enrollments($account, $enrollments);
  }

  // When employee number attribute found
  if (isset($_SERVER[$en_attr])) {
    $account->field_employee_number = array(
      'und' => array(
        0 => array(
          'value' => $_SERVER[$en_attr],
        ),
      ),
    );
  }

  // When Oodi UID attribute found
  if (isset($_SERVER[$ouid_attr])) {
    $account->field_oodi_uid = array(
      'und' => array(
        0 => array(
          'value' => $_SERVER[$ouid_attr],
        ),
      ),
    );
  }

  user_save($account);
}

/**
 * Implements hook_form_alter(). Autofill metadata fields from user fields.
 */
function uhc_autofill_metadata_form_alter(&$form, &$form_state, $form_id) {
  // Atoms
  if ($form_id == 'scald_atom_add_form_options') {
    $form_base = &$form['atom0'];
  }
  // Nodes
  elseif (!empty($form['#node_edit_form'])) {
    $form_base = &$form;
  }
  else {
    return;
  }
  global $user;
  $user_full = user_load($user->uid);
  _uhc_autofill_metadata_prefill($form_base, 'field_responsible_person', field_get_items('user', $user_full, 'field_user_real_name')[0]['value']);
  _uhc_autofill_metadata_prefill($form_base, 'field_responsible_person_email', $user->mail);
  $org_units = field_get_items('user', $user_full, 'field_organisational_unit');
  $ou_parsed = '';
  if (is_array($org_units)) {
    foreach ($org_units as $ou) {
      $term = taxonomy_term_load($ou['tid']);
      $ou_parsed .= $ou_parsed ? ', ' . $term->name : $term->name; // No trailing separator
    }
    _uhc_autofill_metadata_prefill($form_base, 'field_responsible_unit', $ou_parsed);
  }
}

/**
 * Does the heavy lifting in fetching form values from the user object
 */
function _uhc_autofill_metadata_prefill(&$form, $field, $value) {
  if (isset($form[$field])) {
    $lang = $form[$field]['#language'];
    $column = $form[$field][$lang][0]['#columns'][0];
    if (!$form[$field][$lang][0][$column]['#default_value']) {
      $form[$field][$lang][0][$column]['#default_value'] = $value;
    }
  }
}

/**
 * Returns enrollment course implementation numbers for the given user
 * identified by personal unique code.
 *
 * @param $personal_unique_code string Personal unique code, typically student
 * number.
 * @return array|bool 0-n enrollments (course implementation numbers) or FALSE if
 * an error occured.
 */
function uhc_autofill_metadata_get_enrollments($personal_unique_code) {
  $enrollments = array();
  $enrollment_data = uhc_autofill_metadata_get_enrollment_data($personal_unique_code);

  if (isset($enrollment_data['status']) && $enrollment_data['status'] == 200 && !empty($enrollment_data['data'])) {
    foreach ($enrollment_data['data'] as $enrollment) {
      if (isset($enrollment['course_id'])) {
        $enrollments[] = $enrollment['course_id'];
      }
    }
  }

  return $enrollments;
}

/**
 * Returns enrollment information for the given user identified by personal
 * unique code.
 *
 * @param $personal_unique_code string Personal unique code, typically student
 * number.
 * @param string $langcode Language code. Defaults to 'fi'.
 * @return object|NULL|bool Enrollment information (if found), NULL if not found
 * or FALSE if an error occured.
 */
function uhc_autofill_metadata_get_enrollment_data($personal_unique_code, $langcode = 'fi') {

  // Construct enrollment data
  $enrollment_data = NULL;

  // Work only when unique code is given
  if (!empty($personal_unique_code)) {
    $enrollment_data = &drupal_static(__FUNCTION__ . $personal_unique_code . $langcode);
    // Enrollment data might be also defined as FALSE, so we let this through
    // from static storage too. If it's NULL, we assume that this specific case
    // isn't requested yet.
    if (is_null($enrollment_data)) {
      $base_url = variable_get('uhc_enrollments_base_url', 'https://oprek4.it.helsinki.fi:30039/');
      $path = "students/$personal_unique_code/enrollments?langcode=$langcode";
      $url = $base_url . $path;
      $response = drupal_http_request($url, array('timeout' => 2.0));

      if ($response->code == 200) {
        $enrollment_data = drupal_json_decode($response->data);
      }
      else {
        $enrollment_data = FALSE;
        $error = isset($response->error) ? $response->error : '';

        uhc_autofill_metadata_log(
          'Failed to get enrollments for @personal_unique_code. Error: @error',
          array('@personal_unique_code' => $personal_unique_code, '@error' => $error),
          WATCHDOG_WARNING
        );
      }
    }
  }

  return $enrollment_data;
}

function uhc_autofill_metadata_set_enrollments($account, $enrollments) {
  if ($enrollments !== FALSE) {
    $account->field_enrollments['und'] = array();

    foreach ($enrollments as $index => $value) {
      $account->field_enrollments['und'][$index]['value'] = $value;
    }
  }

  return $account;
}

/**
 * Implements hook_node_view().
 */
function uhc_autofill_metadata_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'course_implementation' && arg(0) == 'node') {
    uhc_autofill_metadata_refresh_enrollments_for_current_user();
  }
}

/**
 * Refreshes enrollments for the current authenticated user if the user has a
 * personal unique code. The refresh is cached for one minute.
 */
function uhc_autofill_metadata_refresh_enrollments_for_current_user() {
  if (user_is_logged_in() && variable_get('uhc_refresh_enrollments', TRUE)) {
    global $user;
    $account = user_load($user->uid);

    if (!empty($account->field_personal_unique_code[LANGUAGE_NONE][0]['value'])) {
      $cid = 'uhc-enrollment-refresh-' . $user->uid;

      if (!cache_get($cid)) {
        $enrollments = uhc_autofill_metadata_get_enrollments($account->field_personal_unique_code[LANGUAGE_NONE][0]['value']);

        if ($enrollments !== FALSE) {
          $account = uhc_autofill_metadata_set_enrollments($account, $enrollments);
          user_save($account, array('field_personal_unique_code' => $account->field_personal_unique_code));
          cache_set($cid, TRUE, 'cache', REQUEST_TIME + 60);
        }
      }
    }
  }
}

function uhc_autofill_metadata_get_current_user_employee_number() {
  $employee_number = NULL;

  if (user_is_logged_in()) {
    global $user;
    $account = user_load($user->uid);

    if (!empty($account->field_employee_number[LANGUAGE_NONE][0]['value'])) {
      $employee_number = $account->field_employee_number[LANGUAGE_NONE][0]['value'];
    }
  }

  return $employee_number;
}

function uhc_autofill_metadata_get_current_user_personal_unique_code() {
  $personal_unique_code = NULL;

  if (user_is_logged_in()) {
    global $user;
    $account = user_load($user->uid);

    if (!empty($account->field_personal_unique_code[LANGUAGE_NONE][0]['value'])) {
      $personal_unique_code = $account->field_personal_unique_code[LANGUAGE_NONE][0]['value'];
    }
  }

  return $personal_unique_code;
}

function uhc_autofill_metadata_get_current_user_oodi_uid() {
  $oodi_uid = NULL;

  if (user_is_logged_in()) {
    global $user;
    $account = user_load($user->uid);

    if (!empty($account->field_oodi_uid[LANGUAGE_NONE][0]['value'])) {
      $oodi_uid = $account->field_oodi_uid[LANGUAGE_NONE][0]['value'];
    }
  }

  return $oodi_uid;
}

/**
 * Helper function for writing logs in name of this module.
 *
 * @param $message
 * @param array $variables
 * @param int $severity
 */
function uhc_autofill_metadata_log($message, $variables = array(), $severity = WATCHDOG_NOTICE) {
  watchdog('uhc_autofill_metadata', $message, $variables, $severity);
}

/**
* Implements hook_block_info().
*/
function uhc_autofill_metadata_block_info() {
  $blocks = array();
  $blocks['enrollments_block'] = array(
    'info' => t('enrollments_block'),
  );
  return $blocks;
}

/**
* Implements hook_block_view().
*/
function uhc_autofill_metadata_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'enrollments_block':
      $block['subject'] = '';
      $block['content'] = _uhc_autofill_metadata_enrollments_block();
      break;
  }
  return $block;
}

// gets the current users enrollments and displays it as a list
function _uhc_autofill_metadata_enrollments_block() {
  global $language;
  $langcode = $language->language;
  $personal_unique_code = uhc_autofill_metadata_get_current_user_personal_unique_code();
  $enrollments = uhc_autofill_metadata_get_enrollment_data($personal_unique_code, $langcode);
  $output = '';

  if (!empty($enrollments)) {
    $output = '<ul>';
    $exams = variable_get('uhc_migrate_methods_of_study_marked_as_exam', array());
    foreach ($enrollments['data'] as $enrollment) {
      if (_uhc_autofill_metadata_enrollments_block_should_display_enrollment($enrollment['type_code'], $exams)) {
        if ($langcode == 'en') {
          $link = '/' . $enrollment['learningopportunity_id'] . '/' .$enrollment['course_id'];
        }
        else {
          $link = '/' . $langcode . '/' . $enrollment['learningopportunity_id'] . '/' .$enrollment['course_id'];
        }
        $output .= '<li><a href="' . $link . '">' . $enrollment['learningopportunity_id'] . ' ' . $enrollment['name'] . '</a></li>';
      }
    }
    $output .= '</ul>';
  }

  return $output;
}

function _uhc_autofill_metadata_enrollments_block_should_display_enrollment($method_of_study_id, $exams) {
  $should_display_enrollment = FALSE;

  if (isset($method_of_study_id)) {
    $query = db_query(
      'SELECT destid1 FROM {migrate_map_taxonomyformofteachingterm} WHERE sourceid1=:id',
      array(':id' => $method_of_study_id)
    );

    $result = $query->fetch();

    if (isset($result->destid1)) {
      $should_display_enrollment = !in_array($result->destid1, $exams);
    }
  }

  return $should_display_enrollment;
}

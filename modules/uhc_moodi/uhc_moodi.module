<?php
/**
 * See http://wiki.helsinki.fi/display/d/Moodi+-+Tekninen+dokumentaatio for
 * Moodi documentation.
 *
 * @license GPL, or GNU General Public License, version 3
 * @license http://opensource.org/licenses/GPL-3.0
 * @see README.md how to contribute to this project
 */

// Status definition described in DOO-2282
define('MOODI_IMPORT_STATUS_IN_PROGRESS', 'IN_PROGRESS');

// Status definition described in DOO-2282
define('MOODI_IMPORT_STATUS_COMPLETED', 'COMPLETED');

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds the Moodi widget to the course implementation form.
 */
function uhc_moodi_form_course_implementation_node_form_alter(&$form, &$form_state, $form_id) {

  $course_implementation_node_id = isset($_SESSION['og_context']['gid']) ? $_SESSION['og_context']['gid'] : NULL;

  if (!empty($course_implementation_node_id)) {
    $course_implementation_node = node_load($course_implementation_node_id);
    $course_implementation_id = $course_implementation_node->field_imp_id[LANGUAGE_NONE][0]['value'];
    $form = uhc_moodi_add_moodi_widget($form, $course_implementation_id);
  }
}

/**
 * Implements hook_permission().
 */
function uhc_moodi_permission() {
  return array(
    'Use Moodi button' => array(
      'title' => t('Use Moodi button'),
    ),
  );
}

/**
 * @return bool TRUE if the user can access Moodi functionality, otherwise FALSE.
 */
function uhc_moodi_access() {
  return user_has_role(user_role_load_by_name('administrator')->rid)
    || uhc_course_collaboration_is_current_user_course_teacher();
}

/**
 * Adds Moodi widget to the given form.
 */
function uhc_moodi_add_moodi_widget(&$form, $course_implementation_id) {
  if (!empty($course_implementation_id) && is_numeric($course_implementation_id)) {

    global $language;
    $moodi_response = uhc_moodi_get_controller()->get($course_implementation_id);

    if (uhc_moodi_access()) {

      // Fieldset for Moodi input elements.
      $form['uhc_moodi_fieldset'] = array(
        '#type' => 'fieldset',
        '#title' => t('Create a new Moodle course area and synchronize participants from WebOodi'),
        '#description' => uhc_moodi_get_moodle_description($language->language),
        '#weight' => -99,
        '#collapsible' => FALSE,
        '#collapsed' => TRUE,
      );

      // Moodi create button.
      $form['uhc_moodi_fieldset']['uhc_moodi_create_button'] = array(
        '#type' => 'submit',
        '#value' => t('Create a new Moodle course area'),
        '#access' => uhc_moodi_create_button_access($moodi_response),
        '#ajax' => array(
          'callback' => 'uhc_moodi_create_button_ajax_callback',
          'wrapper' => 'uhc-moodi-status-area',
        ),
      );

      // Fieldset info, shown as a info bubble.
      $form['uhc_moodi_fieldset']['uhc_moodi_fieldset_info'] = array(
        '#type' => 'markup',
        '#prefix' => '<div class="description fieldset-info">',
        '#suffix' => '</div>',
        '#markup' => t('Automatic synchronization means that students with confirmed enrollments are moved to a new moodle-area from the learning opportunity found in WebOodi that corresponds this course. Enrollments are synchronized every 10 minutes, but unfortunately at this point cancellations and removals are not taken into account. Teachers and responsible teachers are given the same treatment as students.'),
      );

      // Show status area when the Moodle URL exists or on error response.
      $show_status = !empty(uhc_moodi_get_moodle_url($moodi_response)) || uhc_moodi_is_error_response($moodi_response);

      $form['uhc_moodi_fieldset']['uhc_moodi_status_area'] = array(
        '#type' => 'markup',
        '#prefix' => uhc_moodi_get_status_prefix($moodi_response),
        '#suffix' => '</div>',
      );
      if ($show_status) {
        $form['uhc_moodi_fieldset']['uhc_moodi_status_area']['#markup'] = '<h4>' . uhc_moodi_get_status_title($moodi_response) . '</h4>' . uhc_moodi_get_status_markup($moodi_response);
      }

      // Description of Moodle areas without participants.
      $form['uhc_moodi_without_participants_note'] = array(
        '#type' => 'fieldset',
        '#title' => t('Create a new Moodle course area without synchronizing participants from WebOodi'),
        '#description' => uhc_moodi_get_moodle_description_without_participants($language->language),
      );
    }

    // Course implementation ID (hidden field).
    $form['uhc_moodi_fieldset']['course_implementation_id'] = array(
      '#type' => 'hidden',
      '#value' => $course_implementation_id,
    );

    // Moodle URL from Moodi (hidden field).
    $form['uhc_moodi_fieldset']['moodi_moodle_url'] = array(
      '#type' => 'hidden',
      '#value' => uhc_moodi_get_moodle_url($moodi_response),
    );

    // Store current path for easier reloading in ajax callbacks.
    $form['uhc_moodi_fieldset']['current_path'] = array(
      '#type' => 'hidden',
      '#value' => current_path(),
    );

    // Add Moodi widget fieldset to Moodle fieldgroup.
    $form['#group_children']['uhc_moodi_fieldset'] = 'group_imp_moodle';
    $form['#group_children']['uhc_moodi_without_participants_note'] = 'group_imp_moodle';
  }

  return $form;
}

function uhc_moodi_get_moodle_description($language_code) {
  // @todo: Build a GUI for changing these.
  $import_url = array(
    'en' => 'https://docs.moodle.org/33/en/Import_course_data',
    'fi' => 'https://docs.moodle.org/3x/fi/Tuo',
    'sv' => 'https://docs.moodle.org/33/en/Import_course_data',
  );
  $instructions_url = 'https://docs.moodle.org/3x/fi/HY-Uuden_kurssialueen_luonti';
  $paragraphs = array(
    t('Clicking this button creates a new Moodle area and adds the registered students and teachers from WebOodi by using automatic synchronization. The URL created for the Moodle area will be automatically added as a button to the course page. The course URL will be also visible in My Studies and My Teaching pages.'),
    t('The Moodle area is hidden from students as a default after the creation. Therefore, you should remember to open the Moodle course area for students when the course is ready through the Moodle area settings. You can import content from another Moodle course area - such as the course\'s previous iteration - with the <a href="@url" target="_blank">Import</a> function.', array('@url' => $import_url[$language_code])),
    t('<span class="note">Note. This function should not be used if the enrolment in the course is restricted in WebOodi.</span> Before creating a new Moodle course area, <strong>see more detailed <a href="@url" target="_blank">instructions</a>.</strong>', array('@url' => $instructions_url)),
  );

  return '<p>' . implode('</p><p>', $paragraphs) . '</p>';
}

function uhc_moodi_get_moodle_description_without_participants($language_code) {
  // @todo: Build a GUI for changing these.
  $form_url = 'https://moodle.helsinki.fi/course/request.php';
  $selfenrollment_url = array(
    'en' => 'https://docs.moodle.org/33/en/Self_enrolment',
    'fi' => 'https://docs.moodle.org/3x/fi/K%C3%A4ytt%C3%A4j%C3%A4hallinta',
    'sv' => 'https://docs.moodle.org/33/en/Self_enrolment',
  );
  return '<p>' . t('Request a new course area by filling this <a href="@form_url" target="_blank">form</a>. With this method, course participants are not automatically imported from WebOodi. Students and teachers must be added to Moodle by e.g. <a href="@selfenrollment_url" target="_blank">self-enrolment</a>. Link the Moodle area to the course page as shown below.', array('@form_url' => $form_url, '@selfenrollment_url' => $selfenrollment_url[$language_code])) . '</p>';
}

/**
 * Returns status title based on Moodi response.
 *
 * @param $moodi_response object Moodi response.
 * @return string Status title.
 */
function uhc_moodi_get_status_title($moodi_response) {
  $ok_status_codes = _uhc_moodi_get_ok_http_statuses();
  return uhc_moodi_is_error_response($moodi_response, $ok_status_codes) ? t('Error') : t('Moodle status OK');
}

/**
 * @return array
 *   List of statuses that can be interpreteded as normal response. Other
 *   statuses would therefore be interpreteded as error.
 */
function _uhc_moodi_get_ok_http_statuses() {
  return array(200, 404);
}

/**
 * Builds and returns status area markup based on Moodi response.
 *
 * @param $moodi_response object Moodi response.
 * @return mixed|null|string Status area markup.
 */
function uhc_moodi_get_status_markup($moodi_response) {
  $status_markup = '';
  $moodi_response_status = uhc_moodi_get_status($moodi_response);
  $moodi_response_data = uhc_moodi_get_data($moodi_response);

  if (!empty($moodi_response_data->moodleCourseId) || !empty(uhc_moodi_get_moodle_url($moodi_response))) {
    $status_markup .= t('The Moodle area is created and the students and teachers are enrolled from WebOodi to Moodle. Enrolments are synchronized every two hours.');
  }
  elseif (!in_array($moodi_response_status, _uhc_moodi_get_ok_http_statuses())) {
    $status_markup .= t('Something went wrong. Please try later again and contact moodle@helsinki.fi if necessary.');
    watchdog('uhc_moodi', 'Something went wrong, because status code.', array(), WATCHDOG_WARNING);
  }
  elseif (!empty($moodi_response_data->message)) {
    $status_markup .= check_plain($moodi_response_data->message);
  }
  else {
    $status_markup .= t('Something went wrong. Please try later again and contact moodle@helsinki.fi if necessary.');
    watchdog('uhc_moodi', 'Something went wrong, because unidentified response.', array(), WATCHDOG_WARNING);
  }

  $moodle_area_url = !empty($moodi_response_data->url) ? $moodi_response_data->url : '';

  if (!empty($moodle_area_url)) {
    $moodle_area_link = l($moodle_area_url, $moodle_area_url);
    $status_markup .= "<div><p>$moodle_area_link</p></div>";
    $status_markup = uhc_moodi_append_import_in_progress_status_markup($moodi_response_data, $status_markup);
  }

  return $status_markup;
}

/**
 * Builds and returns "import in progress" status markup based on Moodi
 * response.
 *
 * @param $moodi_response_data object Moodi response data.
 * @param $status_markup string Status markup.
 * @return string Status markup.
 */
function uhc_moodi_append_import_in_progress_status_markup($moodi_response_data, $status_markup) {
  if ($moodi_response_data->importStatus == MOODI_IMPORT_STATUS_IN_PROGRESS) {
    $status_markup .= '<div class="moodi-import-status">';
    $status_markup .= t('Currently importing and synchronizing students and teachers...');
    $status_markup .= '</div>';
  }

  return $status_markup;
}

/**
 * Return data from Moodi response.
 *
 * @param $moodi_response object Moodi response.
 * @return object|NULL JSON decoded "data" from Moodi response or NULL.
 */
function uhc_moodi_get_data($moodi_response) {
  return isset($moodi_response->data) ? json_decode($moodi_response->data) : NULL;
}

/**
 * @param $moodi_response
 *
 * @return integer|NULL
 *   Returns HTTP status code of given moodi response.
 */
function uhc_moodi_get_status($moodi_response) {
  return isset($moodi_response->code) ? $moodi_response->code : NULL;
}


/**
 * Get status area CSS classes based on Moodi response.
 *
 * @param $moodi_response object Moodi response.
 * @param $ok_status_codes
 * @return string CSS classes.
 */
function uhc_moodi_get_status_classes($moodi_response, $ok_status_codes) {
  $status_classes = array();
  $status_classes[] = 'messages';
  $status_classes[] = 'alternative';

  if (!in_array($moodi_response->code, $ok_status_codes)) {
    $status_classes[] = 'error';
  }
  else {
    $status_classes[] = 'status';
  }

  return implode(' ', $status_classes);
}

/**
 * Get status area prefix based on Moodi response.
 *
 * @param $moodi_response object Moodi response.
 * @param array $ok_status_codes
 * @return string Status area prefix.
 */
function uhc_moodi_get_status_prefix($moodi_response, $ok_status_codes = array(200, 404)) {
  return '<div id="uhc-moodi-status-area" class="' . uhc_moodi_get_status_classes($moodi_response, $ok_status_codes) . '">';
}

/**
 * Access function for Moodi create button. Allow if Moodi response contains
 * URL. Otherwise deny.
 *
 * @param $moodi_response object Moodi response.
 * @return bool TRUE if access is allowed, otherwise FALSE.
 */
function uhc_moodi_create_button_access($moodi_response) {
  $moodi_response_data = uhc_moodi_get_data($moodi_response);

  return empty($moodi_response_data->url);
}

/**
 * Return Moodle URL from Moodi response.
 *
 * @param $moodi_response object Moodi response.
 * @return string Moodle URL or empty string.
 */
function uhc_moodi_get_moodle_url($moodi_response) {
  $moodi_response_data = uhc_moodi_get_data($moodi_response);

  return !empty($moodi_response_data->url) ? $moodi_response_data->url : '';
}

function uhc_moodi_is_error_response($moodi_response, $ok_status_codes = array(200, 404)) {
  return !in_array($moodi_response->code, $ok_status_codes);
}

/**
 * Ajax callback for the Moodi create button. Executes a Moodi create and get
 * requests and displays the responses.
 */
function uhc_moodi_create_button_ajax_callback($form, &$form_state) {
  $element = $form['uhc_moodi_fieldset']['uhc_moodi_status_area'];
  $course_implementation_id = !empty($form['uhc_moodi_fieldset']['course_implementation_id']['#value']) ? $form['uhc_moodi_fieldset']['course_implementation_id']['#value'] : NULL;

  if (!empty($course_implementation_id)) {
    $request_timeout_seconds = variable_get('uhc_moodi_create_timeout', 10);
    $moodi_create_response = uhc_moodi_get_controller($request_timeout_seconds)->create($course_implementation_id);
    $moodi_get_response = uhc_moodi_get_controller()->get($course_implementation_id);

    $element['#prefix'] = uhc_moodi_get_status_prefix($moodi_create_response, array(200));
    $element['#markup'] = '<h4>' . uhc_moodi_get_creation_result_title($moodi_create_response, array(200)) . '</h4>';
    $element['#markup'] .= uhc_moodi_get_status_markup($moodi_create_response);

    if (!uhc_moodi_is_error_response($moodi_create_response, array(200))) {
      $element['#markup'] .= '<h4>' . uhc_moodi_get_status_title($moodi_create_response) . '</h4>';
      $element['#markup'] .= uhc_moodi_get_status_markup($moodi_get_response);
    }

    uhc_moodi_handle_create_response($moodi_create_response, $form);
  }

  return $element;
}

/**
 * Returns creation result title based on Moodi response.
 *
 * @param $moodi_response object Moodi response.
 * @param array $ok_status_codes
 * @return string Creation result title.
 */
function uhc_moodi_get_creation_result_title($moodi_response, $ok_status_codes = array(200, 404)) {
  return uhc_moodi_is_error_response($moodi_response, $ok_status_codes) ? t('Creation failed') : t('Moodle status OK');
}

/**
 * Handle Moodi create response.
 *
 * @param $moodi_create_response object Moodi response.
 * @param $form array Course implementation form.
 */
function uhc_moodi_handle_create_response($moodi_create_response, $form) {
  if ($moodi_create_response->code == 200) {
    watchdog('uhc_moodi', 'Moodle creation successful.');
    uhc_moodi_create_moodle_created_activity_message();
    uhc_moodi_save_moodle_url();
    uhc_moodi_refresh_page($form);
  }
}

function uhc_moodi_save_moodle_url() {
  $nid = isset($_SESSION['og_context']['gid']) ? $_SESSION['og_context']['gid'] : NULL;

  if ($nid) {
    $node = node_load($nid);
    $course_implementation_id = $node->field_imp_id[LANGUAGE_NONE][0]['value'];
    $moodi_response = uhc_moodi_get_controller()->get($course_implementation_id);
    $node->field_moodle_url[LANGUAGE_NONE][0]['url'] = uhc_moodi_get_moodle_url($moodi_response);
    node_save($node);
  }
}

function uhc_moodi_refresh_page($form) {
  ctools_include('ajax');
  ctools_add_js('ajax-responder');

  $options = array(
    'query' => array(
      'section' => 'edit-group_imp_moodle',
      'moodi_creation_successful' => TRUE
    )
  );

  $current_path = !empty($form['uhc_moodi_fieldset']['current_path']['#value'])
    ? $form['uhc_moodi_fieldset']['current_path']['#value']
    : '';

  $commands[] = ctools_ajax_command_redirect($current_path, 0, $options);
  print ajax_render($commands);
  exit;
}

function uhc_moodi_create_moodle_created_activity_message() {
  $nid = isset($_SESSION['og_context']['gid']) ? $_SESSION['og_context']['gid'] : NULL;

  if ($nid) {
    $node = node_load($nid);
    uhc_course_implementation_activity_create_message($node, 'course_implementation_moodle_course_area_create');
  }
}

/**
 * @param float $request_timeout_seconds Timeout seconds for request operations.
 *
 * @return UHCMoodiController
 */
function uhc_moodi_get_controller($request_timeout_seconds = 3.0) {
  static $uhcMoodiController = FALSE;

  if (!$uhcMoodiController) {
    $uhcMoodiController = new UHCMoodiController(
      new UHCMoodiService(
        uhc_moodi_get_base_url(),
        uhc_moodi_get_client_id(),
        uhc_moodi_get_client_token(),
        $request_timeout_seconds
      )
    );
  }

  return $uhcMoodiController;
}

/**
 * @return string|null Moodi API base URL.
 */
function uhc_moodi_get_base_url() {
  return variable_get('uhc_moodi_base_url');
}

/**
 * @return null|string Moodi client ID.
 */
function uhc_moodi_get_client_id() {
  return variable_get('uhc_moodi_client_id');
}

/**
 * @return null|string Moodi client token.
 */
function uhc_moodi_get_client_token() {
  return variable_get('uhc_moodi_client_token');
}

<?php
/**
 * See http://wiki.helsinki.fi/display/d/Moodi+-+Tekninen+dokumentaatio for
 * Moodi documentation.
 *
 * @license GPL, or GNU General Public License, version 3
 * @license http://opensource.org/licenses/GPL-3.0
 * @see README.md how to contribute to this project
 */

// Status definition described in DOO-2282
define('MOODI_IMPORT_STATUS_IN_PROGRESS', 'IN_PROGRESS');

// Status definition described in DOO-2282
define('MOODI_IMPORT_STATUS_COMPLETED', 'COMPLETED');

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds the Moodi widget to the course implementation form.
 */
function uhc_moodi_form_course_implementation_node_form_alter(&$form, &$form_state, $form_id) {

  $course_implementation_node_id = isset($_SESSION['og_context']['gid']) ? $_SESSION['og_context']['gid'] : NULL;

  if (!empty($course_implementation_node_id)) {
    $course_implementation_node = node_load($course_implementation_node_id);
    $course_implementation_id = $course_implementation_node->field_imp_id[LANGUAGE_NONE][0]['value'];
    $form = uhc_moodi_add_moodi_widget($form, $course_implementation_id);
  }
}

/**
 * Implements hook_permission().
 */
function uhc_moodi_permission() {
  return array(
    'Use Moodi button' => array(
      'title' => t('Use Moodi button'),
    ),
  );
}

/**
 * @return bool TRUE if the user can access Moodi functionality, otherwise FALSE.
 */
function uhc_moodi_access() {
  return user_has_role(user_role_load_by_name('administrator')->rid)
    || user_access('Use Moodi button');
}

/**
 * Adds Moodi widget to the given form.
 */
function uhc_moodi_add_moodi_widget(&$form, $course_implementation_id) {
  if (!empty($course_implementation_id)) {

    // Fieldset for Moodi input elements.
    $form['uhc_moodi_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('Create a new Moodle course area and synchronize students from WebOodi'),
      '#description' => t('This creates a new Moodle-area and adds the course students and teachers from WebOodi as members using automatic synchronization. This is the primary and recommended way to create Moodle-areas. The URL created for the moodle-area will be automatically added as a button to the course page. The URL is also visible to students in the My Studies -page.'),
      '#weight' => -99,
      '#collapsible' => FALSE,
      '#collapsed' => TRUE,
    );

    $moodi_response = uhc_moodi_get_controller()->get($course_implementation_id);

    if (uhc_moodi_access()) {

      // Moodi create button.
      $form['uhc_moodi_fieldset']['uhc_moodi_create_button'] = array(
        '#type' => 'submit',
        '#value' => t('Create Moodle course area'),
        '#access' => uhc_moodi_create_button_access($moodi_response),
        '#ajax' => array(
          'callback' => 'uhc_moodi_create_button_ajax_callback',
          'wrapper' => 'uhc-moodi-status-area',
        ),
      );

      // Fieldset info, shown as a info bubble.
      $form['uhc_moodi_fieldset']['uhc_moodi_fieldset_info'] = array(
        '#type' => 'markup',
        '#prefix' => '<div class="description fieldset-info">',
        '#suffix' => '</div>',
        '#markup' => t('Automatic synchronization means that students with confirmed enrollments are moved to a new moodle-area from the learning opportunity found in WebOodi that corresponds this course. Enrollments are synchronized every 10 minutes, but unfortunately at this point cancellations and removals are not taken into account. Teachers and responsible teachers are given the same treatment as students.'),
      );

      // Show status area when the Moodle URL exists or on error response.
      $show_status = !empty(uhc_moodi_get_moodle_url($moodi_response)) || uhc_moodi_is_error_response($moodi_response);

      if ($show_status) {
        $status_markup = '<h4>' . uhc_moodi_get_status_title($moodi_response) . '</h4>' . uhc_moodi_get_status_markup($moodi_response);
        $form['uhc_moodi_fieldset']['uhc_moodi_status_area'] = array(
          '#type' => 'markup',
          '#prefix' => uhc_moodi_get_status_prefix($moodi_response),
          '#suffix' => '</div>',
          '#markup' => $status_markup,
          '#attached' => array('js' => array(
            drupal_get_path('module', 'uhc_moodi') . '/js/uhc_moodi_copy_moodle_url.js',
          )),
        );
      }
    }
    else {
      $form['uhc_moodi_fieldset']['uhc_moodi_not_available'] = array(
        '#type' => 'markup',
        '#prefix' => '<div class="tube"><div class="messages info">',
        '#suffix' => '</div></div>',
        '#markup' => '<p>' . t('This function is not yet available.') . '</p>',
      );
    }

    // Course implementation ID (hidden field).
    $form['uhc_moodi_fieldset']['course_implementation_id'] = array(
      '#type' => 'hidden',
      '#value' => $course_implementation_id,
    );

    // Moodle URL from Moodi (hidden field).
    $form['uhc_moodi_fieldset']['moodi_moodle_url'] = array(
      '#type' => 'hidden',
      '#value' => uhc_moodi_get_moodle_url($moodi_response),
    );

    // Store current path for easier reloading in ajax callbacks.
    $form['uhc_moodi_fieldset']['current_path'] = array(
      '#type' => 'hidden',
      '#value' => current_path(),
    );

    // Add Moodi widget fieldset to Moodle fieldgroup.
    $form['#group_children']['uhc_moodi_fieldset'] = 'group_imp_moodle';
  }

  return $form;
}

/**
 * Returns status title based on Moodi response.
 *
 * @param $moodi_response object Moodi response.
 * @return string Status title.
 */
function uhc_moodi_get_status_title($moodi_response) {
  return uhc_moodi_is_error_response($moodi_response) ? t('Error') : t('Moodle status OK');
}

/**
 * Builds and returns status area markup based on Moodi response.
 *
 * @param $moodi_response object Moodi response.
 * @return mixed|null|string Status area markup.
 */
function uhc_moodi_get_status_markup($moodi_response) {
  $status_markup = '';
  $moodi_response_data = uhc_moodi_get_data($moodi_response);

  if (!empty($moodi_response_data->moodleCourseId) || !empty(uhc_moodi_get_moodle_url($moodi_response))) {
    $status_markup .= t('The Moodle area is created and the students and teachers are enrolled from WebOodi to Moodle. Enrolments are synchronized every two hours.');
  }
  elseif (!empty($moodi_response_data->message)) {
    $status_markup .= check_plain($moodi_response_data->message);
  }
  else {
    $status_markup .= t('Something went wrong. Please try later again and contact moodle@helsinki.fi if necessary.');

    if (!empty($moodi_response->error)) {
      $error = check_plain($moodi_response->error);
      $status_markup .= " ($error)";
    }
  }

  $moodle_area_url = !empty($moodi_response_data->url) ? $moodi_response_data->url : '';

  if (!empty($moodle_area_url)) {
    $moodle_area_link = l($moodle_area_url, $moodle_area_url);
    $status_markup .= "<div><p>$moodle_area_link</p></div>";
    $status_markup = uhc_moodi_append_import_in_progress_status_markup($moodi_response_data, $status_markup);
  }

  return $status_markup;
}

/**
 * Builds and returns "import in progress" status markup based on Moodi
 * response.
 *
 * @param $moodi_response_data object Moodi response data.
 * @param $status_markup string Status markup.
 * @return string Status markup.
 */
function uhc_moodi_append_import_in_progress_status_markup($moodi_response_data, $status_markup) {
  if ($moodi_response_data->importStatus == MOODI_IMPORT_STATUS_IN_PROGRESS) {
    $status_markup .= '<div class="moodi-import-status">';
    $status_markup .= t('Currently importing and synchronizing students and teachers...');
    $status_markup .= '</div>';
  }

  return $status_markup;
}

/**
 * Return data from Moodi response.
 *
 * @param $moodi_response object Moodi response.
 * @return object|NULL JSON decoded "data" from Moodi response or NULL.
 */
function uhc_moodi_get_data($moodi_response) {
  return isset($moodi_response->data) ? json_decode($moodi_response->data) : NULL;
}

/**
 * Get status area CSS classes based on Moodi response.
 *
 * @param $moodi_response object Moodi response.
 * @return string CSS classes.
 */
function uhc_moodi_get_status_classes($moodi_response) {
  $status_classes = array();
  $status_classes[] = 'messages';
  $status_classes[] = 'alternative';

  if (!in_array($moodi_response->code, array(200, 404))) {
    $status_classes[] = 'error';
  }
  else {
    $status_classes[] = 'status';
  }

  return implode(' ', $status_classes);
}

/**
 * Get status area prefix based on Moodi response.
 *
 * @param $moodi_response object Moodi response.
 * @return string Status area prefix.
 */
function uhc_moodi_get_status_prefix($moodi_response) {
  return '<div id="uhc-moodi-status-area" class="' . uhc_moodi_get_status_classes($moodi_response) . '">';
}

/**
 * Access function for Moodi create button. Allow if Moodi response contains
 * URL. Otherwise deny.
 *
 * @param $moodi_response object Moodi response.
 * @return bool TRUE if access is allowed, otherwise FALSE.
 */
function uhc_moodi_create_button_access($moodi_response) {
  $moodi_response_data = uhc_moodi_get_data($moodi_response);

  return empty($moodi_response_data->url);
}

/**
 * Return Moodle URL from Moodi response.
 *
 * @param $moodi_response object Moodi response.
 * @return string Moodle URL or empty string.
 */
function uhc_moodi_get_moodle_url($moodi_response) {
  $moodi_response_data = uhc_moodi_get_data($moodi_response);

  return !empty($moodi_response_data->url) ? $moodi_response_data->url : '';
}

function uhc_moodi_is_error_response($moodi_response) {
  return !in_array($moodi_response->code, array(200, 404));
}

/**
 * Ajax callback for the Moodi create button. Executes a Moodi create and get
 * requests and displays the responses.
 */
function uhc_moodi_create_button_ajax_callback($form, &$form_state) {
  $element = $form['uhc_moodi_fieldset']['uhc_moodi_status_area'];
  $course_implementation_id = !empty($form['uhc_moodi_fieldset']['course_implementation_id']['#value']) ? $form['uhc_moodi_fieldset']['course_implementation_id']['#value'] : NULL;

  if (!empty($course_implementation_id)) {
    $request_timeout_seconds = variable_get('uhc_moodi_create_timeout', 10);
    $moodi_create_response = uhc_moodi_get_controller($request_timeout_seconds)->create($course_implementation_id);
    $moodi_get_response = uhc_moodi_get_controller()->get($course_implementation_id);

    $element['#prefix'] = uhc_moodi_get_status_prefix($moodi_create_response);
    $element['#markup'] = '<h4>' . uhc_moodi_get_creation_result_title($moodi_create_response) . '</h4>';
    $element['#markup'] .= uhc_moodi_get_status_markup($moodi_create_response);
    $element['#markup'] .= '<h4>' . uhc_moodi_get_status_title($moodi_create_response) . '</h4>';
    $element['#markup'] .= uhc_moodi_get_status_markup($moodi_get_response);

    uhc_moodi_handle_create_response($moodi_create_response, $form);
  }

  return $element;
}

/**
 * Returns creation result title based on Moodi response.
 *
 * @param $moodi_response object Moodi response.
 * @return string Creation result title.
 */
function uhc_moodi_get_creation_result_title($moodi_response) {
  return uhc_moodi_is_error_response($moodi_response) ? t('Creation failed') : t('Moodle status OK');
}

/**
 * Handle Moodi create response. Redirects back to Moodle section on successful
 * Moodi create operation.
 *
 * @param $moodi_create_response object Moodi response.
 * @param $form array Course implementation form.
 */
function uhc_moodi_handle_create_response($moodi_create_response, $form) {
  if ($moodi_create_response->code == 200) {
    uhc_moodi_create_moodle_created_activity_message();

    $current_path = !empty($form['uhc_moodi_fieldset']['current_path']['#value'])
      ? $form['uhc_moodi_fieldset']['current_path']['#value']
      : '';

    watchdog('uhc_moodi', 'Moodle creation successful. Refreshing page.');
    uhc_moodi_redirect($current_path);
  }
}

function uhc_moodi_create_moodle_created_activity_message() {
  $nid = isset($_SESSION['og_context']['gid']) ? $_SESSION['og_context']['gid'] : NULL;

  if ($nid) {
    $node = node_load($nid);
    uhc_course_implementation_activity_create_message($node, 'course_implementation_moodle_course_area_create');
  }
}

/**
 * @param $path string Path.
 */
function uhc_moodi_redirect($path) {
  if (!empty($path)) {
    ctools_include('ajax');
    ctools_add_js('ajax-responder');

    $options = array(
      'query' => array(
        'section' => 'edit-group_imp_moodle',
        'moodi_creation_successful' => TRUE
      )
    );

    $commands[] = ctools_ajax_command_redirect($path, 0, $options);
    print ajax_render($commands);
    exit;
  }
}

/**
 * @param float $request_timeout_seconds Timeout seconds for request operations.
 *
 * @return UHCMoodiController
 */
function uhc_moodi_get_controller($request_timeout_seconds = 3.0) {
  static $uhcMoodiController = FALSE;

  if (!$uhcMoodiController) {
    $uhcMoodiController = new UHCMoodiController(
      new UHCMoodiService(
        uhc_moodi_get_base_url(),
        uhc_moodi_get_client_id(),
        uhc_moodi_get_client_token(),
        $request_timeout_seconds
      )
    );
  }

  return $uhcMoodiController;
}

/**
 * @return string|null Moodi API base URL.
 */
function uhc_moodi_get_base_url() {
  return variable_get('uhc_moodi_base_url');
}

/**
 * @return null|string Moodi client ID.
 */
function uhc_moodi_get_client_id() {
  return variable_get('uhc_moodi_client_id');
}

/**
 * @return null|string Moodi client token.
 */
function uhc_moodi_get_client_token() {
  return variable_get('uhc_moodi_client_token');
}

<?php
/**
 * @file
 * Contains ”UHC Sources Filtering" module implementation.
 *
 * @license GPL, or GNU General Public License, version 3
 * @license http://opensource.org/licenses/GPL-3.0
 * @see README.md how to contribute to this project
 */

/**
 * Implements hook_menu().
 *
 * Defines administrative migration settings.
 */
function uhc_sources_filtering_menu() {

  $items['admin/config/system/uhc-migrate'] = array(
    'title' => 'UHC migrate settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uhc_sources_filtering_migrate_method_of_study_settings_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'uhc_sources_filtering.pages.inc',
  );

  $items['admin/config/system/uhc-migrate/methods-of-study'] = array(
    'title' => 'Methods of study marked as exam',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('access administration pages'),
  );

  return $items;
}

/**
 * Implements hook_uhc_course_implementation_source_allow_source_row().
 *
 * Tell course implementation migration which course implementations are allowed
 * to be migrated.
 */
function uhc_sources_filtering_uhc_course_implementation_source_allow_source_row($row) {

  // Allow by organisation
  // @todo Perhaps do this in uhc_open_univerity module?
  $allowed_organisation_units = uhc_sources_filtering_allowed_organisation_unit_codes();
  if (empty($allowed_organisation_units)) {
    // When $allowed_organisation_units is empty, we allow any organisation by
    // default.
    $allow_by_organisation = TRUE;
  }
  else {
    $allow_by_organisation = FALSE;
    if (isset($row->organisations) && is_array($row->organisations)) {
      foreach ($row->organisations as $organisation) {
        if (!empty($organisation->code) && in_array($organisation->code, $allowed_organisation_units)) {
          // If organisation H930 involved, then we want this item to be migrated
          $allow_by_organisation = TRUE;
          break;
        }
      }
    }
  }

  // Allow by keyword and realisation types (only check if
  // $allow_by_organisation is not TRUE)
  // @todo Perhaps do this in uhc_genetics and uhc_molecular_biosciences modules?
  $allow_by_keyword_and_realisation_type = FALSE;
  if (!$allow_by_organisation) {
    $allowed_keywords = array('genetiikka', 'molekyylibiotieteet');
    $denied_realisations = uhc_sources_filtering_denied_realisation_type_codes();
    if (isset($row->descriptions) && isset($row->realisation_type_code)) {
      // Important: Clone the row object to avoid modifying the original object
      // when parsing the keywords.
      $row_clone = clone $row;
      $description_elements = variable_get('uhc_course_implementation_source_predefined_description_names', array());
      CourseImplementationNodeMigration::prepareDescriptions($row_clone, $description_elements);
      $keywords = CourseImplementationNodeMigration::parseKeywords($row_clone->keywords);
      foreach ($keywords as $keyword) {
        if (in_array($keyword, $allowed_keywords) && !in_array($row->realisation_type_code, $denied_realisations)) {
          // When source row has allowed keyword and allowed realistion type, then
          // allow migrating this item.
          $allow_by_keyword_and_realisation_type = TRUE;
          break;
        }
      }
    }
  }

  return $allow_by_organisation || $allow_by_keyword_and_realisation_type;
}

/**
 * Helper function for getting configured allowed organisation units.
 *
 * @return array
 * @throws MigrateException
 */
function uhc_sources_filtering_allowed_organisation_unit_codes() {
  $whitelist_codes = &drupal_static(__FUNCTION__);
  if (!$whitelist_codes) {
    $whitelist_codes = array();
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'taxonomy_term')
          ->entityCondition('bundle', 'organisations_of_university_of_helsinki')
          ->fieldCondition('field_migrate_allow', 'value', 1);
    $results = $query->execute();
    if (!empty($results['taxonomy_term'])) {
      $whitelist_terms = taxonomy_term_load_multiple(array_keys($results['taxonomy_term']));
      foreach ($whitelist_terms as $whitelist_term) {
        $field_ouh_code = field_get_items('taxonomy_term', $whitelist_term, 'field_ouh_code');
        if (!empty($field_ouh_code[0]['value'])) {
          $whitelist_codes[] = $field_ouh_code[0]['value'];
        }
      }
    }
  }
  return $whitelist_codes;
}

/**
 * Helper function for getting configured denied realisation type codes.
 *
 * @return array
 * @throws MigrateException
 */
function uhc_sources_filtering_denied_realisation_type_codes() {
  $blacklist_codes = &drupal_static(__FUNCTION__);
  if (!$blacklist_codes) {
    $blacklist_tids = variable_get('uhc_migrate_methods_of_study_marked_as_exam', array());
    if ($migration = Migration::getInstance('TaxonomyFormOfTeachingTerm')) {
      /** @var $migration Migration */
      foreach ($blacklist_tids as $blacklist_tid) {
        $source_key = $migration->getMap()->lookupSourceID(array($blacklist_tid));
        if (!empty($source_key['sourceid1'])) {
          $blacklist_codes[] = $source_key['sourceid1'];
        }
      }
    }
  }
  return $blacklist_codes;
}

/**
 *
 * @param $entity
 * @param $type
 */
function uhc_sources_filtering_entity_presave($entity, $type) {
  if ($type == 'taxonomy_term' && $entity->vocabulary_machine_name == 'organisations_of_university_of_helsinki') {
    // When saving organisation term on taxonomy term page and is not a new term
    if (menu_get_object('taxonomy_term', 2) && !is_null($entity->tid)) {
      // Save values recursively if the value has been changed
      $value_changed = TRUE;
      if (isset($entity->field_migrate_allow[LANGUAGE_NONE][0]['value']) &&
        isset($entity->original->field_migrate_allow[LANGUAGE_NONE][0]['value'])) {
        $value_changed = ($entity->field_migrate_allow[LANGUAGE_NONE][0]['value'] != $entity->original->field_migrate_allow[LANGUAGE_NONE][0]['value']);
      }
      if (isset($entity->field_migrate_allow[LANGUAGE_NONE][0]['value']) && $value_changed) {
        foreach (taxonomy_get_children($entity->tid) as $children) {
          // By copying value from parent and then save it
          $children->field_migrate_allow[LANGUAGE_NONE][0]['value'] = $entity->field_migrate_allow[LANGUAGE_NONE][0]['value'];
          taxonomy_term_save($children);

          // And by informing user about this term being updated too.
          drupal_set_message(t('Organisation @code has been updated also', array('@code' => $children->name)));

        }
      }
    }
    elseif (!isset($entity->tid) && !empty($entity->parent)) {
      // When saving new taxonomy term with existing parent, then just copy
      // allow_migrate value from parent.
      $parents = taxonomy_term_load_multiple($entity->parent);
      $parent = reset($parents);
      if (!empty($parent->field_migrate_allow)) {
        $entity->field_migrate_allow = $parent->field_migrate_allow;
      }
    }
  }
}

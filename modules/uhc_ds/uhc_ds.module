<?php
/**
 * @file
 * Code for the uhc_ds feature.
 *
 * @license GPL, or GNU General Public License, version 3
 * @license http://opensource.org/licenses/GPL-3.0
 * @see README.md how to contribute to this project
 */

include_once 'uhc_ds.features.inc';

/**
 * Implements hook_ds_fields_info().
 *
 * Introduce fields for bringing course fields to course implementation.
 */
function uhc_ds_ds_fields_info($entity_type) {
  if ($entity_type == 'node') {

    // This is the list of fields, we want to bring in from course node to
    // course implementation display suite package.
    $embeddable_fields = array(
      'uhc_ds_course_number' => array(
        'function' => 'uhc_ds_render_inherited_ds_field',
        'field_name' => 'field_course_course_number',
        'label' => 'Course: Course number',
      ),
      'uhc_ds_additional_info' => array(
        'function' => 'uhc_ds_render_comparable_ds_field',
        'field_name' => 'field_additional_info',
        'label' => 'Course implementation or Course: Additional information',
      ),
      'uhc_ds_req_prerequisites' => array(
        'function' => 'uhc_ds_render_comparable_ds_field',
        'field_name' => 'field_req_prerequisites',
        'label' => 'Course implementation or Course: Required pre-requisites',
      ),
      'uhc_ds_contents' => array(
        'function' => 'uhc_ds_render_comparable_ds_field',
        'field_name' => 'field_contents',
        'label' => 'Course implementation or Course: Contents',
      ),
      'uhc_ds_evaluation' => array(
        'function' => 'uhc_ds_render_comparable_ds_field',
        'field_name' => 'field_evaluation',
        'label' => 'Course implementation or Course: Evaluation',
      ),
      'uhc_ds_objective' => array(
        'function' => 'uhc_ds_render_comparable_ds_field',
        'field_name' => 'field_objective',
        'label' => 'Course implementation or Course: Objective',
      ),
      'uhc_ds_target_group' => array(
        'function' => 'uhc_ds_render_comparable_ds_field',
        'field_name' => 'field_target_group',
        'label' => 'Course implementation or Course: Target group',
      ),
      'uhc_ds_study_materials' => array(
        'function' => 'uhc_ds_render_comparable_ds_field',
        'field_name' => 'field_study_materials',
        'label' => 'Course implementation or Course: Study materials',
      ),
      'uhc_ds_conduct' => array(
        'function' => 'uhc_ds_render_comparable_ds_field',
        'field_name' => 'field_conduct',
        'label' => 'Course implementation or Course: Conduct',
      ),
      'uhc_ds_timing' => array(
        'function' => 'uhc_ds_render_comparable_ds_field',
        'field_name' => 'field_timing',
        'label' => 'Course implementation or Course: Timing',
      ),
      'uhc_ds_responsible_person' => array(
        'function' => 'uhc_ds_render_comparable_ds_field',
        'field_name' => 'field_responsible_person',
        'label' => 'Course implementation or Course: Responsible person',
      ),
      'uhc_ds_rel_to_other_study_units' => array(
        'function' => 'uhc_ds_render_comparable_ds_field',
        'field_name' => 'field_rel_to_other_study_units',
        'label' => 'Course implementation or Course: Relation to other study units',
      ),

    );

    $ds_fields = array();
    foreach ($embeddable_fields as $embeddable_field => $item) {
      if (isset($item['function'])) {
        $ds_fields[$embeddable_field] = array(
          'title' => $item['label'],
          'field_type' => DS_FIELD_TYPE_FUNCTION,
          'ui_limit' => array('course_implementation|*'),
          'function' => $item['function'],
          'properties' => array(
            'field_name' => $item['field_name'],
            'reference_field' => 'field_imp_reference_to_courses'
          ),
        );
      }
    }

    $ds_fields['uhc_ds_course_reference_accordion'] = array(
      'title' => 'Course Reference Accordion Block',
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => 'uhc_ds_course_reference_accordion_block',
      'properties' => array(
        'field_name' => 'field_course_reference_accordion',
      ),
    );

    $ds_fields['uhc_ds_imp_status_org_location_date'] = array(
      'title' => 'Course Implementation status, organisation, location and date',
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => 'uhc_ds_status_org_location_date',
      'properties' => array(
        'field_name' => 'field_imp_status_org_location_date',
      ),
    );

    $ds_fields['uhc_ds_title_and_credit'] = array(
      'title' => 'Title and credit',
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => 'uhc_ds_title_and_credit',
      'properties' => array(
        'field_name' => 'title_and_credit',
      ),
    );

    $ds_fields['uhc_ds_enrollment_period'] = array(
      'title' => 'Enrolment period',
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => 'uhc_ds_enrollment_period',
      'properties' => array(
        'field_name' => 'enrollment_period',
      ),
    );

    $ds_fields['uhc_ds_table_of_contents'] = array(
      'title' => 'Table of contents',
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => 'uhc_ds_table_of_contents',
      'properties' => array(
        'field_name' => 'table_of_contents',
      ),
    );

    $ds_fields['uhc_ds_link_to_subject'] = array(
      'title' => 'Link to subject',
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => 'uhc_ds_link_to_subject',
      'properties' => array(
        'field_name' => 'link_to_subject',
      ),
    );

    $ds_fields['uhc_ds_moodle_key_or_login'] = array(
      'title' => 'Moodle key or login',
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => 'uhc_ds_moodle_key_or_login',
      'properties' => array(
          'field_name' => 'moodle_key_or_login',
      ),
    );

    $ds_fields['uhc_ds_link_to_related_subjects'] = array(
      'title' => 'Link to related subjects',
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => 'uhc_ds_link_to_related_subjects',
      'properties' => array(
        'field_name' => 'link_to_related_subjects',
      ),
    );

    return array('node' => $ds_fields);
  }
}

/**
 * Helper function for introducing an inherited field.
 * @param $ds_fields
 * @param $embeddable_field
 * @param $label
 * @param $field_name
 */
function _uhc_ds_inherit_from_source(&$ds_fields, $embeddable_field, $label, $field_name) {
  $ds_fields[$embeddable_field] = array(
    'title' => $label,
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('course_implementation|*'),
    'function' => 'uhc_ds_render_inherited_ds_field',
    'properties' => array(
      'field_name' => $field_name,
      'reference_field' => 'field_imp_reference_to_courses'
    ),
  );
}

/**
 * Helper function for introducing an comparable field.
 * @param $ds_fields
 * @param $embeddable_field
 * @param $label
 * @param $field_name
 */
function _uhc_ds_compare(&$ds_fields, $embeddable_field, $label, $field_name) {
  $ds_fields[$embeddable_field] = array(
    'title' => $label,
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('course_implementation|*'),
    'function' => 'uhc_ds_render_comparable_ds_field',
    'properties' => array(
      'field_name' => $field_name,
      'reference_field' => 'field_imp_reference_to_courses'
    ),
  );
}

/**
 * This is an callback for rendering an display suite field.
 * @see uhc_ds_ds_fields_info()
 * @see _uhc_ds_inherit_from_source()
 */
function uhc_ds_render_inherited_ds_field($field = NULL, $langcode = NULL) {
  if (!$langcode) {
    $langcode = i18n_langcode();
  }
  // This is the node we're rendering at the moment.
  $node = $field['entity'];

  // This is th field, where we find out the course node where we take the field
  // for rendering.
  $reference_field = $field['properties']['reference_field'];

  // This is the field, we want to embed
  $field_name = $field['properties']['field_name'];

  // If there's reference to course(s) set, load the node, so we can render its
  // fields
  $course_node = NULL;
  if (isset($node->{$reference_field}[LANGUAGE_NONE])) {
    foreach ($node->{$reference_field}[LANGUAGE_NONE] as $item) {
      if (isset($item['target_id'])) {
        $course_node = node_load($item['target_id']);
        break;
      }
    }
  }

  // If we don't have course node, return nothing!
  if (is_null($course_node)) {
    return NULL;
  }

  // Get values and return the first item. TODO: How we handle multiple values?
  $values = field_get_items('node', $course_node, $field_name, $langcode);
  if ($values) {
    $value = field_view_value('node', $course_node, $field_name, $values[0]);
    return render($value);
  }
}

/**
 * This is an callback for rendering an comparable DS field.
 * @see uhc_ds_ds_fields_info()
 * @see uhc_ds_render_inherited_ds_field()
 */
function uhc_ds_render_comparable_ds_field($field = NULL) {

  // This is the node we're rendering at the moment.
  $node = $field['entity'];

  // This is the field, we want to compare
  $field_name = $field['properties']['field_name'];

  $langcode = i18n_langcode();

  // if the field has a value, use it
  $values = field_get_items('node', $node, $field_name, $langcode);
  if($values) {
    $value = field_view_value('node', $node, $field_name, $values[0]);
    return render($value);
  }

  // If the active language is one of the teaching languages and field has no value, we
  // try to fetch the value from the course node instead.
  $teaching_languages = field_get_items('node', $node, 'field_imp_teaching_language');
  if ($teaching_languages) {
    foreach ($teaching_languages as $teaching_language) {
      if ($teaching_language['value'] == $langcode) {
        return uhc_ds_render_inherited_ds_field($field);
      }
    }
  }
}

/**
 * Fallback logic to make sure we have at least some content to show to the user. Content can be
 * pulled from different languages and from the referenced course node if necessary.
 * Currently not in use, we use uhc_ds_render_comparable_ds_field instead.
 *
 * @see uhc_ds_ds_fields_info()
 * @see uhc_ds_render_inherited_ds_field()
 */
function uhc_ds_content_fallback($field = NULL) {

  // This is the node we're rendering at the moment.
  $node = $field['entity'];

  // This is the field, we want to compare
  $field_name = $field['properties']['field_name'];

  $active_language = i18n_langcode();

  // Language weight is used to determine the order of preference when looping through languages
  // and can be set at /admin/config/regional/language
  $enabled_languages = locale_language_list('language');

  $teaching_language_field_items = field_get_items('node', $node, 'field_imp_teaching_language');
  $teaching_languages = $teaching_language_field_items ? array_column($teaching_language_field_items, 'value') : NULL;

  // Course implementation - try active language
  $values = field_get_items('node', $node, $field_name, $active_language);
  if ($values) {
    $value = field_view_value('node', $node, $field_name, $values[0]);
    return render($value);
  }

  // Course implementation - try all teaching languages
  if ($teaching_languages) {
    foreach ($enabled_languages as $enabled_language) {
      if(in_array($enabled_language, $teaching_languages)) {
        $values = field_get_items('node', $node, $field_name, $enabled_language);
        if ($values) {
          $value = field_view_value('node', $node, $field_name, $values[0]);
          return render($value);
        }
      }
    }
    // Course - try all teaching languages
    foreach ($enabled_languages as $enabled_language) {
      if(in_array($enabled_language, $teaching_languages)) {
        $values = uhc_ds_render_inherited_ds_field($field, $enabled_language);
        if ($values) {
          return $values;
        }
      }
    }
  }

  // Course implementation - try all enabled languages
  foreach ($enabled_languages as $enabled_language) {
    $values = field_get_items('node', $node, $field_name, $enabled_language);
    if ($values) {
      $value = field_view_value('node', $node, $field_name, $values[0]);
      return render($value);
    }
  }

  // Course - try all enabled languages
  foreach ($enabled_languages as $enabled_language) {
    $values = uhc_ds_render_inherited_ds_field($field, $enabled_language);
    if ($values) {
      return $values;
    }
  }
}

/**
 * Callback for rendering course node reference accordion views. Uses node ID as an
 * argument to make the view's work when displayed on subject nodes.
 */
function uhc_ds_course_reference_accordion_block($field) {
  $output = views_embed_view('course_node_references', 'block_2', $field['entity']->nid);
  if (views_get_view_result('course_node_references', 'block_3', $field['entity']->nid)) {
    $output .= views_embed_view('course_node_references', 'block_3', $field['entity']->nid);
  }
  return $output;
}

/**
* Render status, organization, location, and date for Course implementation nodes.
*/
function uhc_ds_status_org_location_date($field) {
  $node = $field['entity'];

  $imp_fields = array(
    'field_imp_begin_date',
    'field_imp_end_date',
    'field_imp_course_organiser',
    'field_imp_locality',
  );

  // extract field values
  foreach ($imp_fields as $imp_field) {
    $values[$imp_field] = field_view_field('node', $node, $imp_field, array('label' => 'hidden'));
  }

  $status = field_view_field('node', $node, 'field_cancelled', array('type' => 'cancelled', 'label' => 'hidden'));

  // format date values
  $begin_date = isset($values['field_imp_begin_date']['#items'][0]['value']) ? date('j.n.Y', strtotime($values['field_imp_begin_date']['#items'][0]['value'])) : '';
  $end_date = isset($values['field_imp_end_date']['#items'][0]['value']) ? ' - ' . date('j.n.Y', strtotime($values['field_imp_end_date']['#items'][0]['value'])) : '';
  $time = ' ' . $begin_date . $end_date;

  $organiser = isset($values['field_imp_course_organiser'][0]['#markup']) ? $values['field_imp_course_organiser'][0]['#markup'] : '';
  $locality = isset($values['field_imp_locality']) ? render($values['field_imp_locality']) : '';
  $course = node_load(field_get_items('node', $node, 'field_imp_reference_to_courses')[0]['target_id']);

  return render($status) . '<div class="org-location-date"><div>' . uhc_dc_render_differing_title_and_credits($course, $node) . '</div><div>' . $organiser . $locality . $time . '</div></div>';

}

/**
 * Returns a comma-separated string with course implementation title and study
 * credits if they differ from the ones in the course.
 */
function uhc_dc_render_differing_title_and_credits($course, $course_implementation) {
  $course_credit = field_get_items('node', $course, 'field_study_credit');
  if (isset($course_credit[0]['value'])) {
    $course_credit = $course_credit[0]['value'];
  }
  $imp_credit = field_get_items('node', $course_implementation, 'field_study_credit')[0]['value'];
  if (isset($imp_credit[0]['value'])) {
    $imp_credit = $imp_credit[0]['value'];
  }
  $output = $course_implementation->title != $course->title ? $course_implementation->title : '';
  $output .= $imp_credit != $course_credit ? ', ' . $imp_credit . ' ' . t('cr') : '';

  return $output;
}

function uhc_ds_title_and_credit($field) {
  $node = $field['entity'];
  $title_field = field_view_field('node', $node, 'title_field');
  $credit_field = field_view_field('node', $node, 'field_study_credit');

  $title = isset($title_field[0]['#markup']) ? $title_field[0]['#markup'] : '';
  $credit = isset($credit_field[0]['#markup']) ? $credit_field[0]['#markup'] : '';

  return $title . ', ' . $credit . ' ' . t('cr');
}

function uhc_ds_enrollment_period($field) {
  $enrollment_period = '';
  $node = $field['entity'];
  $enrollment_begin_date = uhc_ds_get_formatted_date_and_time($node, 'field_imp_enrollment_begin_date');
  $enrollment_end_date = uhc_ds_get_formatted_date_and_time($node, 'field_imp_enrollment_end_date');

  if (!empty($enrollment_begin_date) || !empty($enrollment_end_date)) {
    $enrollment_period = "$enrollment_begin_date - $enrollment_end_date";
  }

  return $enrollment_period;
}

function uhc_ds_get_formatted_date_and_time($node, $date_field_name) {
  $formatted_date_and_time = '';
  $field = field_view_field('node', $node, $date_field_name);
  $unix_timestamp = isset($field['#items'][0]['value']) ? strtotime($field['#items'][0]['value']) : NULL;

  if (isset($unix_timestamp)) {
    $date = date('j.n.Y', $unix_timestamp);
    $time = date('H:i', $unix_timestamp);
    $at = t('at');
    $formatted_date_and_time = "$date $at $time";
  }

  return $formatted_date_and_time;
}

function uhc_ds_table_of_contents($field) {
  $node = $field['entity'];
  $content_collections = !empty($node->field_content_collection) ? $node->field_content_collection[LANGUAGE_NONE]: 0;
  if (count($content_collections) > 1) {
    $items = array('attributes' => array('class' => 'list-of-links columns-2'));

    foreach ($content_collections as $content_collection) {
      $entity = field_collection_item_load($content_collection['value']);
      $title_field_raw = field_get_items('field_collection_item', $entity, 'title_field');
      $title = field_view_value('field_collection_item', $entity, 'title_field', $title_field_raw[0]);

      $items['items'][] = l(render($title), '',  array(
        'fragment' => render($title),
        'external' => TRUE,
        'attributes' => array('class' => 'button-anchor'),
      ));
    }
    return theme('item_list', $items);
  }
}

/**
 * Fetches subjects related to current course implementation and renders sidebar links to them
 */
function uhc_ds_link_to_subject($field) {
  if (!uhc_open_university_is_open_university_course_or_implementation($field['entity'])) {
    return;
  }
  $subjects = _uhc_ds_get_imp_subjects($field['entity']->nid);
  $items = array('attributes' => array('class' => 'list-of-links--dark'));

  // Render links to other implementations
  foreach ($subjects as $subject) {
    $course_ref = field_get_items('node', $field['entity'], 'field_imp_reference_to_courses');
    if (!empty($course_ref[0]['target_id'])) {
      $course = node_load($course_ref[0]['target_id']);
      $course_number = field_get_items('node', $course, 'field_course_course_number')[0]['value'];
    }
    // If the implementation belongs to more than one subject, specify subject names in links
    $subject_specifier = count($subjects) > 1 ? ' ' . $subject->title : '';
    if (!empty($subject->nid) && !empty($course_number)) {
      $items['items'][] = l(t('All courses') . $subject_specifier, "node/$subject->nid",  array(
        'fragment' => 'course-number-' . $course_number,
      ));
    }
  }

  // Render plain subject links
  foreach ($subjects as $subject) {
    if (!empty($subject->nid)) {
      $items['items'][] = l($subject->title, "node/$subject->nid",  array(
      ));
    }
  }
  return theme('item_list', $items);
}

/**
 * Helper that returns all subjects related to a course implementation. This
 * task is complicated by not only multiple references between the entities
 * but because there are also two possible reference pathways at one point.
 *
 *  Subject
 *    |
 *    | field_study_module
 *    v
 *  Study module (Field Collection)
 *    |
 *    | field_subject_ref_to_courses OR
 *    | field_subject_ref_study_module
 *    v
 *  Course
 *    ∧
 *    | field_imp_reference_to_courses
 *    |
 *  Course implementation
 *
 * @param $nid The course implementation node id
 * @return array containing the resulting subject node objects
 */
function _uhc_ds_get_imp_subjects($nid) {
  $query = db_select('field_data_field_imp_reference_to_courses', 'imp_to_course');
  // field_subject_ref_to_courses, used for most cases
  $query->leftJoin('field_data_field_subject_ref_to_courses', 'fc_to_course',
    'imp_to_course.field_imp_reference_to_courses_target_id = fc_to_course.field_subject_ref_to_courses_target_id');
  // field_subject_ref_study_module, used when the study module title is also a reference to a course
  $query->leftJoin('field_data_field_subject_ref_study_module', 'fc_to_course_2',
    'imp_to_course.field_imp_reference_to_courses_target_id = fc_to_course_2.field_subject_ref_study_module_target_id');
  $query->leftJoin('field_data_field_study_module', 'sub_to_fc',
    'fc_to_course.entity_id = sub_to_fc.field_study_module_value');
  $query->leftJoin('field_data_field_study_module', 'sub_to_fc_2',
    'fc_to_course_2.entity_id = sub_to_fc_2.field_study_module_value');
  $query->condition('imp_to_course.entity_id', $nid, '=')
    ->fields('sub_to_fc', array('entity_id'))
    ->fields('sub_to_fc_2', array('entity_id'));
  $query->distinct();
  $query = $query->execute()->fetchAll();
  $results = array();
  foreach ($query as $result) {
    $entity_id = $result->entity_id ?: $result->sub_to_fc_2_entity_id;
    $results[] = node_load($entity_id);
  }
  return $results;
}

/**
 * Fetches related content sections (field collection) from subject nodes
 * that are marked as "Show also on course page". These will be shown on
 * the sidebar of course implementations that belong to the same subject.
 */
function uhc_ds_link_to_related_subjects($field) {
  $subjects = _uhc_ds_get_imp_subjects($field['entity']->nid);
  $items = array('attributes' => array('class' => 'list-of-links--dark'));
  foreach ($subjects as $subject) {
    $query = db_select('field_data_field_related_content_section', 'sub_to_fc');
    $query->join('field_data_field_related_content', 'fc_to_rc',
      'sub_to_fc.field_related_content_section_value = fc_to_rc.entity_id');
    $query->join('field_data_field_related_content_visibility', 'fc_to_visibility',
      'sub_to_fc.field_related_content_section_value = fc_to_visibility.entity_id');
    // NOTE: field_related_content_title as in the title column in field_related_content, not
    // the field field_related_content_title
    $query->condition('sub_to_fc.entity_id', $subject->nid, '=')
      ->condition('fc_to_visibility.field_related_content_visibility_value', 1, '=')
      ->fields('fc_to_rc', array(
        'field_related_content_url',
        'field_related_content_title'
      ))
      ->fields('fc_to_visibility', array('field_related_content_visibility_value'));
    $query = $query->execute();
    while ($related_content = $query->fetchObject()) {
      $items['items'][] = l($related_content->field_related_content_title, $related_content->field_related_content_url);
    }
  }
  return theme('item_list', $items);
}

/**
 * If user has access, show Moodle key. Otherwise show login link.
 */
function uhc_ds_moodle_key_or_login($field) {
  $node = $field['entity'];
  $moodle_key = field_get_items('node', $node, 'field_moodle_key');
  $value = field_view_value('node', $node, 'field_moodle_key', $moodle_key[0]);

  if ($moodle_key) {
    if (!uhc_course_collaboration_private_current_user_has_access_to_private_content()) {
      $value['#markup'] = l(t('Log in'), shib_auth_generate_login_url()) . ' ' . t('to view the registration key for Moodle.');
    }
    else {
      $value['#markup'] = t('Moodle key') . ': ' . $value['#markup'];
    }
  }

  return render($value);
}

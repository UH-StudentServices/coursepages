<?php
/**
 * @file
 * Code for the uhc_ds feature.
 *
 * @license GPL, or GNU General Public License, version 3
 * @license http://opensource.org/licenses/GPL-3.0
 * @see README.md how to contribute to this project
 */

include_once 'uhc_ds.features.inc';

/**
 * Implements hook_theme().
 */
function uhc_ds_theme($existing, $type, $theme, $path) {
  return array(
    'uhc_ds_accordion_field' => array(
      'variables' => array('value' => '', 'label' => '', 'source' => '', 'node' => NULL),
    ),
  );
}

/**
 * Preprocessing CSS classes for theme('uhc_ds_accordion_field').
 * @param $variables
 */
function template_preprocess_uhc_ds_accordion_field(&$variables) {
  $variables['label_css_classes'] = '';
  // When user has permissions to update this node, we want to specify what is
  // the source of the value.
  if (!is_null($variables['node']) && node_access('update', $variables['node'])) {
    $variables['label_css_classes'] = 'accordion-content-item--label label-above legend ' . $variables['source'];
  }
  else {
    $variables['label_css_classes'] = 'accordion-content-item--label label-above';
  }
}

/**
 * Default theme('uhc_ds_accordion_field') callback for rendering course inherited field label-values.
 * @param $variables
 * @return string
 */
function theme_uhc_ds_accordion_field($variables) {
  $output = '<div class="accordion-content-item">';
  $output .= '<label class="' . $variables['label_css_classes'] . '">' . $variables['label'] . '</label>';
  $output .= '<div class="textarea">' . $variables['value'] . '</div>';
  $output .= '</div>';
  return $output;
}

/**
 * Implements hook_ds_fields_info().
 *
 * Introduce fields for bringing course fields to course implementation.
 */
function uhc_ds_ds_fields_info($entity_type) {
  if ($entity_type == 'node') {

    // This is the list of fields, we want to bring in from course node to
    // course implementation display suite package.
    $embeddable_fields = array(
      'uhc_ds_course_number' => array(
        'function' => 'uhc_ds_render_inherited_as_link',
        'field_name' => 'field_course_course_number',
        'label' => t('Course number'),
      ),
      // Fields that have no Course fallback but need language fallback
      'uhc_ds_fee' => array(
        'function' => 'uhc_ds_content_with_specific_langsort',
        'field_name' => 'field_imp_fee',
        'label' => t('Fee'),
      ),
      'uhc_ds_open_uni_registration' => array(
        'function' => 'uhc_ds_content_with_specific_langsort',
        'field_name' => 'field_open_uni_registration',
        'label' => t('Registration'),
      ),
    );

    $ds_fields = array();
    foreach ($embeddable_fields as $embeddable_field => $item) {
      if (isset($item['function'])) {
        $ds_fields[$embeddable_field] = array(
          'title' => $item['label'],
          'field_type' => DS_FIELD_TYPE_FUNCTION,
          'ui_limit' => array('course_implementation|*'),
          'function' => $item['function'],
          'properties' => array(
            'field_name' => $item['field_name'],
            'reference_field' => 'field_imp_reference_to_courses'
          ),
        );
      }
    }

    $ds_fields['uhc_ds_course_node_references'] = array(
      'title' => 'Course node references',
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'ui_limit' => array('course|*'),
      'function' => 'uhc_ds_course_node_references',
      'properties' => array(
        'field_name' => 'field_course_node_references',
        'view_name' => 'course_node_references',
      ),
    );

    $ds_fields['uhc_ds_course_node_references_table_list'] = array(
      'title' => 'Course node references (as table list)',
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'ui_limit' => array('course|*'),
      'function' => 'uhc_ds_course_node_references',
      'properties' => array(
        'field_name' => 'field_course_node_references',
        'view_name' => 'list_of_course_imps_in_course_node_view',
      ),
    );

    $ds_fields['uhc_ds_imp_status_org_location_date'] = array(
      'title' => 'Course Implementation status, organisation, location and date',
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'ui_limit' => array('course_implementation|*'),
      'function' => 'uhc_ds_status_org_location_date',
      'properties' => array(
        'field_name' => 'field_imp_status_org_location_date',
      ),
    );

    $ds_fields['uhc_ds_title_and_credit'] = array(
      'title' => 'Title and credit',
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'ui_limit' => array('course|*'),
      'function' => 'uhc_ds_title_and_credit',
      'properties' => array(
        'field_name' => 'title_and_credit',
      ),
    );

    $ds_fields['uhc_ds_enrollment_period'] = array(
      'title' => 'Enrolment period',
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'ui_limit' => array('course_implementation|*'),
      'function' => 'uhc_ds_enrollment_period',
      'properties' => array(
        'field_name' => 'enrollment_period',
      ),
    );

    $ds_fields['uhc_ds_table_of_contents'] = array(
      'title' => 'Table of contents',
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'ui_limit' => array('portal_page|*'),
      'function' => 'uhc_ds_table_of_contents',
      'properties' => array(
        'field_name' => 'table_of_contents',
      ),
    );

    $ds_fields['uhc_ds_link_to_subject'] = array(
      'title' => 'Link to subject',
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'ui_limit' => array('course_implementation|*'),
      'function' => 'uhc_ds_link_to_subject',
      'properties' => array(
        'field_name' => 'link_to_subject',
      ),
    );

    $ds_fields['uhc_ds_moodle_key_or_login'] = array(
      'title' => 'Moodle key or login',
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'ui_limit' => array('course_implementation|*'),
      'function' => 'uhc_ds_moodle_key_or_login',
      'properties' => array(
        'field_name' => 'moodle_key_or_login',
      ),
    );

    $ds_fields['uhc_ds_link_to_related_subjects'] = array(
      'title' => 'Link to related subjects',
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'ui_limit' => array('course_implementation|*'),
      'function' => 'uhc_ds_link_to_related_subjects',
      'properties' => array(
        'field_name' => 'link_to_related_subjects',
      ),
    );

    $ds_fields['uhc_ds_course_hierarchy'] = array(
      'title' => 'Course hierarchy',
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'ui_limit' => array('course_implementation|*'),
      'function' => 'uhc_ds_course_hierarchy',
      'properties' => array(
        'field_name' => 'course_hierarchy',
      ),
    );

    $ds_fields['uhc_ds_finna_link'] = array(
      'title' => 'Link to Finna search',
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => 'uhc_ds_finna_link',
      'properties' => array(
        'field_name' => 'finna_link',
      ),
    );

    return array('node' => $ds_fields);
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function uhc_ds_entity_info_alter(&$entity_info) {
  // Add new view mode for showing content on sidebar
  $entity_info['node']['view modes']['sidebar'] = array(
    'label' => t('Sidebar'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_preprocess_node().
 */
function uhc_ds_preprocess_node(&$vars) {
  if ($vars['view_mode'] == 'sidebar') {
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['node']->type . '__sidebar';
  }
}

/**
 * Renders inherited field as link to course node.
 */
function uhc_ds_render_inherited_as_link($field) {
  $node = $field['entity'];

  $course_nid = isset($node->field_imp_reference_to_courses[LANGUAGE_NONE][0]['target_id'])
    ? $node->field_imp_reference_to_courses[LANGUAGE_NONE][0]['target_id']
    : NULL;

  if ($course_nid) {
    $value = uhc_ds_render_inherited_ds_field($field);
    $uri = entity_uri('node', node_load($course_nid));
    return l($value, $uri['path']);
  }
}

/**
 * This is an callback for rendering an display suite field.
 * @see uhc_ds_ds_fields_info()
 */
function uhc_ds_render_inherited_ds_field($field = NULL, $langcode = NULL) {
  if (!$langcode) {
    $langcode = i18n_langcode();
  }
  // This is the node we're rendering at the moment.
  $node = $field['entity'];

  // This is th field, where we find out the course node where we take the field
  // for rendering.
  $reference_field = $field['properties']['reference_field'];

  // This is the field, we want to embed
  $field_name = $field['properties']['field_name'];

  // If there's reference to course(s) set, load the node, so we can render its
  // fields
  $course_node = NULL;
  if (isset($node->{$reference_field}[LANGUAGE_NONE])) {
    foreach ($node->{$reference_field}[LANGUAGE_NONE] as $item) {
      if (isset($item['target_id'])) {
        $course_node = node_load($item['target_id']);
        break;
      }
    }
  }

  // If we don't have course node, return nothing!
  if (is_null($course_node)) {
    return NULL;
  }

  // Get values and return the first item. TODO: How we handle multiple values?
  $values = field_get_items('node', $course_node, $field_name, $langcode);
  if ($values) {
    $value = field_view_value('node', $course_node, $field_name, $values[0]);
    return render($value);
  }
}

/**
 * DS callback function for rendering specified field in a specific language
 * sorting that is done in uh_coursepages_render_field_value().
 *
 * @see uhc_ds_ds_fields_info()
 * @see uh_coursepages_render_field_value()
 */
function uhc_ds_content_with_specific_langsort($field = NULL) {
  $value = uh_coursepages_render_field_value($field['entity'], $field['properties']['field_name']);
  if (!is_null($value)) {
    return theme('uhc_ds_accordion_field', array(
      'value' => $value,
      'label' => $field['title'],
      'source' => 'course',
    ));
  }
}

/**
 * Callback for rendering course node reference accordion views. Uses node ID as an
 * argument to make the view's work when displayed on subject nodes.
 */
function uhc_ds_course_node_references($field) {
  if (empty($field['properties']['view_name'])) {
    return NULL;
  }
  $output = views_embed_view($field['properties']['view_name'], 'block', $field['entity']->nid);
  if (views_get_view_result($field['properties']['view_name'], 'block_1', $field['entity']->nid)) {
    $output .= views_embed_view($field['properties']['view_name'], 'block_1', $field['entity']->nid);
  }
  return $output;
}

/**
 * Render status, organization/organiser, location, date and flexible start info
 * for Course implementation nodes.
 */
function uhc_ds_status_org_location_date($field) {
  $node = $field['entity'];

  $imp_fields = array(
    'field_imp_begin_date' => array('label' => 'hidden'),
    'field_imp_end_date' => array('label' => 'hidden'),
    'field_imp_course_organiser' => array('label' => 'hidden'),
    'field_imp_locality' => array('label' => 'hidden'),
    'field_imp_flexible_start' => array('type' => 'flexible_start', 'label' => 'hidden'),
  );

  // extract field values
  foreach ($imp_fields as $imp_field => $display) {
    $values[$imp_field] = field_view_field('node', $node, $imp_field, $display);
  }

  $status = field_view_field('node', $node, 'field_cancelled', array('type' => 'cancelled', 'label' => 'hidden'));

  // format date values
  $begin_date = isset($values['field_imp_begin_date']['#items'][0]['value']) ? date('j.n.Y', strtotime($values['field_imp_begin_date']['#items'][0]['value'])) : '';
  $end_date = isset($values['field_imp_end_date']['#items'][0]['value']) ? ' - ' . date('j.n.Y', strtotime($values['field_imp_end_date']['#items'][0]['value'])) : '';
  $time = ' ' . $begin_date . $end_date;

  $open_university = uhc_open_university_is_open_university_course_or_implementation($node);
  $organisation_names = $open_university ? '' : uhc_ds_get_rendered_organisation_names($node);
  $organiser = isset($values['field_imp_course_organiser'][0]['#markup']) ? $values['field_imp_course_organiser'][0]['#markup'] : uhc_ds_get_imp_course_organiser_fallback($node);
  $rendered_organiser = $open_university ? '<span class="field-imp-course-organiser">' . $organiser . '</span>' : '';
  $locality = $open_university && isset($values['field_imp_locality']) ? render($values['field_imp_locality']) : '';
  $course = node_load(field_get_items('node', $node, 'field_imp_reference_to_courses')[0]['target_id']);
  $flexible_start = isset($values['field_imp_flexible_start']) ? render($values['field_imp_flexible_start']) : '';
  $method_of_study = uhc_ds_get_rendered_method_of_study($node);
  $method_of_study = $method_of_study ? "$method_of_study, " : '';

  // when not viewing a course node, display title and credits only if they differ from the ones in the course.
  $title_and_credits = '';
  if (arg(0) == 'node') {
    $node_viewed = menu_get_object();
    if ($node_viewed->type == 'course') {
      $title_and_credits = uhc_ds_title_and_credit($field);
    }
    else {
      $title_and_credits = uhc_dc_render_differing_title_and_credits($course, $node);
    }
  }

  $rendered_title_and_credits = '<div class="org-location-date list-of-links__link button--action icon--arrow-right theme-transparent"><div>'
    . $title_and_credits
    . '</div><div>';

  return render($status)
    . $rendered_title_and_credits
    . $method_of_study
    . $organisation_names
    . $rendered_organiser
    . $locality
    . $time
    . $flexible_start
    . '</div></div>';
}

/**
 * @param $node
 * @return string
 */
function uhc_ds_get_rendered_organisation_names($node) {
  $organisation_field_items = field_get_items('node', $node, 'field_imp_organisation');
  $rendered_organisation_names = array();

  if (!empty($organisation_field_items)) {
    $rendered_organisation_names = array_map(function ($term) {
      return '<span class="field-imp-organisation">' . check_plain($term->name) . '</span>';
    }, taxonomy_term_load_multiple(array_column($organisation_field_items, 'tid')));
  }

  return implode(', ', $rendered_organisation_names);
}

/**
 * @param $node
 * @return string
 */
function uhc_ds_get_rendered_method_of_study($node) {
  $method_of_study_field_items = field_get_items('node', $node, 'field_imp_method_of_study');
  $rendered_method_of_study = array();

  if (!empty($method_of_study_field_items)) {
    $rendered_method_of_study = array_map(function ($term) {
      return '<span class="field-imp-method-of-study">' . check_plain($term->name) . '</span>';
    }, taxonomy_term_load_multiple(array_column($method_of_study_field_items, 'tid')));
  }

  return implode(', ', $rendered_method_of_study);
}

function uhc_ds_get_imp_course_organiser_fallback($node) {
  $organiser_fi = field_view_field('node', $node, 'field_imp_course_organiser', array('label' => 'hidden'), 'fi');

  return isset($organiser_fi[0]['#markup']) ? $organiser_fi[0]['#markup'] : '';
}

/**
 * Returns a comma-separated string with course implementation title and study
 * credits if they differ from the ones in the course.
 */
function uhc_dc_render_differing_title_and_credits($course, $course_implementation) {
  $course_credit = field_get_items('node', $course, 'field_study_credit');
  if (isset($course_credit[0]['value'])) {
    $course_credit = $course_credit[0]['value'];
  }
  $imp_credit = field_get_items('node', $course_implementation, 'field_study_credit')[0]['value'];
  if (isset($imp_credit[0]['value'])) {
    $imp_credit = $imp_credit[0]['value'];
  }
  $output = $course_implementation->title != $course->title ? $course_implementation->title : '';
  $output .= $imp_credit != $course_credit ? ', ' . $imp_credit . ' ' . t('cr') : '';

  return $output;
}

function uhc_ds_title_and_credit($field) {
  $node = $field['entity'];
  $title_field = field_view_field('node', $node, 'title_field');
  $credit_field = field_view_field('node', $node, 'field_study_credit');

  $title = isset($title_field[0]['#markup']) ? $title_field[0]['#markup'] : '';
  $credit = isset($credit_field[0]['#markup']) ? $credit_field[0]['#markup'] : '';

  return $title . ', ' . $credit . ' ' . t('cr');
}

/**
 * @param $field
 * @return string
 * @see https://wiki.helsinki.fi/pages/viewpage.action?pageId=202029321
 */
function uhc_ds_enrollment_period($field) {
  $enrollment_period = '';
  $node = $field['entity'];
  $hide_sign_up_button = uhc_course_implementation_should_hide_sign_up($node);
  $enrollment_begin_date = uhc_ds_get_formatted_date_and_time($node, 'field_imp_enrollment_begin_date');
  $enrollment_end_date = uhc_ds_get_formatted_date_and_time($node, 'field_imp_enrollment_end_date');

  if (!$hide_sign_up_button &&
    (!empty($enrollment_begin_date) || !empty($enrollment_end_date)) &&
    !uhc_sources_is_from_organisation($node, 'H930') === TRUE &&
    !uhc_course_implementation_is_organised_by_open_uni($node)) {
    $enrollment_period = "$enrollment_begin_date - $enrollment_end_date";
  }

  return $enrollment_period;
}

function uhc_ds_get_formatted_date_and_time($node, $date_field_name) {
  $formatted_date_and_time = '';
  $field = field_view_field('node', $node, $date_field_name);
  $unix_timestamp = isset($field['#items'][0]['value']) ? strtotime($field['#items'][0]['value']) : NULL;

  if (isset($unix_timestamp)) {
    $date = date('j.n.Y', $unix_timestamp);
    $time = date('H:i', $unix_timestamp);
    $at = t('at');
    $formatted_date_and_time = "$date $at $time";
  }

  return $formatted_date_and_time;
}

function uhc_ds_table_of_contents($field) {
  $node = $field['entity'];
  $content_collections = !empty($node->field_content_collection) ? $node->field_content_collection[LANGUAGE_NONE]: 0;
  if (count($content_collections) > 1) {
    $items = array('attributes' => array('class' => 'list-of-links columns-2'));

    foreach ($content_collections as $content_collection) {
      $entity = field_collection_item_load($content_collection['value']);
      $title_field_raw = field_get_items('field_collection_item', $entity, 'title_field');
      $title = field_view_value('field_collection_item', $entity, 'title_field', $title_field_raw[0]);

      // add link classes
      $options = array(
        'attributes' => array(
          'class' => array(
            'list-of-links__link',
            'button--action-before',
            'icon--arrow-down',
            'theme-transparent',
          ),
        ),
        'fragment' => render($title),
        'external' => TRUE,
      );

      $items['items'][] = l(render($title), '',  $options);
    }
    return theme('item_list', $items);
  }
}

/**
 * Fetches subjects related to current course implementation and renders sidebar links to them
 */
function uhc_ds_link_to_subject($field) {
  if (!uhc_open_university_is_open_university_course_or_implementation($field['entity'])) {
    return;
  }
  $subjects = _uhc_ds_get_imp_subjects($field['entity']->nid);
  $items = array('attributes' => array('class' => 'list-of-links'));

  // Render links to other implementations
  foreach ($subjects as $subject) {
    $course_ref = field_get_items('node', $field['entity'], 'field_imp_reference_to_courses');
    if (!empty($course_ref[0]['target_id'])) {
      $course = node_load($course_ref[0]['target_id']);
      $course_number = field_get_items('node', $course, 'field_course_course_number')[0]['value'];
    }

    // add link classes
    $options = array(
      'attributes' => array(
        'class' => array(
          'list-of-links__link',
          'button--action',
          'icon--arrow-right',
        ),
      ),
    );

    // If the implementation belongs to more than one subject, specify subject names in links
    $subject_specifier = count($subjects) > 1 ? ' ' . $subject->title : '';
    if (!empty($subject->nid) && !empty($course_number)) {
      $options['fragment'] = 'course-number-' . $course_number;
      $items['items'][] = l(t('All courses') . $subject_specifier, "node/$subject->nid", $options);
    }
  }

  // Render plain subject links
  foreach ($subjects as $subject) {
    if (!empty($subject->nid)) {
      $items['items'][] = l($subject->title, "node/$subject->nid",  $options);
    }
  }
  return theme('item_list', $items);
}

/**
 * Helper that returns all subjects related to a course implementation. This
 * task is complicated by not only multiple references between the entities
 * but because there are also two possible reference pathways at one point.
 *
 *  Subject
 *    |
 *    | field_study_module
 *    v
 *  Study module (Field Collection)
 *    |
 *    | field_subject_ref_to_courses OR
 *    | field_subject_ref_study_module
 *    v
 *  Course
 *    ∧
 *    | field_imp_reference_to_courses
 *    |
 *  Course implementation
 *
 * @param $nid The course implementation node id
 * @return array containing the resulting subject node objects
 */
function _uhc_ds_get_imp_subjects($nid) {
  $query = db_select('field_data_field_imp_reference_to_courses', 'imp_to_course');
  // field_subject_ref_to_courses, used for most cases
  $query->leftJoin('field_data_field_subject_ref_to_courses', 'fc_to_course',
    'imp_to_course.field_imp_reference_to_courses_target_id = fc_to_course.field_subject_ref_to_courses_target_id');
  // field_subject_ref_study_module, used when the study module title is also a reference to a course
  $query->leftJoin('field_data_field_subject_ref_study_module', 'fc_to_course_2',
    'imp_to_course.field_imp_reference_to_courses_target_id = fc_to_course_2.field_subject_ref_study_module_target_id');
  $query->leftJoin('field_data_field_study_module', 'sub_to_fc',
    'fc_to_course.entity_id = sub_to_fc.field_study_module_value');
  $query->leftJoin('field_data_field_study_module', 'sub_to_fc_2',
    'fc_to_course_2.entity_id = sub_to_fc_2.field_study_module_value');
  $query->condition('imp_to_course.entity_id', $nid, '=')
    ->fields('sub_to_fc', array('entity_id'))
    ->fields('sub_to_fc_2', array('entity_id'));
  $query->distinct();
  $query = $query->execute()->fetchAll();
  $results = array();
  foreach ($query as $result) {
    $entity_id = $result->entity_id ?: $result->sub_to_fc_2_entity_id;

    if (isset($entity_id)) {
      $results[] = node_load($entity_id);
    }
  }

  return $results;
}

/**
 * Fetches related content sections (field collection) from subject nodes
 * that are marked as "Show also on course page". These will be shown on
 * the sidebar of course implementations that belong to the same subject.
 */
function uhc_ds_link_to_related_subjects($field) {
  $subjects = _uhc_ds_get_imp_subjects($field['entity']->nid);
  $items = array('attributes' => array('class' => 'list-of-links'));

  // add link classes
  $options = array(
    'attributes' => array(
      'class' => array(
        'list-of-links__link',
        'button--action',
        'icon--arrow-right',
      ),
    ),
  );

  global $language;
  $current_language = $language->language;

  foreach ($subjects as $subject) {
    $query = db_select('field_data_field_related_content_section', 'sub_to_fc');
    $query->join('field_data_field_related_content', 'fc_to_rc', 'sub_to_fc.field_related_content_section_value = fc_to_rc.entity_id');
    $query->join('field_data_field_related_content_visibility', 'fc_to_visibility', 'sub_to_fc.field_related_content_section_value = fc_to_visibility.entity_id');
    $query->condition('sub_to_fc.entity_id', $subject->nid);
    $query->condition('sub_to_fc.language', array($current_language, LANGUAGE_NONE));
    $query->condition('fc_to_visibility.field_related_content_visibility_value', 1);
    // NOTE: field_related_content_title as in the title column in
    // field_related_content, not the field field_related_content_title.
    $query->fields('fc_to_rc', array('field_related_content_url', 'field_related_content_title'));
    $query->fields('fc_to_visibility', array('field_related_content_visibility_value'));
    $query = $query->execute();

    while ($related_content = $query->fetchObject()) {
      $items['items'][] = l($related_content->field_related_content_title, $related_content->field_related_content_url, $options);
    }
  }
  return theme('item_list', $items);
}

/**
 * If user has access, show Moodle key. Otherwise show login link.
 */
function uhc_ds_moodle_key_or_login($field) {
  $node = $field['entity'];
  $moodle_key = field_get_items('node', $node, 'field_moodle_key');
  $value = field_view_value('node', $node, 'field_moodle_key', $moodle_key[0]);

  if ($moodle_key) {
    if (!uhc_course_collaboration_private_current_user_has_access_to_private_content() && user_is_anonymous()) {
      $value['#markup'] = l(t('Log in'), shib_auth_generate_login_url()) . ' ' . t('to view the registration key for Moodle.');
    }
    elseif (!uhc_course_collaboration_private_current_user_has_access_to_private_content() && !user_is_anonymous()) {
      $value['#markup'] = t('Sign up for the course to view the registration key for Moodle.');
    }
    else {
      $value['#markup'] = t('Enrolment key') . ': ' . '<span>' . $value['#markup'] . '</span>';
    }
  }

  return render($value);
}

/**
 * Render course hierarchy as a nested item-list.
 */
function uhc_ds_course_hierarchy($field) {
  $node = $field['entity'];
  $root_node = uhc_course_hierarchy_get_course_hierarchy_root($node);
  if (!node_access('view', $root_node) || !uhc_course_hierarchy_get_course_children($root_node)) {
    // If we do not have access to view root node, or root node doesn't have any children, forget about the hierarchy.
    return '';
  }

  // Setup items list.
  $uri = entity_uri('node', $root_node);
  $label = entity_label('node', $root_node);
  $items = array('attributes' => array('class' => 'course-hierarchy', 'id' => 'course-hierarchy'));

  // Add items and its children
  $items['items'][] = array(
    'title' => $label,
    'data' => node_access('view', $root_node) ? l($label, $uri['path']) : l($label, '<front>'),
    'class' => uhc_course_hierarchy_get_attributes($root_node),
    'children' => uhc_course_hierarchy_get_course_children($root_node),
  );

  // Title was originally for sorting, after that's done. Unset it, so it don't
  // potentially confuse theme or other modules.
  foreach ($items['items'] as &$item) {
    unset($item['title']);
  }

  return theme('item_list', $items);
}

/**
 * Renders a link to Finna if showing one has been enabled, using the title
 * and publication year as search parameters.
 */
function uhc_ds_finna_link($field) {
  $show_link = field_get_items('node', $field['entity'], 'field_material_show_finna_link');
  $publication_year = field_get_items('node', $field['entity'], 'field_material_publication_year');
  if (!empty($show_link[0]['value']) && !empty($publication_year[0]['value'])) {
    $link = 'https://www.finna.fi/Search/Results?lookfor=' . $field['entity']->title .
    '&prefiltered=-&SearchForm_submit=Hae&sort=relevance&retainFilters=0' .
    '&sdaterange[]=search_sdaterange_mv&search_sdaterange_mvtype=within' .
    '&search_sdaterange_mvfrom=' . $publication_year[0]['value'] . '&search_sdaterange_mvto=' . $publication_year[0]['value'];
    global $language;
    // Use current language in Finna as well. fi and sv are the same but en is "en-gb".
    $link .= '&lng=' . ($language->language == 'en' ? 'en-gb' : $language->language);
    $value = array('#markup' => l(t('Finna'), $link, array('external' => TRUE)));
    return render($value);
  }
}

/**
 * Implements hook_ds_pre_render_alter().
 *
 * Add fallback organiser (using Finnish value, if the value for the current
 * language is missing.
 */
function uhc_ds_ds_pre_render_alter(&$layout_render_array, $context, &$vars) {
  if ($context['entity_type'] == 'node' && $context['bundle'] == 'course_implementation' && $context['view_mode'] == 'full') {
    $node = $context['entity'];
    $has_organiser = FALSE;

    foreach ($layout_render_array['course_metadata'] as $field) {
      if ($field['#field_name'] == 'field_imp_course_organiser' && isset($field['#items'][0]['value'])) {
        $has_organiser = TRUE;
        break;
      }
    }

    if (!$has_organiser) {
      $organiser_fi = field_view_field('node', $node, 'field_imp_course_organiser', array('label' => 'hidden'), 'fi');

      if ($organiser_fi) {
        // Need to set the field weight to render at correct position.
        $organiser_fi['#weight'] = 10;
        array_push($layout_render_array['course_metadata'], $organiser_fi);
      }
    }
  }
}

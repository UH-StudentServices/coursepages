<?php
/**
 * @file
 * Drupal module implementation.
 *
 * @license GPL, or GNU General Public License, version 3
 * @license http://opensource.org/licenses/GPL-3.0
 * @see README.md how to contribute to this project
 */

/**
 * Implements hook_uhc_activemq_connector_message_processor_info().
 */
function uhc_course_source_uhc_activemq_connector_message_processor_info() {
  $default_queue_name = variable_get('uhc_activemq_connector_default_queue', 'doo.local1.kurssisivu.in');
  return array(
    $default_queue_name => array(
      array('class_name' => 'UHCCourseMessageProcessor', 'implements' => 'UHCMessageQueueProcessorInterface')
    ),
  );
}

/**
 * Imports given course number no matter whether it exist in system already or
 * not.
 *
 * @param $course_number
 *   The course number of the course to import.
 * @return bool|object
 *   Returns FALSE if failed to import. Node object when successfully imported.
 */
function uhc_course_source_import($course_number) {

  // Construct the URLs for source class
  $item_url = variable_get('uhc_course_source_item_url', '');
  $item_url = PortalMigrationBase::prependHostIfMissing($item_url);

  /** @var $migration CourseNodeMigration */
  $migration = Migration::getInstance('CourseNode', 'CourseNodeMigration', array('predefined_ids' => $course_number, 'predefined_item' => $item_url));
  $migration->prepareUpdate();
  $result = $migration->processImport();
  if ($result == Migration::RESULT_COMPLETED) {

    // Use EntityFieldQuery to find out the node id. Then load and return it.
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'course')
      ->fieldCondition('field_course_course_number', 'value', $course_number)
      ->execute();
    if (isset($result['node'])) {
      foreach ($result['node'] as $nid => $item) {
        return node_load($nid);
      }
    }
    else {
      watchdog('uhc_course_source', 'Node with course number @course_number was imported but could not be loaded.', array('@course_number' => $course_number), WATCHDOG_ERROR);
      return FALSE;
    }

  }
  else {
    watchdog('uhc_course_source', 'Failed to process importing, migration returned "@result" as result.', array('@result' => $result), WATCHDOG_ERROR);
    return FALSE;
  }

}

/**
 * Helper function for resolving nid for given course number.
 *
 * @param $course_number
 * @return mixed|null
 */
function _uhc_course_source_resolve_nid($course_number) {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'course')
    ->fieldCondition('field_course_course_number', 'value', $course_number)
    ->execute();
  return !empty($result['node']) ? reset(array_keys($result['node'])) : NULL;
}

/**
 * Helper function for creating a stub node for given course number. Note that
 * if this function is called more than once during a bootstrap, it will return
 * initially created stub for given course number.
 *
 * @see CourseNodeMigration::createStub()
 * @see uhc_course_source_stubisize_courseless()
 * @see uhc_course_source_handle_stubs()
 * @param $course_number
 * @return bool
 */
function _uhc_course_source_create_stub($course_number) {
  $created_stubs = &drupal_static('_uhc_course_source_created_stubs', array());
  if (!isset($created_stubs[$course_number])) {
    // If it's not created during this bootstrap, then create it.
    $values = array(
      'type' => 'course',
      // IMPORTANT: See uhc_course_source_handle_stubs() how it detects stub
      // nodes.
      'title' => 'Untitled course for ' . $course_number,
      'uid' => 1,
      'status' => 0,
      'field_course_course_number' => array(LANGUAGE_NONE => array(array('value' => $course_number)))
    );
    $node = entity_create('node', $values);
    node_save($node);

    // For static usage, we store this to static variable if this gets called
    // more than once for given course number.
    $created_stubs[$course_number] = $node;
  }

  return $created_stubs[$course_number];
}

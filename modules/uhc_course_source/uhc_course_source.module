<?php
/**
 * @file
 * Drupal module implementation.
 *
 * @license GPL, or GNU General Public License, version 3
 * @license http://opensource.org/licenses/GPL-3.0
 * @see README.md how to contribute to this project
 */

/**
 * Implements hook_uhc_activemq_connector_message_processor_info().
 */
function uhc_course_source_uhc_activemq_connector_message_processor_info() {
  $default_queue_name = variable_get('uhc_activemq_connector_default_queue', 'doo.local1.kurssisivu.in');
  return array(
    $default_queue_name => array(
      array('class_name' => 'UHCCourseMessageProcessor', 'implements' => 'UHCMessageQueueProcessorInterface')
    ),
  );
}

/**
 * Imports given course number no matter whether it exist in system already or
 * not.
 *
 * @param $course_number
 *   The course number of the course to import.
 * @return bool|object
 *   Returns FALSE if failed to import. Node object when successfully imported.
 */
function uhc_course_source_import($course_number) {

  // Construct the URLs for source class
  $item_url = variable_get('uhc_course_source_item_url', '');
  $item_url = PortalMigrationBase::prependHostIfMissing($item_url);

  /** @var $migration CourseNodeMigration */
  $migration = new CourseNodeMigration(array('predefined_ids' => array($course_number), 'predefined_item' => $item_url));
  $migration->prepareUpdate();
  $result = $migration->processImport();
  if ($result == Migration::RESULT_COMPLETED) {

    // Use EntityFieldQuery to find out the node id. Then load and return it.
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'course')
      ->fieldCondition('field_course_course_number', 'value', $course_number)
      ->execute();
    if (isset($result['node'])) {
      foreach ($result['node'] as $nid => $item) {
        return node_load($nid);
      }
    }
    else {
      watchdog('uhc_course_source', 'Node with course number @course_number was imported but could not be loaded.', array('@course_number' => $course_number), WATCHDOG_ERROR);
      return FALSE;
    }

  }
  else {
    watchdog('uhc_course_source', 'Failed to process importing, migration returned "@result" as result.', array('@result' => $result), WATCHDOG_ERROR);
    return FALSE;
  }

}

/**
 * Helper function for resolving nid for given course number.
 *
 * @param $course_number
 * @return mixed|null
 */
function _uhc_course_source_resolve_nid($course_number) {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'course')
    ->fieldCondition('field_course_course_number', 'value', $course_number)
    ->execute();
  return !empty($result['node']) ? reset(array_keys($result['node'])) : NULL;
}

/**
 * Processes batch if UHQueueItem objects that should be imported through
 * migrate.
 * @param array $items
 * @see drush_uhc_sources_uhc_process_queue()
 */
function _uhc_course_source_process_update_batch($items) {
  $ids = array();
  /** @var UHOodiQueueItem $item */
  foreach ($items as $item) {
    $ids[] = $item->getId();
  }

  // Construct the URLs for source class
  $item_url = variable_get('uhc_course_source_item_url', '');
  $item_url = PortalMigrationBase::prependHostIfMissing($item_url);

  /** @var $migration CourseNodeMigration */
  $migration = new CourseNodeMigration(array('predefined_ids' => $ids, 'predefined_item' => $item_url));
  $migration->prepareUpdate();
  $result = $migration->processImport();
  if ($result != Migration::RESULT_COMPLETED) {
    watchdog('uhc_course_source', 'Migration for update batch has failed', array(), WATCHDOG_ERROR);
  }
}

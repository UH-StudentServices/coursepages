<?php
/**
 * @file
 * Code for the § open university feature.
 *
 * @license GPL, or GNU General Public License, version 3
 * @license http://opensource.org/licenses/GPL-3.0
 * @see README.md how to contribute to this project
 */

include_once 'uhc_open_university.features.inc';

/**
 * Implements hook_menu_block_blocks().
 */
function uhc_open_university_menu_block_blocks() {
  return array(
    'open-university-nav-level2' => array(
      'admin_title' => 'Open university navigation (level 2+)',
      'depth'       => 0,
      'expanded'    => TRUE,
      'follow'      => FALSE,
      'level'       => 1,
      'menu_name'   => 'menu-open-university-navigation',
      'parent_mlid' => 0,
      'sort'        => TRUE,
      'title_link'  => FALSE,
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function uhc_open_university_block_info() {
  $blocks = array();
  $blocks['uhc_open_university_contactblock'] = array(
    'info' => t('HY Open University Contact information'),
  );
  return $blocks;
}

/**
* Implements hook_block_view().
*/
function uhc_open_university_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'uhc_open_university_contactblock':

      // Specify current realm for fetching variables
      global $language;
      $realm = 'language';
      $realm_key = $language->language;
      $content = variable_store_get($realm, $realm_key, 'uhc_open_university_contactblock');

      $block['subject'] = '';
      $block['content'] = array('#markup' => $content['value'], '#format' => $content['format']);
      break;
  }

  return $block;
}

/**
 * Implements hook_context_plugins().
 */
function uhc_open_university_context_plugins() {
  $plugins = array();
  $plugins['uhc_open_university_is_open_university_section'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'uhc_open_university') .'/plugins',
      'file' => 'uhc_open_university_context_condition_open_university_section.inc',
      'class' => 'uhc_open_university_context_condition_open_university_section',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_context_registry().
 */
function uhc_open_university_context_registry() {
  return array(
    'conditions' => array(
      'uhc_open_university_context_condition_open_university_section' => array(
        'title' => t('Open university section'),
        'plugin' => 'uhc_open_university_is_open_university_section',
      ),
    ),
  );
}

/**
 * Implements hook_node_view().
 */
function uhc_open_university_node_view($node, $view_mode, $langcode) {
  if ($plugin = context_get_plugin('condition', 'uhc_open_university_context_condition_open_university_section')) {
    $plugin->execute($node);
  }
}

/**
 * Implementation of hook_menu().
 */
function uhc_open_university_menu() {
  // Empty page callback for open-university, so that we may populate them with
  // blocks using context.
  $items['open-university'] = array(
    'page callback' => 'uhc_open_university_page',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implementation of hook_page().
 */
function uhc_open_university_page() {
  return ' ';
}

/**
 * Is the given node Open university course or course implementation?
 *
 * @param $node object Node.
 * @return bool TRUE if the node is Open university course or course
 * implementation node, otherwise FALSE.
 */
function uhc_open_university_is_open_university_course_or_implementation($node) {

  // If node type is course and there's migration source set
  if ($node->type == 'course') {
    $results = db_query('select entity_id from {field_data_field_imp_reference_to_courses}
                         where field_imp_reference_to_courses_target_id = :nid',
                         array(':nid' => $node->nid))->fetchAllAssoc('entity_id');
    foreach ($results as $result) {
      if (uhc_open_university_is_open_university_course_or_implementation(node_load($result->entity_id))) {
        return TRUE;
      }
    }

    // If we get to this, it means that we got a course node which has no
    // course implementations having open university organisation code listed.
    return FALSE;
  }
  elseif ($node->type == 'course_implementation') {
    return uhc_sources_is_from_organisation($node, 'H930');
  }
  elseif ($node->type == 'portal_page') {
    return field_get_items('node', $node, 'field_liftup_section')[0]['value'] == 'openuniversity';
  }

  // If we get to this, it means that we have tried to call this method with a
  // node from which we can't say whether it's from open university or not.
  return FALSE;
}

/**
 * Implements hook_form_alter().
 *
 * Modifies open university view for two things:
 *   1) Creates an custom sorting form element for picking sortable field and
 *      sorting type
 *   2) Moves items per page element into shared container with above
 *
 * Note: This technical approach is initial version of this type of sorting. We
 * probably consider something better in following tickets.
 *
 * @see uhc_open_university_form_apply_sort()
 */
function uhc_open_university_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] != 'views-exposed-form-uhc-search-open-university-desktop') {
    return;
  }

  $submit_on_change_script = 'this.form.submit();';
  $form['items_per_page']['#attributes']['onchange'][] = $submit_on_change_script;

  $form['contact'] = array(
    '#type' => 'container',
    '#weight' => 5,
    '#attributes' => array(
      'class' => array(
        'pager-and-sorting-controls',
      ),
    ),
    'sorting' => array(
      '#type' => 'select',
      '#options' => array(
        'title_field:asc' => t('By name A-Ö'),
        'title_field:desc' => t('By name Ö-A'),
        'field_imp_locality:asc' => t('By location A-Ö'),
        'field_imp_locality:desc' => t('By location Ö-A'),
        'field_imp_begin_date:asc' => t('Ascending by begin date'),
        'field_imp_begin_date:desc' => t('Descending by begin date'),
      ),
      '#default_value' => 'title_field:asc',
      '#title' => t('Sort:'),
      '#attributes' => array('onchange' => $submit_on_change_script),
    ),
    'items_per_page' => $form['items_per_page'],
  );

  unset($form['items_per_page']);
  $form['#submit'][] = 'uhc_open_university_form_apply_sort';
}

/**
 * This form submission callback applies sorting preferences as defined in
 * custom sorting form element.
 *
 * Note: This technical approach is initial version of this type of sorting. We
 * probably consider something better in following tickets.
 *
 * @see uhc_open_university_form_alter()
 */
function uhc_open_university_form_apply_sort(&$form, &$form_state) {
  if (isset($_GET['search']) && isset($form_state['values']['sorting'])) {
    $sort = explode(':', $form_state['values']['sorting']);
    $_GET['order'] = $sort[0];
    $_GET['sort'] = $sort[1];
  }
}

// hide info-link from user menu if in open university section
function uhc_open_university_translated_menu_link_alter(&$item, $map) {
  $menu_item_has_info_link_class = $item['menu_name'] == 'user-menu'
    && isset($item['options']['attributes']['class'][0])
    && $item['options']['attributes']['class'][0] == 'info-link';

  if ($menu_item_has_info_link_class) {
    $open_university_path = arg(0) == 'open-university';
    $node = menu_get_object();
    $open_university_node = isset($node) && uhc_open_university_is_open_university_course_or_implementation($node);

    if ($open_university_path || $open_university_node) {
      $item['hidden'] = 1;
    }
  }
}

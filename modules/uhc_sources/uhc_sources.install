<?php
/**
 * @file
 * Handle installation tasks for this module.
 *
 * @license GPL, or GNU General Public License, version 3
 * @license http://opensource.org/licenses/GPL-3.0
 * @see README.md how to contribute to this project
 */

/**
 * Implements hook_update_dependencies().
 */
function uhc_sources_update_dependencies() {
  $dependencies['migrate'][7203] = array(
    'uhc_sources' => 7003,
  );
  return $dependencies;
}

/**
 * Uninstall.
 */
function uhc_sources_uninstall() {
  variable_del('uhc_sources_base_url');
  variable_del('uhc_sources_examination_type_codes');
  variable_del('uhc_sources_timeout');
  variable_del('uhc_sources_simulate_failure');
  variable_del('uhc_sources_expected_duration');
}

/**
 * Remove Open university prefixes in all languages from every existing node.
 */
function uhc_sources_update_7001() {
  $fields = array(
    array(
      'table' => 'field_data_title_field',
      'column' => 'title_field_value',
      'id' => 'entity_id',
    ),
    array(
      'table' => 'field_revision_title_field',
      'column' => 'title_field_value',
      'id' => 'entity_id',
    ),
    array(
      'table' => 'node',
      'column' => 'title',
      'id' => 'nid',
    ),
    array(
      'table' => 'node_revision',
      'column' => 'title',
      'id' => 'nid',
    ),
  );
  $prefixes = array(
    'fi' => 'Avoin yo:',
    'en' => 'Open uni:',
    'sv' => 'Öppna uni:',
  );
  $replacement_prefixes = array(
    'fi' => '/Avoin yo:\s*/',
    'en' => '/Open uni:\s*/',
    'sv' => '/Öppna uni:\s*/',
  );

  foreach ($fields as $field) {
    $results = db_query(
      'select ' . ($field['table'] != 'node_revision' ? 'language, ' : '') . $field['id'] . ', ' . $field['column'] . ' from {' . $field['table'] . '}
      where ' . $field['column'] . ' like :prefix_fi
      or ' . $field['column'] . ' like :prefix_sv
      or ' . $field['column'] . ' like :prefix_en',
      array(
        ':prefix_fi' => '%' . db_like($prefixes['fi']) . '%',
        ':prefix_en' => '%' . db_like($prefixes['en']) . '%',
        ':prefix_sv' => '%' . db_like($prefixes['sv']) . '%',
      )
    );

    while ($result = $results->fetchAssoc()) {
      $query = db_update($field['table'])
        ->fields(array(
          $field['column'] => preg_replace($replacement_prefixes, '', $result[$field['column']]),
        ))
        ->condition($field['id'], $result[$field['id']]);
      if ($field['table'] != 'node_revision') {
        $query->condition('language', $result['language']);
      }
      $query->execute();
    }
  }
}

/**
 * Remove the variable which will not be used anymore.
 */
function uhc_sources_update_7002() {
  // Remove variable
  variable_del('uhc_migrate_selected_organisational_units');
}

/**
 * Surpress Migrate deprecation warnings (field mappings should use subfield
 * notation instead of passing arguments as an array, but the old way is still
 * fully supported).
 */
function uhc_sources_update_7003() {
  variable_set('migrate_deprecation_warnings', 0);
}

/**
 * Update queue name from "uhc_sources_stub_handling" to
 * "uhc_sources_postupdate_handling".
 */
function uhc_sources_update_7004() {
  db_update('queue')->fields(array('name' => 'uhc_sources_postupdate_handling'))->condition('name', 'uhc_sources_stub_handling')->execute();
}

/**
 * Cleans up last requested timestamp variables and migrate post update queue to
 * new queue.
 */
function uhc_sources_update_7005() {
  module_enable(array('uh_oodi_queue', 'uh_oodi_queue_poll'));
  // Remove variables
  db_query("DELETE FROM {variable} WHERE name LIKE 'uhc_sources_last_requested_%'");

  /** @var DrupalReliableQueueInterface $source_queue */
  $source_queue = DrupalQueue::get('uhc_sources_postupdate_handling', TRUE);
  $target_queue = new UHOodiPrioritisedQueue();
  while ($item = $source_queue->claimItem()) {

    // Create item to target queue
    $created = $target_queue->createItem(array(
      'action' => 'update',
      'entityType' => $item->data['type'],
      'entityId' => $item->data['id'],
    ), UHOodiQueue::PRIORITY_MEDIUM);

    // If it was successfully created, remove it from source queue
    if ($created) {
      $source_queue->deleteItem($item);
    }

  }
}

/**
 * Queue Oodi changes from 2016-10-18T05:00:00Z with low priority as there was
 * major issues during that date.
 */
function uhc_sources_update_7006() {

  /*
   * Most of code here is borrowed from uh_oodi_queue_poll_cron() function.
   */

  // Define previous and next last requested timestamp
  $last_requested = new DateTime('2016-10-18T05:00:00Z', new DateTimeZone('Etc/Zulu'));

  // Define processing
  $processors = array(
    'learningopportunity' => array(
      'url' => variable_get('uh_oodi_queue_poll_learningopportunity_changes_url', ''),
      'mapping' => variable_get('uh_oodi_queue_poll_learningopportunity_mapping', array(
        'action' => array('property' => 'deleted', 'preprocessors' => array('_uh_oodi_queue_poll_determine_action')),
        'entityId' => 'learningopportunity_id',
      )),
    ),
    'courseunitrealisation' => array(
      'url' => variable_get('uh_oodi_queue_poll_courseunitrealisation_changes_url', ''),
      'mapping' => variable_get('uh_oodi_queue_poll_courseunitrealisation_mapping', array(
        'action' => array('property' => 'deleted', 'preprocessors' => array('_uh_oodi_queue_poll_determine_action')),
        'entityId' => 'course_id',
      )),
    ),
  );

  // Parse changes and put them to queues
  $http_options = variable_get('uh_oodi_queue_poll_http_options', array());
  $responses = _uh_oodi_queue_poll_request($processors, $last_requested, $http_options);
  if (_uh_oodi_queue_poll_responses_valid($responses)) {
    $items = _uh_oodi_queue_poll_process_items($responses, $processors);
    $queue = new UHOodiQueue(UHOodiQueue::PRIORITY_LOW);
    foreach ($items as $item) {
      try {
        $queue->validateItem($item);
        $queue->createItem($item);
      } catch (\LogicException $e) {
        watchdog('uhc_sources', 'Failed adding Oodi item to queue: "@message"', array('@message' => $e->getMessage()), WATCHDOG_ERROR);
      }
    }
  }
}

/**
 * Update permission database entries.
 */
function uhc_sources_update_7007() {
  db_update('role_permission')
    ->condition('permission', 'access sync status page')
    ->fields(array('permission' => 'access queue status page'))
    ->execute();
}

/**
 * Re-queue STUB items in search_api_et_item.
 */
function uhc_sources_update_7008() {
  $query = db_query("SELECT fi.entity_id nid, fi.field_imp_id_value course_imp_id FROM {search_api_et_item} saei JOIN field_data_field_imp_id fi ON fi.entity_id = SUBSTRING_INDEX(saei.item_id, '/', 1) WHERE saei.item_id LIKE '%/und';");
  $course_imps = array();
  while ($item = $query->fetchAssoc()) {
    if ($item['course_imp_id'] == 'demo course') {
      // Don't deal with demo course
      continue;
    }

    // For STUB cases, we'll remove node, maps and queue them for import
    $node = node_load($item['nid']);
    if (substr($node->title, 0, 4) == 'STUB') {
      $course_imps[] = $item['course_imp_id'];
      $map = new MigrateSQLMap('CourseImplementationNode', array('id'), array('nid'));
      if ($row = $map->getRowBySource(array($item['course_imp_id']))) {
        $map->delete([$item['course_imp_id']]);
        node_delete($item['nid']);
      }
    }
  }

  // Queue chosen items
  $queue = new UHOodiQueue(UHOodiQueue::PRIORITY_LOW);
  foreach ($course_imps as $id) {
    $item = array(
      'action' => 'update',
      'entityType' => 'courseunitrealisation',
      'entityId' => $id,
    );
    $queue->validateItem($item);
    $queue->createItem($item);
  }
}
